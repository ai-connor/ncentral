/*
N-central API-Service

<h3>API Access</h3> <p>In order to use the API-Service endpoints, ensure the following prerequisites are met:</p> <ol>     <li>User is created in N-central with appropriate permissions and configuration         (roles, access groups, MFA disabled, 2FA disabled).</li>     <li>API access is set up in N-central by having a JWT         (Json Web Token, referred to as \"N-central User-API Token\") generated,         acting as the permanent secret solely used for fetching access and refresh tokens.</li> </ol> <p>To access the API-Service endpoints, the JWT must first be exchanged with access and refresh tokens:</p> <ul>     <li>         <p><b>Using Swagger UI:</b></p>         <ol>             <li>Click on the <b>\"Authorize\"</b> button and enter the JWT into the value field                 under <b>\"N-central User-API Token (JWT)\"</b>, then navigate to                 the <code>/api/auth/authenticate</code> endpoint, click <b>\"Try it out\"</b>                 and then <b>\"Execute\"</b>.                 <br/>The new “Access Token” and “Refresh Token” fields will be available in the “Server Response”                 section below. Note that the expiry is 3600s ( 1h ). Copy the value of the access token.</li>             <li>Click on the <b>lock icon</b> to the right of any endpoint                 (or the <b>\"Authorize\"</b> button at the top), enter the access token in the                 <b>\"API-Access Token\"</b> field and click <b>\"Authorize\"</b>.</li>             <li>To call an API-Service endpoint, navigate to it, click <b>\"Try it out\"</b> button and             then <b>\"Execute\"</b>. If the steps above were successful, the access token is included in requests             automatically.</li>         </ol>     </li>     <li>         <p><b>Using a different HTTP client:</b></p>         <ol>             <li>Call the <code>/api/auth/authenticate</code> endpoint.                 The JWT token must be specified under the <code>Authorization</code> header,                 in the form <code>Bearer &lt;YOUR_JWT&gt;\"</code>.                 <br/>The access and refresh tokens are present in the response.</li>             <li>When calling API-Service endpoints, make sure to specify the <b>access token</b> in             the <code>Authorization</code> header as <code>Bearer &lt;ACCESS_TOKEN&gt;</code>.</li>         </ol>     </li> </ul> <h3>API Pagination & Sorting</h3> <p>Certain API-Service query endpoints support pagination and sorting through the use of query parameters.</p> <p><b>Pagination query parameters:</b></p> <ul>     <li>pageSize: number between 1 and 1000 specifying how many items to return for each page (if available).         If unspecified, the default is 50.</li>     <li>pageNumber: number specifying what page of data to retrieve, starting from 1 as the first page.         If unspecified, the default is 1.</li> </ul> <p>A paginated response contains several related fields, such as pageSize, pageNumber, itemCount, totalItems,     totalPages, _links (first, last, previous and next pages) and _warning (containing any warning messages,     if present).</p> <p><b>Sorting query parameters:</b></p> <ul>     <li>sortBy: the name of the field to sort the results by. If unspecified, no sorting is applied.</li>     <li>sortOrder: the case insensitive sorting direction supporting ASC/ASCENDING/NATURAL and         DESC/DESCENDING/REVERSE. If unspecified, the default is ASC.</li> </ul> <h3>API Rate Limiting</h3> <p>The API-Service endpoints are rate limited to ensure the stability, availability and performance of     the overall system.</p> <p>Upon reaching such a rate limit, the endpoints return HTTP Status 429 - Too Many Requests.</p> <p>The system will accept further requests once existing in-flight requests are completed.</p> 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ncentral

import (
	"encoding/json"
)

// checks if the Device type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Device{}

// Device Response for list of devices.
type Device struct {
	DeviceId *int32 `json:"deviceId,omitempty"`
	Uri *string `json:"uri,omitempty"`
	RemoteControlUri *string `json:"remoteControlUri,omitempty"`
	SourceUri *string `json:"sourceUri,omitempty"`
	LongName *string `json:"longName,omitempty"`
	DeviceClass *string `json:"deviceClass,omitempty"`
	Description *string `json:"description,omitempty"`
	IsProbe *bool `json:"isProbe,omitempty"`
	OsId *string `json:"osId,omitempty"`
	SupportedOs *string `json:"supportedOs,omitempty"`
	DiscoveredName *string `json:"discoveredName,omitempty"`
	DeviceClassLabel *string `json:"deviceClassLabel,omitempty"`
	SupportedOsLabel *string `json:"supportedOsLabel,omitempty"`
	LastLoggedInUser *string `json:"lastLoggedInUser,omitempty"`
	StillLoggedIn *string `json:"stillLoggedIn,omitempty"`
	LicenseMode *string `json:"licenseMode,omitempty"`
	OrgUnitId *int32 `json:"orgUnitId,omitempty"`
	SoId *int32 `json:"soId,omitempty"`
	SoName *string `json:"soName,omitempty"`
	CustomerId *int32 `json:"customerId,omitempty"`
	CustomerName *string `json:"customerName,omitempty"`
	SiteId *int32 `json:"siteId,omitempty"`
	SiteName *string `json:"siteName,omitempty"`
	// Last check-in time of the agent. This field is optional and will only be included if the value is non-null.
	LastApplianceCheckinTime *string `json:"lastApplianceCheckinTime,omitempty"`
}

// NewDevice instantiates a new Device object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevice() *Device {
	this := Device{}
	return &this
}

// NewDeviceWithDefaults instantiates a new Device object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceWithDefaults() *Device {
	this := Device{}
	return &this
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *Device) GetDeviceId() int32 {
	if o == nil || IsNil(o.DeviceId) {
		var ret int32
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetDeviceIdOk() (*int32, bool) {
	if o == nil || IsNil(o.DeviceId) {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *Device) HasDeviceId() bool {
	if o != nil && !IsNil(o.DeviceId) {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given int32 and assigns it to the DeviceId field.
func (o *Device) SetDeviceId(v int32) {
	o.DeviceId = &v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *Device) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *Device) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *Device) SetUri(v string) {
	o.Uri = &v
}

// GetRemoteControlUri returns the RemoteControlUri field value if set, zero value otherwise.
func (o *Device) GetRemoteControlUri() string {
	if o == nil || IsNil(o.RemoteControlUri) {
		var ret string
		return ret
	}
	return *o.RemoteControlUri
}

// GetRemoteControlUriOk returns a tuple with the RemoteControlUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetRemoteControlUriOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteControlUri) {
		return nil, false
	}
	return o.RemoteControlUri, true
}

// HasRemoteControlUri returns a boolean if a field has been set.
func (o *Device) HasRemoteControlUri() bool {
	if o != nil && !IsNil(o.RemoteControlUri) {
		return true
	}

	return false
}

// SetRemoteControlUri gets a reference to the given string and assigns it to the RemoteControlUri field.
func (o *Device) SetRemoteControlUri(v string) {
	o.RemoteControlUri = &v
}

// GetSourceUri returns the SourceUri field value if set, zero value otherwise.
func (o *Device) GetSourceUri() string {
	if o == nil || IsNil(o.SourceUri) {
		var ret string
		return ret
	}
	return *o.SourceUri
}

// GetSourceUriOk returns a tuple with the SourceUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetSourceUriOk() (*string, bool) {
	if o == nil || IsNil(o.SourceUri) {
		return nil, false
	}
	return o.SourceUri, true
}

// HasSourceUri returns a boolean if a field has been set.
func (o *Device) HasSourceUri() bool {
	if o != nil && !IsNil(o.SourceUri) {
		return true
	}

	return false
}

// SetSourceUri gets a reference to the given string and assigns it to the SourceUri field.
func (o *Device) SetSourceUri(v string) {
	o.SourceUri = &v
}

// GetLongName returns the LongName field value if set, zero value otherwise.
func (o *Device) GetLongName() string {
	if o == nil || IsNil(o.LongName) {
		var ret string
		return ret
	}
	return *o.LongName
}

// GetLongNameOk returns a tuple with the LongName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetLongNameOk() (*string, bool) {
	if o == nil || IsNil(o.LongName) {
		return nil, false
	}
	return o.LongName, true
}

// HasLongName returns a boolean if a field has been set.
func (o *Device) HasLongName() bool {
	if o != nil && !IsNil(o.LongName) {
		return true
	}

	return false
}

// SetLongName gets a reference to the given string and assigns it to the LongName field.
func (o *Device) SetLongName(v string) {
	o.LongName = &v
}

// GetDeviceClass returns the DeviceClass field value if set, zero value otherwise.
func (o *Device) GetDeviceClass() string {
	if o == nil || IsNil(o.DeviceClass) {
		var ret string
		return ret
	}
	return *o.DeviceClass
}

// GetDeviceClassOk returns a tuple with the DeviceClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetDeviceClassOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceClass) {
		return nil, false
	}
	return o.DeviceClass, true
}

// HasDeviceClass returns a boolean if a field has been set.
func (o *Device) HasDeviceClass() bool {
	if o != nil && !IsNil(o.DeviceClass) {
		return true
	}

	return false
}

// SetDeviceClass gets a reference to the given string and assigns it to the DeviceClass field.
func (o *Device) SetDeviceClass(v string) {
	o.DeviceClass = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Device) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Device) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Device) SetDescription(v string) {
	o.Description = &v
}

// GetIsProbe returns the IsProbe field value if set, zero value otherwise.
func (o *Device) GetIsProbe() bool {
	if o == nil || IsNil(o.IsProbe) {
		var ret bool
		return ret
	}
	return *o.IsProbe
}

// GetIsProbeOk returns a tuple with the IsProbe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetIsProbeOk() (*bool, bool) {
	if o == nil || IsNil(o.IsProbe) {
		return nil, false
	}
	return o.IsProbe, true
}

// HasIsProbe returns a boolean if a field has been set.
func (o *Device) HasIsProbe() bool {
	if o != nil && !IsNil(o.IsProbe) {
		return true
	}

	return false
}

// SetIsProbe gets a reference to the given bool and assigns it to the IsProbe field.
func (o *Device) SetIsProbe(v bool) {
	o.IsProbe = &v
}

// GetOsId returns the OsId field value if set, zero value otherwise.
func (o *Device) GetOsId() string {
	if o == nil || IsNil(o.OsId) {
		var ret string
		return ret
	}
	return *o.OsId
}

// GetOsIdOk returns a tuple with the OsId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetOsIdOk() (*string, bool) {
	if o == nil || IsNil(o.OsId) {
		return nil, false
	}
	return o.OsId, true
}

// HasOsId returns a boolean if a field has been set.
func (o *Device) HasOsId() bool {
	if o != nil && !IsNil(o.OsId) {
		return true
	}

	return false
}

// SetOsId gets a reference to the given string and assigns it to the OsId field.
func (o *Device) SetOsId(v string) {
	o.OsId = &v
}

// GetSupportedOs returns the SupportedOs field value if set, zero value otherwise.
func (o *Device) GetSupportedOs() string {
	if o == nil || IsNil(o.SupportedOs) {
		var ret string
		return ret
	}
	return *o.SupportedOs
}

// GetSupportedOsOk returns a tuple with the SupportedOs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetSupportedOsOk() (*string, bool) {
	if o == nil || IsNil(o.SupportedOs) {
		return nil, false
	}
	return o.SupportedOs, true
}

// HasSupportedOs returns a boolean if a field has been set.
func (o *Device) HasSupportedOs() bool {
	if o != nil && !IsNil(o.SupportedOs) {
		return true
	}

	return false
}

// SetSupportedOs gets a reference to the given string and assigns it to the SupportedOs field.
func (o *Device) SetSupportedOs(v string) {
	o.SupportedOs = &v
}

// GetDiscoveredName returns the DiscoveredName field value if set, zero value otherwise.
func (o *Device) GetDiscoveredName() string {
	if o == nil || IsNil(o.DiscoveredName) {
		var ret string
		return ret
	}
	return *o.DiscoveredName
}

// GetDiscoveredNameOk returns a tuple with the DiscoveredName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetDiscoveredNameOk() (*string, bool) {
	if o == nil || IsNil(o.DiscoveredName) {
		return nil, false
	}
	return o.DiscoveredName, true
}

// HasDiscoveredName returns a boolean if a field has been set.
func (o *Device) HasDiscoveredName() bool {
	if o != nil && !IsNil(o.DiscoveredName) {
		return true
	}

	return false
}

// SetDiscoveredName gets a reference to the given string and assigns it to the DiscoveredName field.
func (o *Device) SetDiscoveredName(v string) {
	o.DiscoveredName = &v
}

// GetDeviceClassLabel returns the DeviceClassLabel field value if set, zero value otherwise.
func (o *Device) GetDeviceClassLabel() string {
	if o == nil || IsNil(o.DeviceClassLabel) {
		var ret string
		return ret
	}
	return *o.DeviceClassLabel
}

// GetDeviceClassLabelOk returns a tuple with the DeviceClassLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetDeviceClassLabelOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceClassLabel) {
		return nil, false
	}
	return o.DeviceClassLabel, true
}

// HasDeviceClassLabel returns a boolean if a field has been set.
func (o *Device) HasDeviceClassLabel() bool {
	if o != nil && !IsNil(o.DeviceClassLabel) {
		return true
	}

	return false
}

// SetDeviceClassLabel gets a reference to the given string and assigns it to the DeviceClassLabel field.
func (o *Device) SetDeviceClassLabel(v string) {
	o.DeviceClassLabel = &v
}

// GetSupportedOsLabel returns the SupportedOsLabel field value if set, zero value otherwise.
func (o *Device) GetSupportedOsLabel() string {
	if o == nil || IsNil(o.SupportedOsLabel) {
		var ret string
		return ret
	}
	return *o.SupportedOsLabel
}

// GetSupportedOsLabelOk returns a tuple with the SupportedOsLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetSupportedOsLabelOk() (*string, bool) {
	if o == nil || IsNil(o.SupportedOsLabel) {
		return nil, false
	}
	return o.SupportedOsLabel, true
}

// HasSupportedOsLabel returns a boolean if a field has been set.
func (o *Device) HasSupportedOsLabel() bool {
	if o != nil && !IsNil(o.SupportedOsLabel) {
		return true
	}

	return false
}

// SetSupportedOsLabel gets a reference to the given string and assigns it to the SupportedOsLabel field.
func (o *Device) SetSupportedOsLabel(v string) {
	o.SupportedOsLabel = &v
}

// GetLastLoggedInUser returns the LastLoggedInUser field value if set, zero value otherwise.
func (o *Device) GetLastLoggedInUser() string {
	if o == nil || IsNil(o.LastLoggedInUser) {
		var ret string
		return ret
	}
	return *o.LastLoggedInUser
}

// GetLastLoggedInUserOk returns a tuple with the LastLoggedInUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetLastLoggedInUserOk() (*string, bool) {
	if o == nil || IsNil(o.LastLoggedInUser) {
		return nil, false
	}
	return o.LastLoggedInUser, true
}

// HasLastLoggedInUser returns a boolean if a field has been set.
func (o *Device) HasLastLoggedInUser() bool {
	if o != nil && !IsNil(o.LastLoggedInUser) {
		return true
	}

	return false
}

// SetLastLoggedInUser gets a reference to the given string and assigns it to the LastLoggedInUser field.
func (o *Device) SetLastLoggedInUser(v string) {
	o.LastLoggedInUser = &v
}

// GetStillLoggedIn returns the StillLoggedIn field value if set, zero value otherwise.
func (o *Device) GetStillLoggedIn() string {
	if o == nil || IsNil(o.StillLoggedIn) {
		var ret string
		return ret
	}
	return *o.StillLoggedIn
}

// GetStillLoggedInOk returns a tuple with the StillLoggedIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetStillLoggedInOk() (*string, bool) {
	if o == nil || IsNil(o.StillLoggedIn) {
		return nil, false
	}
	return o.StillLoggedIn, true
}

// HasStillLoggedIn returns a boolean if a field has been set.
func (o *Device) HasStillLoggedIn() bool {
	if o != nil && !IsNil(o.StillLoggedIn) {
		return true
	}

	return false
}

// SetStillLoggedIn gets a reference to the given string and assigns it to the StillLoggedIn field.
func (o *Device) SetStillLoggedIn(v string) {
	o.StillLoggedIn = &v
}

// GetLicenseMode returns the LicenseMode field value if set, zero value otherwise.
func (o *Device) GetLicenseMode() string {
	if o == nil || IsNil(o.LicenseMode) {
		var ret string
		return ret
	}
	return *o.LicenseMode
}

// GetLicenseModeOk returns a tuple with the LicenseMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetLicenseModeOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseMode) {
		return nil, false
	}
	return o.LicenseMode, true
}

// HasLicenseMode returns a boolean if a field has been set.
func (o *Device) HasLicenseMode() bool {
	if o != nil && !IsNil(o.LicenseMode) {
		return true
	}

	return false
}

// SetLicenseMode gets a reference to the given string and assigns it to the LicenseMode field.
func (o *Device) SetLicenseMode(v string) {
	o.LicenseMode = &v
}

// GetOrgUnitId returns the OrgUnitId field value if set, zero value otherwise.
func (o *Device) GetOrgUnitId() int32 {
	if o == nil || IsNil(o.OrgUnitId) {
		var ret int32
		return ret
	}
	return *o.OrgUnitId
}

// GetOrgUnitIdOk returns a tuple with the OrgUnitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetOrgUnitIdOk() (*int32, bool) {
	if o == nil || IsNil(o.OrgUnitId) {
		return nil, false
	}
	return o.OrgUnitId, true
}

// HasOrgUnitId returns a boolean if a field has been set.
func (o *Device) HasOrgUnitId() bool {
	if o != nil && !IsNil(o.OrgUnitId) {
		return true
	}

	return false
}

// SetOrgUnitId gets a reference to the given int32 and assigns it to the OrgUnitId field.
func (o *Device) SetOrgUnitId(v int32) {
	o.OrgUnitId = &v
}

// GetSoId returns the SoId field value if set, zero value otherwise.
func (o *Device) GetSoId() int32 {
	if o == nil || IsNil(o.SoId) {
		var ret int32
		return ret
	}
	return *o.SoId
}

// GetSoIdOk returns a tuple with the SoId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetSoIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SoId) {
		return nil, false
	}
	return o.SoId, true
}

// HasSoId returns a boolean if a field has been set.
func (o *Device) HasSoId() bool {
	if o != nil && !IsNil(o.SoId) {
		return true
	}

	return false
}

// SetSoId gets a reference to the given int32 and assigns it to the SoId field.
func (o *Device) SetSoId(v int32) {
	o.SoId = &v
}

// GetSoName returns the SoName field value if set, zero value otherwise.
func (o *Device) GetSoName() string {
	if o == nil || IsNil(o.SoName) {
		var ret string
		return ret
	}
	return *o.SoName
}

// GetSoNameOk returns a tuple with the SoName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetSoNameOk() (*string, bool) {
	if o == nil || IsNil(o.SoName) {
		return nil, false
	}
	return o.SoName, true
}

// HasSoName returns a boolean if a field has been set.
func (o *Device) HasSoName() bool {
	if o != nil && !IsNil(o.SoName) {
		return true
	}

	return false
}

// SetSoName gets a reference to the given string and assigns it to the SoName field.
func (o *Device) SetSoName(v string) {
	o.SoName = &v
}

// GetCustomerId returns the CustomerId field value if set, zero value otherwise.
func (o *Device) GetCustomerId() int32 {
	if o == nil || IsNil(o.CustomerId) {
		var ret int32
		return ret
	}
	return *o.CustomerId
}

// GetCustomerIdOk returns a tuple with the CustomerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetCustomerIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CustomerId) {
		return nil, false
	}
	return o.CustomerId, true
}

// HasCustomerId returns a boolean if a field has been set.
func (o *Device) HasCustomerId() bool {
	if o != nil && !IsNil(o.CustomerId) {
		return true
	}

	return false
}

// SetCustomerId gets a reference to the given int32 and assigns it to the CustomerId field.
func (o *Device) SetCustomerId(v int32) {
	o.CustomerId = &v
}

// GetCustomerName returns the CustomerName field value if set, zero value otherwise.
func (o *Device) GetCustomerName() string {
	if o == nil || IsNil(o.CustomerName) {
		var ret string
		return ret
	}
	return *o.CustomerName
}

// GetCustomerNameOk returns a tuple with the CustomerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetCustomerNameOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerName) {
		return nil, false
	}
	return o.CustomerName, true
}

// HasCustomerName returns a boolean if a field has been set.
func (o *Device) HasCustomerName() bool {
	if o != nil && !IsNil(o.CustomerName) {
		return true
	}

	return false
}

// SetCustomerName gets a reference to the given string and assigns it to the CustomerName field.
func (o *Device) SetCustomerName(v string) {
	o.CustomerName = &v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *Device) GetSiteId() int32 {
	if o == nil || IsNil(o.SiteId) {
		var ret int32
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetSiteIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *Device) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given int32 and assigns it to the SiteId field.
func (o *Device) SetSiteId(v int32) {
	o.SiteId = &v
}

// GetSiteName returns the SiteName field value if set, zero value otherwise.
func (o *Device) GetSiteName() string {
	if o == nil || IsNil(o.SiteName) {
		var ret string
		return ret
	}
	return *o.SiteName
}

// GetSiteNameOk returns a tuple with the SiteName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetSiteNameOk() (*string, bool) {
	if o == nil || IsNil(o.SiteName) {
		return nil, false
	}
	return o.SiteName, true
}

// HasSiteName returns a boolean if a field has been set.
func (o *Device) HasSiteName() bool {
	if o != nil && !IsNil(o.SiteName) {
		return true
	}

	return false
}

// SetSiteName gets a reference to the given string and assigns it to the SiteName field.
func (o *Device) SetSiteName(v string) {
	o.SiteName = &v
}

// GetLastApplianceCheckinTime returns the LastApplianceCheckinTime field value if set, zero value otherwise.
func (o *Device) GetLastApplianceCheckinTime() string {
	if o == nil || IsNil(o.LastApplianceCheckinTime) {
		var ret string
		return ret
	}
	return *o.LastApplianceCheckinTime
}

// GetLastApplianceCheckinTimeOk returns a tuple with the LastApplianceCheckinTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetLastApplianceCheckinTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LastApplianceCheckinTime) {
		return nil, false
	}
	return o.LastApplianceCheckinTime, true
}

// HasLastApplianceCheckinTime returns a boolean if a field has been set.
func (o *Device) HasLastApplianceCheckinTime() bool {
	if o != nil && !IsNil(o.LastApplianceCheckinTime) {
		return true
	}

	return false
}

// SetLastApplianceCheckinTime gets a reference to the given string and assigns it to the LastApplianceCheckinTime field.
func (o *Device) SetLastApplianceCheckinTime(v string) {
	o.LastApplianceCheckinTime = &v
}

func (o Device) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Device) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeviceId) {
		toSerialize["deviceId"] = o.DeviceId
	}
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	if !IsNil(o.RemoteControlUri) {
		toSerialize["remoteControlUri"] = o.RemoteControlUri
	}
	if !IsNil(o.SourceUri) {
		toSerialize["sourceUri"] = o.SourceUri
	}
	if !IsNil(o.LongName) {
		toSerialize["longName"] = o.LongName
	}
	if !IsNil(o.DeviceClass) {
		toSerialize["deviceClass"] = o.DeviceClass
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.IsProbe) {
		toSerialize["isProbe"] = o.IsProbe
	}
	if !IsNil(o.OsId) {
		toSerialize["osId"] = o.OsId
	}
	if !IsNil(o.SupportedOs) {
		toSerialize["supportedOs"] = o.SupportedOs
	}
	if !IsNil(o.DiscoveredName) {
		toSerialize["discoveredName"] = o.DiscoveredName
	}
	if !IsNil(o.DeviceClassLabel) {
		toSerialize["deviceClassLabel"] = o.DeviceClassLabel
	}
	if !IsNil(o.SupportedOsLabel) {
		toSerialize["supportedOsLabel"] = o.SupportedOsLabel
	}
	if !IsNil(o.LastLoggedInUser) {
		toSerialize["lastLoggedInUser"] = o.LastLoggedInUser
	}
	if !IsNil(o.StillLoggedIn) {
		toSerialize["stillLoggedIn"] = o.StillLoggedIn
	}
	if !IsNil(o.LicenseMode) {
		toSerialize["licenseMode"] = o.LicenseMode
	}
	if !IsNil(o.OrgUnitId) {
		toSerialize["orgUnitId"] = o.OrgUnitId
	}
	if !IsNil(o.SoId) {
		toSerialize["soId"] = o.SoId
	}
	if !IsNil(o.SoName) {
		toSerialize["soName"] = o.SoName
	}
	if !IsNil(o.CustomerId) {
		toSerialize["customerId"] = o.CustomerId
	}
	if !IsNil(o.CustomerName) {
		toSerialize["customerName"] = o.CustomerName
	}
	if !IsNil(o.SiteId) {
		toSerialize["siteId"] = o.SiteId
	}
	if !IsNil(o.SiteName) {
		toSerialize["siteName"] = o.SiteName
	}
	if !IsNil(o.LastApplianceCheckinTime) {
		toSerialize["lastApplianceCheckinTime"] = o.LastApplianceCheckinTime
	}
	return toSerialize, nil
}

type NullableDevice struct {
	value *Device
	isSet bool
}

func (v NullableDevice) Get() *Device {
	return v.value
}

func (v *NullableDevice) Set(val *Device) {
	v.value = val
	v.isSet = true
}

func (v NullableDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevice(val *Device) *NullableDevice {
	return &NullableDevice{value: val, isSet: true}
}

func (v NullableDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


