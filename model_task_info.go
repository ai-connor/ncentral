/*
N-central API-Service

<h3>API Access</h3> <p>In order to use the API-Service endpoints, ensure the following prerequisites are met:</p> <ol>     <li>User is created in N-central with appropriate permissions and configuration         (roles, access groups, MFA disabled, 2FA disabled).</li>     <li>API access is set up in N-central by having a JWT         (Json Web Token, referred to as \"N-central User-API Token\") generated,         acting as the permanent secret solely used for fetching access and refresh tokens.</li> </ol> <p>To access the API-Service endpoints, the JWT must first be exchanged with access and refresh tokens:</p> <ul>     <li>         <p><b>Using Swagger UI:</b></p>         <ol>             <li>Click on the <b>\"Authorize\"</b> button and enter the JWT into the value field                 under <b>\"N-central User-API Token (JWT)\"</b>, then navigate to                 the <code>/api/auth/authenticate</code> endpoint, click <b>\"Try it out\"</b>                 and then <b>\"Execute\"</b>.                 <br/>The new “Access Token” and “Refresh Token” fields will be available in the “Server Response”                 section below. Note that the expiry is 3600s ( 1h ). Copy the value of the access token.</li>             <li>Click on the <b>lock icon</b> to the right of any endpoint                 (or the <b>\"Authorize\"</b> button at the top), enter the access token in the                 <b>\"API-Access Token\"</b> field and click <b>\"Authorize\"</b>.</li>             <li>To call an API-Service endpoint, navigate to it, click <b>\"Try it out\"</b> button and             then <b>\"Execute\"</b>. If the steps above were successful, the access token is included in requests             automatically.</li>         </ol>     </li>     <li>         <p><b>Using a different HTTP client:</b></p>         <ol>             <li>Call the <code>/api/auth/authenticate</code> endpoint.                 The JWT token must be specified under the <code>Authorization</code> header,                 in the form <code>Bearer &lt;YOUR_JWT&gt;\"</code>.                 <br/>The access and refresh tokens are present in the response.</li>             <li>When calling API-Service endpoints, make sure to specify the <b>access token</b> in             the <code>Authorization</code> header as <code>Bearer &lt;ACCESS_TOKEN&gt;</code>.</li>         </ol>     </li> </ul> <h3>API Pagination & Sorting</h3> <p>Certain API-Service query endpoints support pagination and sorting through the use of query parameters.</p> <p><b>Pagination query parameters:</b></p> <ul>     <li>pageSize: number between 1 and 1000 specifying how many items to return for each page (if available).         If unspecified, the default is 50.</li>     <li>pageNumber: number specifying what page of data to retrieve, starting from 1 as the first page.         If unspecified, the default is 1.</li> </ul> <p>A paginated response contains several related fields, such as pageSize, pageNumber, itemCount, totalItems,     totalPages, _links (first, last, previous and next pages) and _warning (containing any warning messages,     if present).</p> <p><b>Sorting query parameters:</b></p> <ul>     <li>sortBy: the name of the field to sort the results by. If unspecified, no sorting is applied.</li>     <li>sortOrder: the case insensitive sorting direction supporting ASC/ASCENDING/NATURAL and         DESC/DESCENDING/REVERSE. If unspecified, the default is ASC.</li> </ul> <h3>API Rate Limiting</h3> <p>The API-Service endpoints are rate limited to ensure the stability, availability and performance of     the overall system.</p> <p>Upon reaching such a rate limit, the endpoints return HTTP Status 429 - Too Many Requests.</p> <p>The system will accept further requests once existing in-flight requests are completed.</p> 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ncentral

import (
	"encoding/json"
)

// checks if the TaskInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskInfo{}

// TaskInfo Task information response.
type TaskInfo struct {
	// Id of the task.
	TaskId *int32 `json:"taskId,omitempty"`
	// The unique identifier of the parent task (if applicable), or null if there is no parent task.
	ParentId *int32 `json:"parentId,omitempty"`
	// The name of the task (same with taskName).
	Name *string `json:"name,omitempty"`
	// The name of the task (same with name).
	TaskName *string `json:"taskName,omitempty"`
	// The unique identifier for the item associated with the task.
	ItemId *int32 `json:"itemId,omitempty"`
	// The type of the task.
	Type *string `json:"type,omitempty"`
	// The unique identifier of the organization associated with the task.
	OrgUnitId *int32 `json:"orgUnitId,omitempty"`
	// The unique identifier of the SO associated with the task.
	SoId *int32 `json:"soId,omitempty"`
	// The unique identifier of the customer associated with the task.
	CustomerId *int32 `json:"customerId,omitempty"`
	// The unique identifier of the site associated with the task.
	SiteId *int32 `json:"siteId,omitempty"`
	// The unique identifier of the appliance related to the task.
	ApplianceId *int32 `json:"applianceId,omitempty"`
	// Indicates whether the task is reactive (true) or not (false).
	IsReactive *bool `json:"isReactive,omitempty"`
	// Indicates whether the task is enabled (true) or disabled (false).
	IsEnabled *bool `json:"isEnabled,omitempty"`
	// List of device IDs that this task is run on.
	DeviceIds []string `json:"deviceIds,omitempty"`
}

// NewTaskInfo instantiates a new TaskInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskInfo() *TaskInfo {
	this := TaskInfo{}
	return &this
}

// NewTaskInfoWithDefaults instantiates a new TaskInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskInfoWithDefaults() *TaskInfo {
	this := TaskInfo{}
	return &this
}

// GetTaskId returns the TaskId field value if set, zero value otherwise.
func (o *TaskInfo) GetTaskId() int32 {
	if o == nil || IsNil(o.TaskId) {
		var ret int32
		return ret
	}
	return *o.TaskId
}

// GetTaskIdOk returns a tuple with the TaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskInfo) GetTaskIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TaskId) {
		return nil, false
	}
	return o.TaskId, true
}

// HasTaskId returns a boolean if a field has been set.
func (o *TaskInfo) HasTaskId() bool {
	if o != nil && !IsNil(o.TaskId) {
		return true
	}

	return false
}

// SetTaskId gets a reference to the given int32 and assigns it to the TaskId field.
func (o *TaskInfo) SetTaskId(v int32) {
	o.TaskId = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *TaskInfo) GetParentId() int32 {
	if o == nil || IsNil(o.ParentId) {
		var ret int32
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskInfo) GetParentIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ParentId) {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *TaskInfo) HasParentId() bool {
	if o != nil && !IsNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given int32 and assigns it to the ParentId field.
func (o *TaskInfo) SetParentId(v int32) {
	o.ParentId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TaskInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TaskInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TaskInfo) SetName(v string) {
	o.Name = &v
}

// GetTaskName returns the TaskName field value if set, zero value otherwise.
func (o *TaskInfo) GetTaskName() string {
	if o == nil || IsNil(o.TaskName) {
		var ret string
		return ret
	}
	return *o.TaskName
}

// GetTaskNameOk returns a tuple with the TaskName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskInfo) GetTaskNameOk() (*string, bool) {
	if o == nil || IsNil(o.TaskName) {
		return nil, false
	}
	return o.TaskName, true
}

// HasTaskName returns a boolean if a field has been set.
func (o *TaskInfo) HasTaskName() bool {
	if o != nil && !IsNil(o.TaskName) {
		return true
	}

	return false
}

// SetTaskName gets a reference to the given string and assigns it to the TaskName field.
func (o *TaskInfo) SetTaskName(v string) {
	o.TaskName = &v
}

// GetItemId returns the ItemId field value if set, zero value otherwise.
func (o *TaskInfo) GetItemId() int32 {
	if o == nil || IsNil(o.ItemId) {
		var ret int32
		return ret
	}
	return *o.ItemId
}

// GetItemIdOk returns a tuple with the ItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskInfo) GetItemIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ItemId) {
		return nil, false
	}
	return o.ItemId, true
}

// HasItemId returns a boolean if a field has been set.
func (o *TaskInfo) HasItemId() bool {
	if o != nil && !IsNil(o.ItemId) {
		return true
	}

	return false
}

// SetItemId gets a reference to the given int32 and assigns it to the ItemId field.
func (o *TaskInfo) SetItemId(v int32) {
	o.ItemId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TaskInfo) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskInfo) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TaskInfo) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TaskInfo) SetType(v string) {
	o.Type = &v
}

// GetOrgUnitId returns the OrgUnitId field value if set, zero value otherwise.
func (o *TaskInfo) GetOrgUnitId() int32 {
	if o == nil || IsNil(o.OrgUnitId) {
		var ret int32
		return ret
	}
	return *o.OrgUnitId
}

// GetOrgUnitIdOk returns a tuple with the OrgUnitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskInfo) GetOrgUnitIdOk() (*int32, bool) {
	if o == nil || IsNil(o.OrgUnitId) {
		return nil, false
	}
	return o.OrgUnitId, true
}

// HasOrgUnitId returns a boolean if a field has been set.
func (o *TaskInfo) HasOrgUnitId() bool {
	if o != nil && !IsNil(o.OrgUnitId) {
		return true
	}

	return false
}

// SetOrgUnitId gets a reference to the given int32 and assigns it to the OrgUnitId field.
func (o *TaskInfo) SetOrgUnitId(v int32) {
	o.OrgUnitId = &v
}

// GetSoId returns the SoId field value if set, zero value otherwise.
func (o *TaskInfo) GetSoId() int32 {
	if o == nil || IsNil(o.SoId) {
		var ret int32
		return ret
	}
	return *o.SoId
}

// GetSoIdOk returns a tuple with the SoId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskInfo) GetSoIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SoId) {
		return nil, false
	}
	return o.SoId, true
}

// HasSoId returns a boolean if a field has been set.
func (o *TaskInfo) HasSoId() bool {
	if o != nil && !IsNil(o.SoId) {
		return true
	}

	return false
}

// SetSoId gets a reference to the given int32 and assigns it to the SoId field.
func (o *TaskInfo) SetSoId(v int32) {
	o.SoId = &v
}

// GetCustomerId returns the CustomerId field value if set, zero value otherwise.
func (o *TaskInfo) GetCustomerId() int32 {
	if o == nil || IsNil(o.CustomerId) {
		var ret int32
		return ret
	}
	return *o.CustomerId
}

// GetCustomerIdOk returns a tuple with the CustomerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskInfo) GetCustomerIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CustomerId) {
		return nil, false
	}
	return o.CustomerId, true
}

// HasCustomerId returns a boolean if a field has been set.
func (o *TaskInfo) HasCustomerId() bool {
	if o != nil && !IsNil(o.CustomerId) {
		return true
	}

	return false
}

// SetCustomerId gets a reference to the given int32 and assigns it to the CustomerId field.
func (o *TaskInfo) SetCustomerId(v int32) {
	o.CustomerId = &v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *TaskInfo) GetSiteId() int32 {
	if o == nil || IsNil(o.SiteId) {
		var ret int32
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskInfo) GetSiteIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *TaskInfo) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given int32 and assigns it to the SiteId field.
func (o *TaskInfo) SetSiteId(v int32) {
	o.SiteId = &v
}

// GetApplianceId returns the ApplianceId field value if set, zero value otherwise.
func (o *TaskInfo) GetApplianceId() int32 {
	if o == nil || IsNil(o.ApplianceId) {
		var ret int32
		return ret
	}
	return *o.ApplianceId
}

// GetApplianceIdOk returns a tuple with the ApplianceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskInfo) GetApplianceIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ApplianceId) {
		return nil, false
	}
	return o.ApplianceId, true
}

// HasApplianceId returns a boolean if a field has been set.
func (o *TaskInfo) HasApplianceId() bool {
	if o != nil && !IsNil(o.ApplianceId) {
		return true
	}

	return false
}

// SetApplianceId gets a reference to the given int32 and assigns it to the ApplianceId field.
func (o *TaskInfo) SetApplianceId(v int32) {
	o.ApplianceId = &v
}

// GetIsReactive returns the IsReactive field value if set, zero value otherwise.
func (o *TaskInfo) GetIsReactive() bool {
	if o == nil || IsNil(o.IsReactive) {
		var ret bool
		return ret
	}
	return *o.IsReactive
}

// GetIsReactiveOk returns a tuple with the IsReactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskInfo) GetIsReactiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsReactive) {
		return nil, false
	}
	return o.IsReactive, true
}

// HasIsReactive returns a boolean if a field has been set.
func (o *TaskInfo) HasIsReactive() bool {
	if o != nil && !IsNil(o.IsReactive) {
		return true
	}

	return false
}

// SetIsReactive gets a reference to the given bool and assigns it to the IsReactive field.
func (o *TaskInfo) SetIsReactive(v bool) {
	o.IsReactive = &v
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *TaskInfo) GetIsEnabled() bool {
	if o == nil || IsNil(o.IsEnabled) {
		var ret bool
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskInfo) GetIsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEnabled) {
		return nil, false
	}
	return o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *TaskInfo) HasIsEnabled() bool {
	if o != nil && !IsNil(o.IsEnabled) {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given bool and assigns it to the IsEnabled field.
func (o *TaskInfo) SetIsEnabled(v bool) {
	o.IsEnabled = &v
}

// GetDeviceIds returns the DeviceIds field value if set, zero value otherwise.
func (o *TaskInfo) GetDeviceIds() []string {
	if o == nil || IsNil(o.DeviceIds) {
		var ret []string
		return ret
	}
	return o.DeviceIds
}

// GetDeviceIdsOk returns a tuple with the DeviceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskInfo) GetDeviceIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.DeviceIds) {
		return nil, false
	}
	return o.DeviceIds, true
}

// HasDeviceIds returns a boolean if a field has been set.
func (o *TaskInfo) HasDeviceIds() bool {
	if o != nil && !IsNil(o.DeviceIds) {
		return true
	}

	return false
}

// SetDeviceIds gets a reference to the given []string and assigns it to the DeviceIds field.
func (o *TaskInfo) SetDeviceIds(v []string) {
	o.DeviceIds = v
}

func (o TaskInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TaskId) {
		toSerialize["taskId"] = o.TaskId
	}
	if !IsNil(o.ParentId) {
		toSerialize["parentId"] = o.ParentId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.TaskName) {
		toSerialize["taskName"] = o.TaskName
	}
	if !IsNil(o.ItemId) {
		toSerialize["itemId"] = o.ItemId
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.OrgUnitId) {
		toSerialize["orgUnitId"] = o.OrgUnitId
	}
	if !IsNil(o.SoId) {
		toSerialize["soId"] = o.SoId
	}
	if !IsNil(o.CustomerId) {
		toSerialize["customerId"] = o.CustomerId
	}
	if !IsNil(o.SiteId) {
		toSerialize["siteId"] = o.SiteId
	}
	if !IsNil(o.ApplianceId) {
		toSerialize["applianceId"] = o.ApplianceId
	}
	if !IsNil(o.IsReactive) {
		toSerialize["isReactive"] = o.IsReactive
	}
	if !IsNil(o.IsEnabled) {
		toSerialize["isEnabled"] = o.IsEnabled
	}
	if !IsNil(o.DeviceIds) {
		toSerialize["deviceIds"] = o.DeviceIds
	}
	return toSerialize, nil
}

type NullableTaskInfo struct {
	value *TaskInfo
	isSet bool
}

func (v NullableTaskInfo) Get() *TaskInfo {
	return v.value
}

func (v *NullableTaskInfo) Set(val *TaskInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskInfo(val *TaskInfo) *NullableTaskInfo {
	return &NullableTaskInfo{value: val, isSet: true}
}

func (v NullableTaskInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


