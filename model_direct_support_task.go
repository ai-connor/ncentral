/*
N-central API-Service

<h3>API Access</h3> <p>In order to use the API-Service endpoints, ensure the following prerequisites are met:</p> <ol>     <li>User is created in N-central with appropriate permissions and configuration         (roles, access groups, MFA disabled, 2FA disabled).</li>     <li>API access is set up in N-central by having a JWT         (Json Web Token, referred to as \"N-central User-API Token\") generated,         acting as the permanent secret solely used for fetching access and refresh tokens.</li> </ol> <p>To access the API-Service endpoints, the JWT must first be exchanged with access and refresh tokens:</p> <ul>     <li>         <p><b>Using Swagger UI:</b></p>         <ol>             <li>Click on the <b>\"Authorize\"</b> button and enter the JWT into the value field                 under <b>\"N-central User-API Token (JWT)\"</b>, then navigate to                 the <code>/api/auth/authenticate</code> endpoint, click <b>\"Try it out\"</b>                 and then <b>\"Execute\"</b>.                 <br/>The new “Access Token” and “Refresh Token” fields will be available in the “Server Response”                 section below. Note that the expiry is 3600s ( 1h ). Copy the value of the access token.</li>             <li>Click on the <b>lock icon</b> to the right of any endpoint                 (or the <b>\"Authorize\"</b> button at the top), enter the access token in the                 <b>\"API-Access Token\"</b> field and click <b>\"Authorize\"</b>.</li>             <li>To call an API-Service endpoint, navigate to it, click <b>\"Try it out\"</b> button and             then <b>\"Execute\"</b>. If the steps above were successful, the access token is included in requests             automatically.</li>         </ol>     </li>     <li>         <p><b>Using a different HTTP client:</b></p>         <ol>             <li>Call the <code>/api/auth/authenticate</code> endpoint.                 The JWT token must be specified under the <code>Authorization</code> header,                 in the form <code>Bearer &lt;YOUR_JWT&gt;\"</code>.                 <br/>The access and refresh tokens are present in the response.</li>             <li>When calling API-Service endpoints, make sure to specify the <b>access token</b> in             the <code>Authorization</code> header as <code>Bearer &lt;ACCESS_TOKEN&gt;</code>.</li>         </ol>     </li> </ul> <h3>API Pagination & Sorting</h3> <p>Certain API-Service query endpoints support pagination and sorting through the use of query parameters.</p> <p><b>Pagination query parameters:</b></p> <ul>     <li>pageSize: number between 1 and 1000 specifying how many items to return for each page (if available).         If unspecified, the default is 50.</li>     <li>pageNumber: number specifying what page of data to retrieve, starting from 1 as the first page.         If unspecified, the default is 1.</li> </ul> <p>A paginated response contains several related fields, such as pageSize, pageNumber, itemCount, totalItems,     totalPages, _links (first, last, previous and next pages) and _warning (containing any warning messages,     if present).</p> <p><b>Sorting query parameters:</b></p> <ul>     <li>sortBy: the name of the field to sort the results by. If unspecified, no sorting is applied.</li>     <li>sortOrder: the case insensitive sorting direction supporting ASC/ASCENDING/NATURAL and         DESC/DESCENDING/REVERSE. If unspecified, the default is ASC.</li> </ul> <h3>API Rate Limiting</h3> <p>The API-Service endpoints are rate limited to ensure the stability, availability and performance of     the overall system.</p> <p>Upon reaching such a rate limit, the endpoints return HTTP Status 429 - Too Many Requests.</p> <p>The system will accept further requests once existing in-flight requests are completed.</p> 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ncentral

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DirectSupportTask type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DirectSupportTask{}

// DirectSupportTask 'Direct support' scheduled task.
type DirectSupportTask struct {
	// The name of the task. This value must be unique.
	Name string `json:"name"`
	// The ID of the remote execution item. The item ID can be found in the N-central UI (\"Configuration\" -> \"Scheduled Tasks\" -> \"Script/software Repository\") and it must have \"Enable API\" flag \"ON\" (see in the N-central UI).
	ItemId int32 `json:"itemId"`
	// The type of the task. Supported values: AutomationPolicy, Script or MacScript.
	TaskType string `json:"taskType"`
	// The ID of the customer. The customer ID can be obtained using the <a href=\"#operations-Customers-listCustomers\">'GET /api/customers'</a> endpoint.
	CustomerId int32 `json:"customerId"`
	// The ID of the device. The device ID can be obtained using the <a href=\"#operations-Devices-getDeviceById\">'GET /api/devices'</a> endpoint.
	DeviceId int32 `json:"deviceId"`
	Credential ScheduledTaskCredential `json:"credential"`
	// The credential setting for the task. For more information about the fields of <a href=\"#model-ScheduledTaskParameter\">ScheduledTaskParameter</a>,     please review its schema below. 
	Parameters []ScheduledTaskParameter `json:"parameters,omitempty"`
}

type _DirectSupportTask DirectSupportTask

// NewDirectSupportTask instantiates a new DirectSupportTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDirectSupportTask(name string, itemId int32, taskType string, customerId int32, deviceId int32, credential ScheduledTaskCredential) *DirectSupportTask {
	this := DirectSupportTask{}
	this.Name = name
	this.ItemId = itemId
	this.TaskType = taskType
	this.CustomerId = customerId
	this.DeviceId = deviceId
	this.Credential = credential
	return &this
}

// NewDirectSupportTaskWithDefaults instantiates a new DirectSupportTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDirectSupportTaskWithDefaults() *DirectSupportTask {
	this := DirectSupportTask{}
	return &this
}

// GetName returns the Name field value
func (o *DirectSupportTask) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DirectSupportTask) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DirectSupportTask) SetName(v string) {
	o.Name = v
}

// GetItemId returns the ItemId field value
func (o *DirectSupportTask) GetItemId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ItemId
}

// GetItemIdOk returns a tuple with the ItemId field value
// and a boolean to check if the value has been set.
func (o *DirectSupportTask) GetItemIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ItemId, true
}

// SetItemId sets field value
func (o *DirectSupportTask) SetItemId(v int32) {
	o.ItemId = v
}

// GetTaskType returns the TaskType field value
func (o *DirectSupportTask) GetTaskType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TaskType
}

// GetTaskTypeOk returns a tuple with the TaskType field value
// and a boolean to check if the value has been set.
func (o *DirectSupportTask) GetTaskTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaskType, true
}

// SetTaskType sets field value
func (o *DirectSupportTask) SetTaskType(v string) {
	o.TaskType = v
}

// GetCustomerId returns the CustomerId field value
func (o *DirectSupportTask) GetCustomerId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CustomerId
}

// GetCustomerIdOk returns a tuple with the CustomerId field value
// and a boolean to check if the value has been set.
func (o *DirectSupportTask) GetCustomerIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomerId, true
}

// SetCustomerId sets field value
func (o *DirectSupportTask) SetCustomerId(v int32) {
	o.CustomerId = v
}

// GetDeviceId returns the DeviceId field value
func (o *DirectSupportTask) GetDeviceId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value
// and a boolean to check if the value has been set.
func (o *DirectSupportTask) GetDeviceIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceId, true
}

// SetDeviceId sets field value
func (o *DirectSupportTask) SetDeviceId(v int32) {
	o.DeviceId = v
}

// GetCredential returns the Credential field value
func (o *DirectSupportTask) GetCredential() ScheduledTaskCredential {
	if o == nil {
		var ret ScheduledTaskCredential
		return ret
	}

	return o.Credential
}

// GetCredentialOk returns a tuple with the Credential field value
// and a boolean to check if the value has been set.
func (o *DirectSupportTask) GetCredentialOk() (*ScheduledTaskCredential, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Credential, true
}

// SetCredential sets field value
func (o *DirectSupportTask) SetCredential(v ScheduledTaskCredential) {
	o.Credential = v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *DirectSupportTask) GetParameters() []ScheduledTaskParameter {
	if o == nil || IsNil(o.Parameters) {
		var ret []ScheduledTaskParameter
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectSupportTask) GetParametersOk() ([]ScheduledTaskParameter, bool) {
	if o == nil || IsNil(o.Parameters) {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *DirectSupportTask) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given []ScheduledTaskParameter and assigns it to the Parameters field.
func (o *DirectSupportTask) SetParameters(v []ScheduledTaskParameter) {
	o.Parameters = v
}

func (o DirectSupportTask) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DirectSupportTask) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["itemId"] = o.ItemId
	toSerialize["taskType"] = o.TaskType
	toSerialize["customerId"] = o.CustomerId
	toSerialize["deviceId"] = o.DeviceId
	toSerialize["credential"] = o.Credential
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	return toSerialize, nil
}

func (o *DirectSupportTask) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"itemId",
		"taskType",
		"customerId",
		"deviceId",
		"credential",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDirectSupportTask := _DirectSupportTask{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDirectSupportTask)

	if err != nil {
		return err
	}

	*o = DirectSupportTask(varDirectSupportTask)

	return err
}

type NullableDirectSupportTask struct {
	value *DirectSupportTask
	isSet bool
}

func (v NullableDirectSupportTask) Get() *DirectSupportTask {
	return v.value
}

func (v *NullableDirectSupportTask) Set(val *DirectSupportTask) {
	v.value = val
	v.isSet = true
}

func (v NullableDirectSupportTask) IsSet() bool {
	return v.isSet
}

func (v *NullableDirectSupportTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDirectSupportTask(val *DirectSupportTask) *NullableDirectSupportTask {
	return &NullableDirectSupportTask{value: val, isSet: true}
}

func (v NullableDirectSupportTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDirectSupportTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


