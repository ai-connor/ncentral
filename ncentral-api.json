{
  "openapi": "3.0.1",
  "info": {
    "title": "N-central API-Service",
    "description": "\u003Ch3\u003EAPI Access\u003C/h3\u003E\n\u003Cp\u003EIn order to use the API-Service endpoints, ensure the following prerequisites are met:\u003C/p\u003E\n\u003Col\u003E\n    \u003Cli\u003EUser is created in N-central with appropriate permissions and configuration\n        (roles, access groups, MFA disabled, 2FA disabled).\u003C/li\u003E\n    \u003Cli\u003EAPI access is set up in N-central by having a JWT\n        (Json Web Token, referred to as \"N-central User-API Token\") generated,\n        acting as the permanent secret solely used for fetching access and refresh tokens.\u003C/li\u003E\n\u003C/ol\u003E\n\u003Cp\u003ETo access the API-Service endpoints, the JWT must first be exchanged with access and refresh tokens:\u003C/p\u003E\n\u003Cul\u003E\n    \u003Cli\u003E\n        \u003Cp\u003E\u003Cb\u003EUsing Swagger UI:\u003C/b\u003E\u003C/p\u003E\n        \u003Col\u003E\n            \u003Cli\u003EClick on the \u003Cb\u003E\"Authorize\"\u003C/b\u003E button and enter the JWT into the value field\n                under \u003Cb\u003E\"N-central User-API Token (JWT)\"\u003C/b\u003E, then navigate to\n                the \u003Ccode\u003E/api/auth/authenticate\u003C/code\u003E endpoint, click \u003Cb\u003E\"Try it out\"\u003C/b\u003E\n                and then \u003Cb\u003E\"Execute\"\u003C/b\u003E.\n                \u003Cbr/\u003EThe new “Access Token” and “Refresh Token” fields will be available in the “Server Response”\n                section below. Note that the expiry is 3600s ( 1h ). Copy the value of the access token.\u003C/li\u003E\n            \u003Cli\u003EClick on the \u003Cb\u003Elock icon\u003C/b\u003E to the right of any endpoint\n                (or the \u003Cb\u003E\"Authorize\"\u003C/b\u003E button at the top), enter the access token in the\n                \u003Cb\u003E\"API-Access Token\"\u003C/b\u003E field and click \u003Cb\u003E\"Authorize\"\u003C/b\u003E.\u003C/li\u003E\n            \u003Cli\u003ETo call an API-Service endpoint, navigate to it, click \u003Cb\u003E\"Try it out\"\u003C/b\u003E button and\n            then \u003Cb\u003E\"Execute\"\u003C/b\u003E. If the steps above were successful, the access token is included in requests\n            automatically.\u003C/li\u003E\n        \u003C/ol\u003E\n    \u003C/li\u003E\n    \u003Cli\u003E\n        \u003Cp\u003E\u003Cb\u003EUsing a different HTTP client:\u003C/b\u003E\u003C/p\u003E\n        \u003Col\u003E\n            \u003Cli\u003ECall the \u003Ccode\u003E/api/auth/authenticate\u003C/code\u003E endpoint.\n                The JWT token must be specified under the \u003Ccode\u003EAuthorization\u003C/code\u003E header,\n                in the form \u003Ccode\u003EBearer &lt;YOUR_JWT&gt;\"\u003C/code\u003E.\n                \u003Cbr/\u003EThe access and refresh tokens are present in the response.\u003C/li\u003E\n            \u003Cli\u003EWhen calling API-Service endpoints, make sure to specify the \u003Cb\u003Eaccess token\u003C/b\u003E in\n            the \u003Ccode\u003EAuthorization\u003C/code\u003E header as \u003Ccode\u003EBearer &lt;ACCESS_TOKEN&gt;\u003C/code\u003E.\u003C/li\u003E\n        \u003C/ol\u003E\n    \u003C/li\u003E\n\u003C/ul\u003E\n\u003Ch3\u003EAPI Pagination & Sorting\u003C/h3\u003E\n\u003Cp\u003ECertain API-Service query endpoints support pagination and sorting through the use of query parameters.\u003C/p\u003E\n\u003Cp\u003E\u003Cb\u003EPagination query parameters:\u003C/b\u003E\u003C/p\u003E\n\u003Cul\u003E\n    \u003Cli\u003EpageSize: number between 1 and 1000 specifying how many items to return for each page (if available).\n        If unspecified, the default is 50.\u003C/li\u003E\n    \u003Cli\u003EpageNumber: number specifying what page of data to retrieve, starting from 1 as the first page.\n        If unspecified, the default is 1.\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003EA paginated response contains several related fields, such as pageSize, pageNumber, itemCount, totalItems,\n    totalPages, _links (first, last, previous and next pages) and _warning (containing any warning messages,\n    if present).\u003C/p\u003E\n\u003Cp\u003E\u003Cb\u003ESorting query parameters:\u003C/b\u003E\u003C/p\u003E\n\u003Cul\u003E\n    \u003Cli\u003EsortBy: the name of the field to sort the results by. If unspecified, no sorting is applied.\u003C/li\u003E\n    \u003Cli\u003EsortOrder: the case insensitive sorting direction supporting ASC/ASCENDING/NATURAL and\n        DESC/DESCENDING/REVERSE. If unspecified, the default is ASC.\u003C/li\u003E\n\u003C/ul\u003E\n\u003Ch3\u003EAPI Rate Limiting\u003C/h3\u003E\n\u003Cp\u003EThe API-Service endpoints are rate limited to ensure the stability, availability and performance of\n    the overall system.\u003C/p\u003E\n\u003Cp\u003EUpon reaching such a rate limit, the endpoints return HTTP Status 429 - Too Many Requests.\u003C/p\u003E\n\u003Cp\u003EThe system will accept further requests once existing in-flight requests are completed.\u003C/p\u003E\n",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "/",
      "description": "Default Server URL"
    }
  ],
  "security": [
    {
      "N-central User-API Token (JWT)": []
    },
    {
      "API-Access Token": []
    }
  ],
  "tags": [
    {
      "name": "Maintenance Windows",
      "description": "Maintenance Window CRUD operations"
    },
    {
      "name": "PSA",
      "description": "PSA operations"
    },
    {
      "name": "Users",
      "description": "User operations"
    },
    {
      "name": "Access Groups",
      "description": "Access Group operations"
    },
    {
      "name": "Job Statuses",
      "description": "Job Status operations"
    },
    {
      "name": "Devices",
      "description": "Device operations"
    },
    {
      "name": "Custom Properties",
      "description": "Custom-Properties operations. These include both those associated with organization units and devices."
    },
    {
      "name": "Active Issues",
      "description": "Active Issue operations"
    },
    {
      "name": "Device Filters",
      "description": "Device filter operations"
    },
    {
      "name": "User Roles",
      "description": "User role operations."
    },
    {
      "name": "Scheduled Tasks",
      "description": "Scheduled tasks operations"
    },
    {
      "name": "Authentication",
      "description": "Authentication operations used to obtain, refresh and validate API-Access tokens"
    },
    {
      "name": "Registration Tokens",
      "description": "Registration-token operations. These include getting the token for customers and sites."
    },
    {
      "name": "API-Service",
      "description": "Informative API operations"
    },
    {
      "name": "Organization Units",
      "description": "Organization-Unit operations. These include customers, sites and service organizations."
    },
    {
      "name": "Device Tasks",
      "description": "Operations related to retrieving and managing tasks for a device"
    }
  ],
  "paths": {
    "/api/org-units/{orgUnitId}/org-custom-property-defaults": {
      "put": {
        "tags": [
          "Custom Properties"
        ],
        "summary": "PREVIEW: Update the default organization unit custom property.",
        "description": "Update the default organization unit custom property for the given organization unit id and property id.",
        "operationId": "modifyDefaultOrganizationUnitProperty",
        "parameters": [
          {
            "name": "orgUnitId",
            "in": "path",
            "description": "The organization unit id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The request body for default custom property (DEVICE/ORGANIZATION_UNIT).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DefaultCustomPropertyModifyRequest"
              },
              "example": {
                "propagate": false,
                "propertyId": 186156786,
                "propertyName": "Prop Name 1",
                "orgUnitId": 209,
                "propagationType": "SITE_ONLY",
                "value": "http://www.example.com",
                "selectedOrgUnitIds": [209, 210]
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid organization unit id or property id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Custom Property not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "The default organization unit custom property has been updated."
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/org-units/{orgUnitId}/custom-properties/{propertyId}": {
      "get": {
        "tags": [
          "Custom Properties"
        ],
        "summary": "PREVIEW: Get the organization unit custom property.",
        "description": "Get the organization unit custom property for the given organization unit id and property id.",
        "operationId": "getOrganizationUnitProperty",
        "parameters": [
          {
            "name": "orgUnitId",
            "in": "path",
            "description": "The organization unit id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "propertyId",
            "in": "path",
            "description": "The property id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid organization unit id or property id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Custom Property not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "The organization unit custom property.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationCustomProperty"
                },
                "example": {
                  "propertyId": 1624300373,
                  "propertyName": "ORG_01-0620",
                  "propertyType": "TEXT",
                  "value": "ORG_01-0620 VALUE"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      },
      "put": {
        "tags": [
          "Custom Properties"
        ],
        "summary": "PREVIEW: Update the organization unit custom property.",
        "description": "Update the organization unit custom property for the given organization unit id and property id.",
        "operationId": "modifyOrganizationUnitPropertyValue",
        "parameters": [
          {
            "name": "orgUnitId",
            "in": "path",
            "description": "The organization unit id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "propertyId",
            "in": "path",
            "description": "The property id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The request body for custom property.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrgUnitCustomPropertyModification"
              },
              "example": {
                "value": "ORG_01-0620 VALUE"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid organization unit id or property id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Custom Property not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "The organization unit custom property has been updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationPropertyUpdated"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationPropertyUpdated"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/devices/{deviceId}/custom-properties/{propertyId}": {
      "get": {
        "tags": [
          "Custom Properties"
        ],
        "summary": "PREVIEW: Get the device custom property.",
        "description": "Get the device custom property for the given device id and property id.\u003Cbr/\u003E\u003Cb\u003ENOTE:\u003C/b\u003EThis endpoint is currently in a preview stage.",
        "operationId": "getDeviceCustomProperty",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "propertyId",
            "in": "path",
            "description": "The property id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid device id or property id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Custom Property not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful retrieval of the device custom property.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationCustomProperty"
                },
                "example": {
                  "propertyId": 1624300373,
                  "propertyName": "ORG_01-0620",
                  "propertyType": "TEXT",
                  "value": "ORG_01-0620 VALUE"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      },
      "put": {
        "tags": [
          "Custom Properties"
        ],
        "summary": "PREVIEW: Modify Device Custom Property",
        "description": "Modifies one custom property for a device.\u003Cbr/\u003E\u003Cb\u003ENOTE:\u003C/b\u003EThis endpoint is currently in a preview stage.",
        "operationId": "modifyDeviceProperty",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "Device ID to update property for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyId",
            "in": "path",
            "description": "Custom property ID that is associated with the device.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The request body for device custom property.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceCustomPropertyModification"
              },
              "example": {
                "value": "ORG_01-0620 VALUE"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Device or Device Custom Property Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicePropertyUpdated"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/devices/{deviceId}/assets/lifecycle-info": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Retrieve a device asset lifecycle information by Device ID.",
        "description": "Retrieves a device asset lifecycle information with a specific id.",
        "operationId": "getDeviceWarrantyInfo",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "ID of the device for which information needs to be fetched.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Device Id not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful retrieval of device information.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AssetLifecycleDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      },
      "put": {
        "tags": [
          "Devices"
        ],
        "summary": "Modifies the Asset Lifecycle Information by Device Id.",
        "description": "Modifies the Asset Lifecycle Information for a device with a specific id.Please note that updateWarrantyError is read only.",
        "operationId": "putAssetLifecycleInfo",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "ID of the device for which information needs to be modified.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetLifecyclePutRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Device Id not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Successful modification of device lifecycle information."
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Devices"
        ],
        "summary": "Modifies the Asset Lifecycle Information by Device Id.",
        "description": "Modifies the Asset Lifecycle Information for a device with a specific id.Please note that updateWarrantyError is read only.",
        "operationId": "patchAssetLifecycleInfo",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "ID of the device for which information needs to be modified.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetLifecyclePatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Device Id not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Successful modification of device lifecycle information."
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/standard-psa/{psaType}/credential": {
      "post": {
        "tags": [
          "PSA"
        ],
        "summary": "PREVIEW: Validate Standard PSA Credentials.",
        "description": "Validates the credentials for the standard PSA system and returns a response indicating the validity. The only supported standard PSA integration to use with this endpoint is 3 (Tigerpaw)\u003Cbr/\u003E\u003Cb\u003ENOTE:\u003C/b\u003E This endpoint is currently in a preview stage.",
        "operationId": "validatePsaCredentials",
        "parameters": [
          {
            "name": "psaType",
            "in": "path",
            "description": "The type of the PSA system for which credentials are being validated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PsaCredentialRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": {
                    "status": 500,
                    "message": "[ID=abcd] INTERNAL SERVER ERROR: UnexpectedDmsResponseException: Unexpected response from DMS: The DMS response indicates a non-success status code : 500."
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": {
                    "status": 401,
                    "message": "[ID=abcd] UNAUTHORIZED: UnauthorizedException: Missing authorization header bearer."
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing required information[psaType, psaUsername, psaPassword].",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": {
                    "status": 400,
                    "message": "BAD REQUEST: BAD REQUEST: BadRequestException: PSA username must not be empty."
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": {
                    "status": 404,
                    "message": "[ID=abcd]NOT FOUND: ResourceNotFoundException: Psa with type 5.0 was not found!"
                  }
                }
              }
            }
          },
          "200": {
            "description": "Successful validation of the PSA credentials.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardPsaCredentialsValidateGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/service-orgs": {
      "get": {
        "tags": [
          "Organization Units"
        ],
        "summary": "Retrieve a list of all service organizations.",
        "description": "Returns a list of all service organizations.",
        "operationId": "listServiceOrganizations",
        "parameters": [
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to retrieve. Starts at 1. If not provided, defaults to the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to retrieve per page. Set to -1 to retrieve all items without pagination (if enabled).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The select expression.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The name of a field to sort the result by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "The order in which the order will follow -- case insensitive and default to ASC.",
            "schema": {
              "type": "string",
              "default": "ASC",
              "enum": [
                "asc",
                "ascending",
                "natural",
                "desc",
                "descending",
                "reverse"
              ]
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful retrieval of ervice organizations.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseServiceOrganization"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      },
      "post": {
        "tags": [
          "Organization Units"
        ],
        "summary": "PREVIEW: Creates a new service organization (SO).",
        "description": "Creates a new service organization with the specified details.\u003Cbr/\u003E\u003Cbr/\u003E\u003Cb\u003ENOTE:\u003C/b\u003EThis endpoint is currently in a preview stage.",
        "operationId": "createServiceOrganization",
        "requestBody": {
          "description": "The information for the service organization (SO) to be created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceOrganizationCreation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": {
                    "status": 500,
                    "message": "[ID=abcd] INTERNAL SERVER ERROR: UnexpectedDmsResponseException: Unexpected response from DMS: The DMS response indicates a non-success status code."
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": {
                    "status": 401,
                    "message": "[ID=abcd] UNAUTHORIZED: UnauthorizedException: Missing authorization header bearer."
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid resource format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": {
                    "status": 400,
                    "message": "[ID=abcd] BAD REQUEST: SO Create -- Service Organization name is required and cannot be blank: SO Name: '%s'"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": {
                    "status": 404,
                    "message": "[ID=abcd] NOT FOUND: ResourceNotFoundException: Org Unit not found: '555'."
                  }
                }
              }
            }
          },
          "201": {
            "description": "Request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceOrganizationCreated"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/service-orgs/{soId}/customers": {
      "get": {
        "tags": [
          "Organization Units"
        ],
        "summary": "PREVIEW: Retrieve a list of all customers under a service organization.",
        "description": "Returns a list of all customers under a service organization.\u003Cbr/\u003E\u003Cbr/\u003E\u003Cb\u003ENOTE:\u003C/b\u003EThis endpoint is currently in a preview stage.",
        "operationId": "listCustomers",
        "parameters": [
          {
            "name": "soId",
            "in": "path",
            "description": "The ID of the a service organization.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to retrieve. Starts at 1. If not provided, defaults to the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to retrieve per page. Set to -1 to retrieve all items without pagination (if enabled).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The select expression.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The name of a field to sort the result by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "The order in which the order will follow -- case insensitive and default to ASC.",
            "schema": {
              "type": "string",
              "default": "ASC",
              "enum": [
                "asc",
                "ascending",
                "natural",
                "desc",
                "descending",
                "reverse"
              ]
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful retrieval of customers.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseCustomer"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      },
      "post": {
        "tags": [
          "Organization Units"
        ],
        "summary": "PREVIEW: Creates a customer.",
        "description": "Creates a new customer with the specified details.\u003Cbr/\u003E\u003Cbr/\u003E\u003Cb\u003ENOTE:\u003C/b\u003EThis endpoint is currently in a preview stage.",
        "operationId": "createCustomer",
        "parameters": [
          {
            "name": "soId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The information for the customer to be created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerCreation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": {
                    "status": 500,
                    "message": "[ID=abcd] INTERNAL SERVER ERROR: UnexpectedDmsResponseException: Unexpected response from DMS: The DMS response indicates a non-success status code."
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": {
                    "status": 401,
                    "message": "[ID=abcd] UNAUTHORIZED: UnauthorizedException: Missing authorization header bearer."
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid resource format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": {
                    "status": 400,
                    "message": "[ID=abcd] BAD REQUEST: Customer Create -- Name is required and cannot be blank: Name: '%s'"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": {
                    "status": 404,
                    "message": "[ID=abcd] NOT FOUND: ResourceNotFoundException: Org Unit not found: '555'."
                  }
                }
              }
            }
          },
          "201": {
            "description": "Request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCreation"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/server-info/extra/authenticated": {
      "post": {
        "tags": [
          "API-Service"
        ],
        "summary": "PREVIEW: Get extra information about the version of different systems in N-central using credentials.",
        "description": "Get extra information about the version of different systems in N-central using credentials.\u003Cbr/\u003E\u003Cb\u003ENOTE:\u003C/b\u003EThis endpoint is currently in a preview stage.",
        "operationId": "apiExtraAuthenticated",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VersionInfoAuthenticatedRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Forbidden.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input format.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "The versions of the systems when authenticated.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/VersionInfoResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/scheduled-tasks/direct": {
      "post": {
        "tags": [
          "Scheduled Tasks"
        ],
        "summary": "Create a direct-support schedule task.",
        "description": "Create a direct-support schedule task against a specific device.\nAs a direct-support schedule task, the task will be executed immediately against a single device.\nFor more information about the request payload,\nplease review below the schema of the relevant data type:\n    \u003Ca href=\"#model-DirectSupportTask\"\u003EDirectSupportTask\u003C/a\u003E,\n    \u003Ca href=\"#model-ScheduledTaskCredential\"\u003EScheduledTaskCredential\u003C/a\u003E, and\n    \u003Ca href=\"#model-ScheduledTaskParameter\"\u003EScheduledTaskParameter\u003C/a\u003E.\n",
        "operationId": "createRemoteExecutionTaskDirect",
        "requestBody": {
          "description": "The task to be created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DirectSupportTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Successful creation of direct support task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduledTaskCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/org-units/{orgUnitId}/user-roles": {
      "get": {
        "tags": [
          "User Roles"
        ],
        "summary": "PREVIEW: Retrieve a list of user roles for a given organization unit.",
        "description": "Returns a list of user roles for a given organization unit.\u003Cbr/\u003E\u003Cbr/\u003E\u003Cb\u003ENOTE:\u003C/b\u003EThis endpoint is currently in a preview stage.",
        "operationId": "listUserRoles",
        "parameters": [
          {
            "name": "orgUnitId",
            "in": "path",
            "description": "ID of the organization unit for which user roles information needs to be fetched.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to retrieve. Starts at 1. If not provided, defaults to the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to retrieve per page. Set to -1 to retrieve all items without pagination (if enabled).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The select expression.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The name of a field to sort the result by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "The order in which the result will follow -- case insensitive and default to ASC.",
            "schema": {
              "type": "string",
              "default": "ASC",
              "enum": [
                "asc",
                "ascending",
                "natural",
                "desc",
                "descending",
                "reverse"
              ]
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful retrieval of user roles.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/QueryResponseUserRole"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      },
      "post": {
        "tags": [
          "User Roles"
        ],
        "summary": "PREVIEW: Add a new user role for a given organization unit.",
        "description": "Add a new user role for a organization unit and return the role id.\u003Cbr/\u003E\u003Cbr/\u003E\u003Cb\u003ENOTE:\u003C/b\u003EThis endpoint is currently in a preview stage.",
        "operationId": "addUserRole",
        "parameters": [
          {
            "name": "orgUnitId",
            "in": "path",
            "description": "ID of the organization unit for which new role needs to be added.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRoleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Successful creation of user role.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserRoleResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/org-units/{orgUnitId}/device-access-groups": {
      "post": {
        "tags": [
          "Access Groups"
        ],
        "summary": "PREVIEW: Creates a new device type access group.",
        "description": "Creates a new device type access group with the specified details.\u003Cbr/\u003E\u003Cb\u003ENOTE: \u003C/b\u003EThis endpoint is currently in a preview stage.",
        "operationId": "createDeviceAccessGroup",
        "parameters": [
          {
            "name": "orgUnitId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceAccessGroupCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": {
                    "status": 500,
                    "message": "[ID=abcd] INTERNAL SERVER ERROR: UnexpectedDmsResponseException: Unexpected response from DMS: The DMS response indicates a non-success status code."
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": {
                    "status": 401,
                    "message": "[ID=abcd] UNAUTHORIZED: UnauthorizedException: Missing authorization header bearer."
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid resource format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": {
                    "status": 400,
                    "message": "[ID=abcd] BAD REQUEST: InvalidAccessGroupCreateRequestException: Invalid orgUnitId format: 'test'."
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": {
                    "status": 404,
                    "message": "[ID=abcd] NOT FOUND: ResourceNotFoundException: Org Unit not found: '555'."
                  }
                }
              }
            }
          },
          "204": {
            "description": "Request was successful."
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/org-units/{orgUnitId}/access-groups": {
      "get": {
        "tags": [
          "Access Groups"
        ],
        "summary": "PREVIEW: Retrieve Access Groups Information for an Org Unit by ID.",
        "description": "Retrieves access group information for an organization unit with a specific id.\u003Cbr/\u003E\u003Cb\u003ENOTE:\u003C/b\u003EThis endpoint is currently in a preview stage.",
        "operationId": "listAccessGroups",
        "parameters": [
          {
            "name": "orgUnitId",
            "in": "path",
            "description": "ID of the organization unit for which access groups information needs to be fetched.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to retrieve. Starts at 1. If not provided, defaults to the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to retrieve per page. Set to -1 to retrieve all items without pagination (if enabled).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The select expression.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The name of a field to sort the result by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "The order in which the result will follow -- case insensitive and default to ASC.",
            "schema": {
              "type": "string",
              "default": "ASC",
              "enum": [
                "asc",
                "ascending",
                "natural",
                "desc",
                "descending",
                "reverse"
              ]
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": {
                    "status": 500,
                    "message": "[ID=abcd] INTERNAL SERVER ERROR: UnexpectedDmsResponseException: Unexpected response from DMS: The DMS response indicates a non-success status code : 500."
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": {
                    "status": 401,
                    "message": "[ID=abcd] UNAUTHORIZED: UnauthorizedException: Missing authorization header bearer."
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": {
                    "status": 400,
                    "message": "[ID=abcd] BAD REQUEST: InvalidInputFormatException: Invalid orgUnitId format: someString."
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": {
                    "status": 404,
                    "message": "[ID=abcd] NOT FOUND: ResourceNotFoundException: Org Unit not found: '999'."
                  }
                }
              }
            }
          },
          "200": {
            "description": "Successful retrieval of access groups information. If access group id is a negative number, the response will be empty.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      },
      "post": {
        "tags": [
          "Access Groups"
        ],
        "summary": "PREVIEW: Creates a new organization unit type access group.",
        "description": "Creates a new organization unit type access group with the specified details.\u003Cbr/\u003E\u003Cb\u003ENOTE: \u003C/b\u003EThis endpoint is currently in a preview stage.",
        "operationId": "createOrgUnitAccessGroup",
        "parameters": [
          {
            "name": "orgUnitId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrgUnitTypeAccessGroupCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": {
                    "status": 500,
                    "message": "[ID=abcd] INTERNAL SERVER ERROR: UnexpectedDmsResponseException: Unexpected response from DMS: The DMS response indicates a non-success status code."
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": {
                    "status": 401,
                    "message": "[ID=abcd] UNAUTHORIZED: UnauthorizedException: Missing authorization header bearer."
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid resource format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": {
                    "status": 400,
                    "message": "[ID=abcd] BAD REQUEST: InvalidAccessGroupCreateRequestException: Invalid orgUnitId format: 'test'."
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": {
                    "status": 404,
                    "message": "[ID=abcd] NOT FOUND: ResourceNotFoundException: Org Unit not found: '555'."
                  }
                }
              }
            }
          },
          "204": {
            "description": "Request was successful."
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/devices/maintenance-windows": {
      "post": {
        "tags": [
          "Maintenance Windows"
        ],
        "summary": "PREVIEW : Adds set of maintenance windows for a list of given devices.",
        "description": "Adds set of maintenance windows for a given device.\u003Cbr/\u003E\u003Cbr/\u003E\u003Cb\u003ENOTE: \u003C/b\u003EThis endpoint is currently in a preview stage.\u003Cbr/\u003E\u003Cbr/\u003EThe provided list of maintenance windows, will be applied to every device in the list.",
        "operationId": "addMaintenanceWindowsByDeviceIds",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MaintenanceWindowsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Device Id not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Successfully added maintenance window/s.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceWindowResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Maintenance Windows"
        ],
        "summary": "PREVIEW : Deletes device patch maintenance windows by given list of Schedule Ids.",
        "description": "Deletes patch maintenance windows by given list of Schedule Ids.  Currently only supports Patch maintenance windows.  And only windows created at the device level can be deleted.\u003Cbr/\u003E\u003Cbr/\u003E\u003Cb\u003ENOTE: \u003C/b\u003EThis endpoint is currently in a preview stage.\u003Cbr/\u003E\u003Cbr/\u003E",
        "operationId": "deleteMaintenanceWindowsByScheduleIds",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MaintenanceWindowsDeleteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Schedule Id not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successfully deleted window/s. ",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceWindowResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/customers/{customerId}/sites": {
      "get": {
        "tags": [
          "Organization Units"
        ],
        "summary": "PREVIEW: Retrieve a list of sites under a customer.",
        "description": "Returns a list of all sites under a customer.\u003Cbr/\u003E\u003Cbr/\u003E\u003Cbr/\u003E\u003Cb\u003ENOTE:\u003C/b\u003EThis endpoint is currently in a preview stage.",
        "operationId": "listSites_1",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "The ID of the a customer.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to retrieve. Starts at 1. If not provided, defaults to the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to retrieve per page. Set to -1 to retrieve all items without pagination (if enabled).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The select expression.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The name of a field to sort the result by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "The order in which the order will follow -- case insensitive and default to ASC.",
            "schema": {
              "type": "string",
              "default": "ASC",
              "enum": [
                "asc",
                "ascending",
                "natural",
                "desc",
                "descending",
                "reverse"
              ]
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Customer of the ID is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful retrieval of sites.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseSite"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      },
      "post": {
        "tags": [
          "Organization Units"
        ],
        "summary": "PREVIEW: Creates a site.",
        "description": "Creates a new site with the specified details.\u003Cbr/\u003E\u003Cbr/\u003E\u003Cb\u003ENOTE:\u003C/b\u003EThis endpoint is currently in a preview stage.",
        "operationId": "createSite",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The information for the customer to be created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SiteCreation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": {
                    "status": 500,
                    "message": "[ID=abcd] INTERNAL SERVER ERROR: UnexpectedDmsResponseException: Unexpected response from DMS: The DMS response indicates a non-success status code."
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": {
                    "status": 401,
                    "message": "[ID=abcd] UNAUTHORIZED: UnauthorizedException: Missing authorization header bearer."
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid resource format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": {
                    "status": 400,
                    "message": "[ID=abcd] BAD REQUEST: Site Create -- Name is required and cannot be blank: Name: '%s'"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": {
                    "status": 404,
                    "message": "[ID=abcd] NOT FOUND: ResourceNotFoundException: Org Unit not found: '555'."
                  }
                }
              }
            }
          },
          "201": {
            "description": "Request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteCreated"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/custom-psa/tickets/{customPsaTicketId}": {
      "post": {
        "tags": [
          "PSA"
        ],
        "summary": "PREVIEW: Retrieve detailed information for a specific Custom PSA Ticket by ID.",
        "description": "Retrieves detailed information for a specific Custom PSA Ticket. The endpoint is exclusive to CUSTOM PSA Integrations, NOT for ConnectWise, AutoTask, TigerPaw or other managed PSAs.\u003Cbr/\u003E\u003Cb\u003ENOTE:\u003C/b\u003EThis endpoint is currently in a preview stage.",
        "operationId": "getCustomTicketInfo",
        "parameters": [
          {
            "name": "customPsaTicketId",
            "in": "path",
            "description": "The unique identifier of the Custom PSA ticket to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PsaCredentialRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": {
                    "status": 500,
                    "message": "[ID=abcd] INTERNAL SERVER ERROR: UnexpectedDmsResponseException: Unexpected response from DMS: The DMS response indicates a non-success status code : 500."
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": {
                    "status": 401,
                    "message": "[ID=abcd] UNAUTHORIZED: UnauthorizedException: Missing authorization header bearer."
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid psaTicketId format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": {
                    "status": 400,
                    "message": "BAD REQUEST: InvalidInputFormatException: Invalid customPsaTicketId format: string."
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful retrieval of the Custom PSA ticket information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomPsaTicketGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/auth/refresh": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Obtains a new API-Access token using a valid refresh token.",
        "description": "\u003Cp\u003E\nIn order to refresh the API-Access token, you must first authenticate to obtain a valid \"refresh token\"\nand include it in the request body.\n\u003C/p\u003E\n",
        "operationId": "refresh",
        "parameters": [
          {
            "name": "X-ACCESS-EXPIRY-OVERRIDE",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-REFRESH-EXPIRY-OVERRIDE",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Refresh token.",
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Refreshed authentication.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AuthRefreshResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/authenticate": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Obtains access and refresh tokens using an N-central User-API Token (JWT).",
        "description": "\u003Cp\u003E\nThis method essentially uses the HTTP \u003Ca href=\"https://swagger.io/docs/specification/authentication/bearer-authentication/\"\u003Ebearer authentication\u003C/a\u003E.\nTo obtain the \"N-central User-API Token (JWT)\", visit the \u003Ca href=\"/\"\u003EN-central UI\u003C/a\u003E.\nThen navigate to Administration → User Management → Users → Click on user → API Access → GENERATE JSON WEB TOKEN.\n\u003C/p\u003E\n",
        "operationId": "authenticate",
        "parameters": [
          {
            "name": "X-ACCESS-EXPIRY-OVERRIDE",
            "in": "header",
            "description": "Override the access-expiry. Format: (time)(unit). For example: 120s for 120 seconds. The unit can be 's' for second, 'm' for minute and 'h' for hour. NOTE: The specifed time cannot be longer than the system-wide setting (default to 1h).",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-REFRESH-EXPIRY-OVERRIDE",
            "in": "header",
            "description": "Override the refresh-expiry. Format: (time)(unit). For example: 120s for 120 seconds. The unit can be 's' for second, 'm' for minute and 'h' for hour. NOTE: The specifed time cannot be longer than the system-wide setting (default to 25h).",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Authentication is successful.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "N-central User-API Token (JWT)": []
          }
        ]
      }
    },
    "/api": {
      "get": {
        "tags": [
          "API-Service"
        ],
        "summary": "List links to other endpoints.",
        "operationId": "apiRoot",
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinksResponse"
                },
                "example": {
                  "_links": {
                    "root": "/api",
                    "server-info": "/api/server-info",
                    "health": "/api/health",
                    "auth": "/api/auth",
                    "customers": "/api/customers",
                    "devices": "/api/devices",
                    "scheduled-tasks": "/api/scheduled-tasks"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "PREVIEW: List the user related links.",
        "description": "User List.\u003Cbr/\u003E\u003Cb\u003ENOTE:\u003C/b\u003EThis endpoint is currently in a preview stage.",
        "operationId": "userRoot",
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinksResponse"
                },
                "example": {
                  "_links": {
                    "user-list - GET": "/api/org-units/{orgUnitId}/users"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/standard-psa": {
      "get": {
        "tags": [
          "PSA"
        ],
        "summary": "PREVIEW: List the standard psa related links.",
        "description": "\u003Cb\u003ENOTE:\u003C/b\u003EThis endpoint is currently in a preview stage.",
        "operationId": "standardPsaRoot",
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinksResponse"
                },
                "example": {
                  "_links": {
                    "standard-psa-validate-credential": "/api/standard-psa/{psaType}/credential"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/sites": {
      "get": {
        "tags": [
          "Organization Units"
        ],
        "summary": "Retrieve a list of all sites.",
        "description": "Returns a list of all sites.",
        "operationId": "listSites",
        "parameters": [
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to retrieve. Starts at 1. If not provided, defaults to the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to retrieve per page. Set to -1 to retrieve all items without pagination (if enabled).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The select expression.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The name of a field to sort the result by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "The order in which the order will follow -- case insensitive and default to ASC.",
            "schema": {
              "type": "string",
              "default": "ASC",
              "enum": [
                "asc",
                "ascending",
                "natural",
                "desc",
                "descending",
                "reverse"
              ]
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful retrieval of sites.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseSite"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/sites/{siteId}": {
      "get": {
        "tags": [
          "Organization Units"
        ],
        "summary": "PREVIEW: Retrieve a site.",
        "description": "Returns a site.\u003Cbr/\u003E\u003Cbr/\u003E\u003Cb\u003ENOTE:\u003C/b\u003EThis endpoint is currently in a preview stage.",
        "operationId": "getSite",
        "parameters": [
          {
            "name": "siteId",
            "in": "path",
            "description": "The ID of the a site.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Site of the ID is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful retrieval of the site.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Site"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/sites/{siteId}/registration-token": {
      "get": {
        "tags": [
          "Registration Tokens"
        ],
        "summary": "PREVIEW: Retrieve a site registration token.",
        "description": "Returns a site registration token.\u003Cbr/\u003E\u003Cbr/\u003E\u003Cb\u003ENOTE:\u003C/b\u003EThis endpoint is currently in a preview stage.",
        "operationId": "getSiteRegistrationToken",
        "parameters": [
          {
            "name": "siteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Site of the ID is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful retrieval of the site registration token.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationTokenGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/service-orgs/{soId}": {
      "get": {
        "tags": [
          "Organization Units"
        ],
        "summary": "PREVIEW: Retrieve a service organization.",
        "description": "Returns a service organization.\u003Cbr/\u003E\u003Cbr/\u003E\u003Cb\u003ENOTE:\u003C/b\u003EThis endpoint is currently in a preview stage.",
        "operationId": "getServiceOrganization",
        "parameters": [
          {
            "name": "soId",
            "in": "path",
            "description": "The ID of the a service organization.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Service Organization of the ID is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful retrieval of the service organization.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceOrganization"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/server-info": {
      "get": {
        "tags": [
          "API-Service"
        ],
        "summary": "Return version information of the running API-Service.",
        "operationId": "apiRoot_1",
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthValidateResponse"
                },
                "example": {
                  "jvmVersion": "17.0.9",
                  "version": "3.1.0",
                  "ncentral": null
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/server-info/extra": {
      "get": {
        "tags": [
          "API-Service"
        ],
        "summary": "PREVIEW: Get information about the version of different systems in N-central.",
        "description": "Get extra information about the version of different systems in N-central.\u003Cbr/\u003E\u003Cb\u003ENOTE:\u003C/b\u003EThis endpoint is currently in a preview stage.",
        "operationId": "apiExtra",
        "responses": {
          "403": {
            "description": "Forbidden.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input format.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "The versions of the systems.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/VersionInfoResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/scheduled-tasks": {
      "get": {
        "tags": [
          "Scheduled Tasks"
        ],
        "summary": "List the task-related links.",
        "operationId": "taskRoot",
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinksResponse"
                },
                "example": {
                  "_links": {
                    "direct-support-task": "/api/scheduled-tasks/direct"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/scheduled-tasks/{taskId}": {
      "get": {
        "tags": [
          "Scheduled Tasks"
        ],
        "summary": "Retrieves general information for a given task.",
        "description": "Retrieves general information for a given task using the task ID.",
        "operationId": "getTask",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "ID of the task for which information is to be retrieved.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful retrieval of information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduledTaskInfoResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/scheduled-tasks/{taskId}/status": {
      "get": {
        "tags": [
          "Scheduled Tasks"
        ],
        "summary": "Retrieves aggregated status for a given task.",
        "description": "Retrieves the aggregated status associated with a given task using the task ID.",
        "operationId": "getTaskStatus",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "ID of the task for which aggregated status needs to be fetched.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Device Id not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful retrieval of aggregated status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduledTaskAggregatedStatusResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/scheduled-tasks/{taskId}/status/details": {
      "get": {
        "tags": [
          "Scheduled Tasks"
        ],
        "summary": "Retrieves detailed status per device for a given task.",
        "description": "Retrieve a list of detailed statuses for each device associated with the given task using the task ID.",
        "operationId": "listTaskStatusDetails",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "ID of the task for which detailed status needs to be fetched.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Device Id not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful retrieval of status details.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseDetailsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/org-units": {
      "get": {
        "tags": [
          "Organization Units"
        ],
        "summary": "Retrieve a list of all organization units.",
        "description": "Returns a list of all organization units.",
        "operationId": "listOrganizationUnits",
        "parameters": [
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to retrieve. Starts at 1. If not provided, defaults to the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to retrieve per page. Set to -1 to retrieve all items without pagination (if enabled).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The select expression.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The name of a field to sort the result by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "The order in which the order will follow -- case insensitive and default to ASC.",
            "schema": {
              "type": "string",
              "default": "ASC",
              "enum": [
                "asc",
                "ascending",
                "natural",
                "desc",
                "descending",
                "reverse"
              ]
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful retrieval of organization units.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseOrganizationUnit"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/org-units/{orgUnitId}": {
      "get": {
        "tags": [
          "Organization Units"
        ],
        "summary": "PREVIEW: Retrieve an organization unit.",
        "description": "Returns an organization unit.\u003Cbr/\u003E\u003Cbr/\u003E\u003Cb\u003ENOTE:\u003C/b\u003EThis endpoint is currently in a preview stage.",
        "operationId": "getOrganizationUnit",
        "parameters": [
          {
            "name": "orgUnitId",
            "in": "path",
            "description": "The ID of the organization unit.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization Unit of the ID is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful retrieval of the organization unit.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUnit"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/org-units/{orgUnitId}/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "PREVIEW: Retrieve the list of users.",
        "description": "Retrieves the list of users within a specified org unit.\u003Cbr/\u003E\u003Cb\u003ENOTE:\u003C/b\u003EThis endpoint is currently in a preview stage.",
        "operationId": "listUsers",
        "parameters": [
          {
            "name": "orgUnitId",
            "in": "path",
            "description": "The ID of the org unit for which to retrieve the users.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to retrieve. Starts at 1. If not provided, defaults to the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of each page. Use -1 for unlimited size, which retrieves all users.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The select expression.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The name of a field to sort the result by.",
            "schema": {
              "type": "string",
              "enum": [
                "lastName",
                "name",
                "username",
                "description",
                "accountstatus",
                "enabled",
                "isenabled",
                "locked",
                "isLocked",
                "currentssoprovider",
                "ssoproviders",
                "ldap",
                "isldap",
                "accessgroups",
                "roles",
                "twofactorenabled",
                "apionlyuser",
                "soname",
                "customername",
                "sitename"
              ]
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "The sort order, defaulting to ASC if unspecified.",
            "schema": {
              "type": "string",
              "default": "ASC",
              "enum": [
                "asc",
                "ascending",
                "desc",
                "descending"
              ]
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful retrieval of user list.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryResponseUser"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/org-units/{orgUnitId}/user-roles/{userRoleId}": {
      "get": {
        "tags": [
          "User Roles"
        ],
        "summary": "PREVIEW: Retrieve a user role for a given organization unit and user role id.",
        "description": "Returns a user role for a given organization unit and user role id.\u003Cbr/\u003E\u003Cbr/\u003E\u003Cb\u003ENOTE:\u003C/b\u003EThis endpoint is currently in a preview stage.",
        "operationId": "getUserRole",
        "parameters": [
          {
            "name": "orgUnitId",
            "in": "path",
            "description": "ID of the organization unit for which role is retrieved. The organization unit id is used to determine if role is modifiable at this level or not.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userRoleId",
            "in": "path",
            "description": "ID of the user role id for which user roles information needs to be fetched.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful retrieval of user role.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserRoleDetailsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/org-units/{orgUnitId}/registration-token": {
      "get": {
        "tags": [
          "Registration Tokens"
        ],
        "summary": "PREVIEW: Retrieve a organization unit registration token.",
        "description": "Returns a organization unit registration token.\u003Cbr/\u003E\u003Cbr/\u003E\u003Cb\u003ENOTE:\u003C/b\u003EThis endpoint is currently in a preview stage.",
        "operationId": "getOrganizationUnitRegistrationToken",
        "parameters": [
          {
            "name": "orgUnitId",
            "in": "path",
            "description": "The ID of the a organization unit.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Getting registration token using this API is not allowed (only CUSTOMER and SITE are allowed).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization of the ID is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful retrieval of the customer registration token.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationTokenGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/org-units/{orgUnitId}/org-custom-property-defaults/{propertyId}": {
      "get": {
        "tags": [
          "Custom Properties"
        ],
        "summary": "PREVIEW: Get the organization unit custom property.",
        "description": "Get the organization unit  custom property for the given organization unit id and property id.",
        "operationId": "getCustomProperty",
        "parameters": [
          {
            "name": "orgUnitId",
            "in": "path",
            "description": "The organization unit id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "propertyId",
            "in": "path",
            "description": "The property id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid organization unit id or property id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Custom Property not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "The organization unit  custom property.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultCustomProperty"
                },
                "example": {
                  "propertyId": 1624300373,
                  "propertyName": "ORG_01-0620",
                  "orgUnitId": 11090,
                  "propertyType": "TEXT",
                  "value": "ORG_01-0620 VALUE",
                  "selectedOrgUnitIds": [11089, 11090]
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/org-units/{orgUnitId}/job-statuses": {
      "get": {
        "tags": [
          "Job Statuses"
        ],
        "summary": "PREVIEW: Fetch job statuses",
        "description": "Fetch a list of job statuses for the given organization unit.\u003Cbr/\u003E\u003Cbr/\u003E\u003Cb\u003ENOTE:\u003C/b\u003EThis endpoint is currently in a preview stage.",
        "operationId": "listJobStatuses",
        "parameters": [
          {
            "name": "orgUnitId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input format.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization unit not found.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "The list of job statuses.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/org-units/{orgUnitId}/devices": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "PREVIEW : Retrieve the list of devices by org unit id.",
        "description": "Retrieves the list of devices from N-central for the logged in user.\nNOTE: This endpoint is in the preview stage.",
        "operationId": "listDevicesByOrgUnitId",
        "parameters": [
          {
            "name": "orgUnitId",
            "in": "path",
            "description": "ID of the organization unit for which information needs to be fetched.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filterId",
            "in": "query",
            "description": "The ID of the filter to apply for this device list. Leave empty or unset to retrieve the unfiltered list.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to retrieve. Starts at 1. If not provided, defaults to the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Set to -1 to retrieve the maximum-size items (deployment settings)Use 50 if the maximum-size is set to -1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The select expression.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The name of a field to sort the result by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "The order in which the order will follow -- case insensitive and default to ASC.",
            "schema": {
              "type": "string",
              "default": "ASC",
              "enum": [
                "asc",
                "ascending",
                "natural",
                "desc",
                "descending",
                "reverse"
              ]
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful retrieval of device list.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/QueryResponseDevice"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/org-units/{orgUnitId}/custom-properties": {
      "get": {
        "tags": [
          "Custom Properties"
        ],
        "summary": "PREVIEW: Get the list of organization custom properties.",
        "description": "Get the list of organization unit custom properties for the given organization unit id.",
        "operationId": "listCustomerProperties",
        "parameters": [
          {
            "name": "orgUnitId",
            "in": "path",
            "description": "The organization unit id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to retrieve. Starts at 1. If not provided, defaults to the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to retrieve per page. Set to -1 to retrieve all items without pagination (if enabled).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The select expression.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The name of a field to sort the result by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "The order in which the order will follow -- case insensitive and default to ASC.",
            "schema": {
              "type": "string",
              "default": "ASC",
              "enum": [
                "asc",
                "ascending",
                "natural",
                "desc",
                "descending",
                "reverse"
              ]
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid organization unit id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "The list of organization unit custom properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseOrganizationCustomProperty"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/org-units/{orgUnitId}/custom-properties/device-custom-property-defaults/{propertyId}": {
      "get": {
        "tags": [
          "Custom Properties"
        ],
        "summary": "PREVIEW: Retrieve Device Default Custom Property information by organization unit id and property id",
        "description": "Retrieves default custom properties information\u003Cbr/\u003E\u003Cb\u003ENOTE:\u003C/b\u003EThis endpoint is currently in a preview stage.",
        "operationId": "getDeviceDefaultCustomProperty",
        "parameters": [
          {
            "name": "orgUnitId",
            "in": "path",
            "description": "ID of the organization unit for which information needs to be fetched",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyId",
            "in": "path",
            "description": "ID of the property for which information needs to be fetched",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization Unit or Property Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful retrieval of property information",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceCustomPropertyResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/org-units/{orgUnitId}/children": {
      "get": {
        "tags": [
          "Organization Units"
        ],
        "summary": "PREVIEW: Retrieve a list of all organization units children.",
        "description": "Returns a list of all organization units under the specific organization unit.\u003Cbr/\u003E\u003Cbr/\u003E\u003Cb\u003ENOTE:\u003C/b\u003EThis endpoint is currently in a preview stage.",
        "operationId": "listOrganizationUnitChildren",
        "parameters": [
          {
            "name": "orgUnitId",
            "in": "path",
            "description": "PREVIEW: The ID of the parent organization unit.If specified, only the children of the specified organization unit are retrieved.Leave empty or unset to retrieve the unfiltered list.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to retrieve. Starts at 1. If not provided, defaults to the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to retrieve per page. Set to -1 to retrieve all items without pagination (if enabled).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The select expression.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The name of a field to sort the result by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "The order in which the order will follow -- case insensitive and default to ASC.",
            "schema": {
              "type": "string",
              "default": "ASC",
              "enum": [
                "asc",
                "ascending",
                "natural",
                "desc",
                "descending",
                "reverse"
              ]
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful retrieval of organization units.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseOrganizationUnit"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/org-units/{orgUnitId}/active-issues": {
      "get": {
        "tags": [
          "Active Issues"
        ],
        "summary": "PREVIEW: Fetch active issues",
        "description": "Fetch a list of active issues for the given organization unit.\u003Cbr/\u003E\u003Cb\u003ENOTE:\u003C/b\u003EOnly organization units that are customers or sites are currently supported.\u003Cbr/\u003E\u003Cbr/\u003E\u003Cb\u003ENOTE:\u003C/b\u003EThis endpoint is currently in a preview stage.",
        "operationId": "listActiveIssues",
        "parameters": [
          {
            "name": "orgUnitId",
            "in": "path",
            "description": "ID of the organization unit for which active issues needs to be fetched.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to retrieve. Starts at 1. If not provided, defaults to the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to retrieve per page. Must be positive number.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The select expression.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The name of a field to sort the result by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "The order in which the result will follow -- case insensitive and default to ASC.",
            "schema": {
              "type": "string",
              "default": "ASC",
              "enum": [
                "asc",
                "ascending",
                "natural",
                "desc",
                "descending",
                "reverse"
              ]
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input format.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "The list of active issues.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/QueryResponseActiveIssue"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/health": {
      "get": {
        "tags": [
          "API-Service"
        ],
        "summary": "Return the start and current time of the server. This indicates that the server is running.",
        "operationId": "health",
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Health"
                }
              }
            }
          }
        }
      }
    },
    "/api/devices": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Retrieve the list of devices.",
        "description": "Retrieves the list of devices from N-central for the logged in user.",
        "operationId": "listDevices",
        "parameters": [
          {
            "name": "filterId",
            "in": "query",
            "description": "The ID of the filter to apply for this device list. Leave empty or unset to retrieve the unfiltered list.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to retrieve. Starts at 1. If not provided, defaults to the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Set to -1 to retrieve the maximum-size items (deployment settings)Use 50 if the maximum-size is set to -1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The select expression.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The name of a field to sort the result by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "The order in which the order will follow -- case insensitive and default to ASC.",
            "schema": {
              "type": "string",
              "default": "ASC",
              "enum": [
                "asc",
                "ascending",
                "natural",
                "desc",
                "descending",
                "reverse"
              ]
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful retrieval of device list.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/QueryResponseDevice"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/devices/{deviceId}": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Retrieve a device by ID.",
        "description": "Retrieves a device with a specific id.",
        "operationId": "getDeviceById",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "ID of the device for which information needs to be fetched.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Device Id not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful retrieval of device information.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/devices/{deviceId}/service-monitor-status": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "PREVIEW : Retrieves the status of the service monitoring tasks for a given device.",
        "description": "Retrieves the status of the service monitoring tasks for a given device.\u003Cbr/\u003E\u003Cbr/\u003E\u003Cb\u003ENOTE: \u003C/b\u003EThis endpoint is currently in a preview stage.",
        "operationId": "getDeviceStatus",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "ID of the device for which information needs to be fetched.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Device Id not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful retrieval of monitoring task status information.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseDeviceServiceMonitoringStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/devices/{deviceId}/scheduled-tasks": {
      "get": {
        "tags": [
          "Device Tasks"
        ],
        "summary": "Retrieve tasks for a specific device.",
        "description": "Retrieves a list of tasks associated with a specified device using the device ID.",
        "operationId": "listTasksForDevice",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "ID of the device for which the tasks need to be fetched.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Device Id not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful retrieval of tasks.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseTaskStatusResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/devices/{deviceId}/maintenance-windows": {
      "get": {
        "tags": [
          "Maintenance Windows"
        ],
        "summary": "PREVIEW : Retrieves all maintenance windows for a device.",
        "description": "Retrieves all maintenance windows for a given device.\u003Cbr/\u003E\u003Cbr/\u003E\u003Cb\u003ENOTE: \u003C/b\u003EThis endpoint is currently in a preview stage.",
        "operationId": "getMaintenanceWindowsByDeviceId",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "ID of the device for which information needs to be fetched.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Device Id not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful retrieval of maintenance window information.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseMaintenanceWindowGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/devices/{deviceId}/custom-properties": {
      "get": {
        "tags": [
          "Custom Properties"
        ],
        "summary": "PREVIEW: Retrieve Device Custom Properties by device id",
        "description": "Retrieves custom properties list for a device.\u003Cbr/\u003E\u003Cb\u003ENOTE:\u003C/b\u003EThis endpoint is currently in a preview stage.",
        "operationId": "listDeviceCustomProperties",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "ID of the device for which information needs to be fetched",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Device Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful retrieval of list of device's custom properties",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseDeviceCustomProperty"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/devices/{deviceId}/assets": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Retrieve Asset Information for a device by ID.",
        "description": "Retrieves complete asset information for a device with a specific id.\u003Cbr/\u003E\u003Cbr/\u003E\u003Cb\u003EAlso See:\u003Cb\u003E \u003Ca href=\"#model-DeviceAssetInfoResponse\"\u003EDeviceAssetInfoResponse\u003C/a\u003E ",
        "operationId": "getAssetInfo",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "ID of the device for which asset information needs to be fetched.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Device Id not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful retrieval of device asset information.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceAssetInfoResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/device-filters": {
      "get": {
        "tags": [
          "Device Filters"
        ],
        "summary": "PREVIEW: Retrieve the list of filters.",
        "description": "Retrieves the list of filters from N-central for the logged in user.\u003Cbr/\u003E\u003Cbr/\u003E\u003Cb\u003ENOTE:\u003C/b\u003EThis endpoint is currently in a preview stage.",
        "operationId": "listFilters",
        "parameters": [
          {
            "name": "viewScope",
            "in": "query",
            "description": "Scope of the filters. Defaults to 'ALL'.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ALL",
                "OWN_AND_USED"
              ]
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to retrieve. Starts at 1. If not provided, defaults to the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to retrieve per page. Set to -1 to retrieve all items without pagination (if enabled).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The select expression.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The name of a field to sort the result by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "The order in which the order will follow -- case insensitive and default to ASC.",
            "schema": {
              "type": "string",
              "default": "ASC",
              "enum": [
                "asc",
                "ascending",
                "natural",
                "desc",
                "descending",
                "reverse"
              ]
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful retrieval of filter list.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseFilter"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/customers": {
      "get": {
        "tags": [
          "Organization Units"
        ],
        "summary": "Retrieve a list of all customers.",
        "description": "Returns a list of all customers.",
        "operationId": "listCustomers_1",
        "parameters": [
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to retrieve. Starts at 1. If not provided, defaults to the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to retrieve per page. Set to -1 to retrieve all items without pagination (if enabled).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The select expression.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The name of a field to sort the result by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "The order in which the order will follow -- case insensitive and default to ASC.",
            "schema": {
              "type": "string",
              "default": "ASC",
              "enum": [
                "asc",
                "ascending",
                "natural",
                "desc",
                "descending",
                "reverse"
              ]
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful retrieval of customers.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseCustomer"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/customers/{customerId}": {
      "get": {
        "tags": [
          "Organization Units"
        ],
        "summary": "PREVIEW: Retrieve a customer.",
        "description": "Returns a customer.\u003Cbr/\u003E\u003Cbr/\u003E\u003Cb\u003ENOTE:\u003C/b\u003EThis endpoint is currently in a preview stage.",
        "operationId": "getCustomer",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "The ID of the a customer.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Customer of the ID is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful retrieval of the customer.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/customers/{customerId}/registration-token": {
      "get": {
        "tags": [
          "Registration Tokens"
        ],
        "summary": "PREVIEW: Retrieve a customer registration token.",
        "description": "Returns a customer registration token.\u003Cbr/\u003E\u003Cbr/\u003E\u003Cb\u003ENOTE:\u003C/b\u003EThis endpoint is currently in a preview stage.",
        "operationId": "getCustomerRegistrationToken",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "The ID of the a customer.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Customer of the ID is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful retrieval of the customer registration token.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationTokenGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/custom-psa": {
      "get": {
        "tags": [
          "PSA"
        ],
        "summary": "PREVIEW: List the custom psa related links.",
        "description": "\u003Cb\u003ENOTE:\u003C/b\u003EThis endpoint is currently in a preview stage.",
        "operationId": "customPsaRoot",
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinksResponse"
                },
                "example": {
                  "_links": {
                    "custom-psa-ticket-info": "/api/custom-psa/tickets/{customPsaTicketId}",
                    "custom-psa-tickets": "/api/custom-psa/tickets"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/custom-psa/tickets": {
      "get": {
        "tags": [
          "PSA"
        ],
        "summary": "PREVIEW: List the custom psa tickets related links.",
        "description": "\u003Cb\u003ENOTE:\u003C/b\u003EThis endpoint is currently in a preview stage.",
        "operationId": "customPsaTicketsRoot",
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinksResponse"
                },
                "example": {
                  "_links": {
                    "custom-psa-ticket-info": "/api/custom-psa/tickets/{customPsaTicketId}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "List the authentication-related links.",
        "operationId": "authRoot",
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinksResponse"
                },
                "example": {
                  "authenticate": "/api/auth/authenticate",
                  "refresh": "/api/auth/refresh",
                  "validate": "/api/auth/validate"
                }
              }
            }
          }
        },
        "security": [
          {
            "N-central User-API Token (JWT)": []
          }
        ]
      }
    },
    "/api/auth/validate": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Check the validity of the API-Access token.",
        "description": "\u003Cp\u003E\nIn order to validate the API-Access token, you must first authenticate to obtain the API-Access token.\n\u003C/p\u003E\n",
        "operationId": "validate",
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Authentication is successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthValidateResponse"
                },
                "example": {
                  "message": "The token is valid."
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/appliance-tasks/{taskId}": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "PREVIEW : Retrieves the appliance-task information.",
        "description": "Retrieves the appliance-task information for a given taskId.\u003Cbr/\u003E\u003Cbr/\u003E\u003Cb\u003ENOTE: \u003C/b\u003EThis endpoint is currently in a preview stage.",
        "operationId": "getApplianceTaskInformationDetails",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "ID of the appliance-task for which information needs to be fetched.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Device Id not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful retrieval of appliance-task information.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApplianceTaskInformation"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    },
    "/api/access-groups": {
      "get": {
        "tags": [
          "Access Groups"
        ],
        "summary": "PREVIEW: List the access group related links.",
        "operationId": "accessGroupRoot",
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinksResponse"
                },
                "example": {
                  "_links": {
                    "access-group-list - GET": "/api/org-units/{orgUnitId}/access-groups",
                    "access-group-info - GET": "/api/access-groups/{accessGroupId}",
                    "org-unit-access-group-create - POST": "/api/org-units/{orgUnitId}/access-groups",
                    "device-access-group-create - POST": "/api/org-units/{orgUnitId}/device-access-groups"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/access-groups/{accessGroupId}": {
      "get": {
        "tags": [
          "Access Groups"
        ],
        "summary": "PREVIEW: Retrieve detailed information for a specific Access Group by ID.",
        "description": "Retrieves detailed information for a specific Access Group, including its name, type, and associated devices or users.\u003Cbr/\u003E\u003Cb\u003ENOTE:\u003C/b\u003EThis endpoint is currently in a preview stage.",
        "operationId": "getAccessGroup",
        "parameters": [
          {
            "name": "accessGroupId",
            "in": "path",
            "description": "The unique identifier of the access group for which information is being requested.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": {
                    "status": 500,
                    "message": "[ID=abcd] INTERNAL SERVER ERROR: UnexpectedDmsResponseException: Unexpected response from DMS: The DMS response indicates a non-success status code : 500."
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": {
                    "status": 401,
                    "message": "[ID=abcd] UNAUTHORIZED: UnauthorizedException: Missing authorization header bearer."
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid Access Group Id format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": {
                    "status": 400,
                    "message": "[ID=abcd] BAD REQUEST: InvalidInputFormatException: Invalid orgUnitId format: stringValue."
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": {
                    "status": 404,
                    "message": "[ID=abcd] NOT FOUND: ResourceNotFoundException: Access group was not found. Id: '999'."
                  }
                }
              }
            }
          },
          "200": {
            "description": "Successful retrieval of the access group information. If the access group is not found (or a negative number is provided), the response will be empty.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessGroupGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Access Token": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        },
        "description": "Error response",
        "example": {
          "status": 400,
          "message": "[ID=2b85998f-26a3-467a] BAD REQUEST: InvalidInputFormatException: Invalid customerId format: 'null'."
        }
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "DefaultCustomPropertyModifyRequest": {
        "type": "object",
        "properties": {
          "propagate": {
            "type": "boolean",
            "description": "A boolean flag to specify whether to propagate changes to children Organization Units."
          },
          "propertyId": {
            "type": "integer",
            "description": "The property id.",
            "format": "int32"
          },
          "propertyName": {
            "type": "string",
            "description": "The property name."
          },
          "propagationType": {
            "type": "string",
            "description": "The way how the property value changes are propagated down the organization unit hierarchy.",
            "enum": [
              "NO_PROPAGATION",
              "SERVICE_ORGANIZATION_ONLY",
              "SERVICE_ORGANIZATION_AND_CUSTOMER_AND_SITE",
              "SERVICE_ORGANIZATION_AND_CUSTOMER",
              "SERVICE_ORGANIZATION_AND_SITE",
              "CUSTOMER_AND_SITE",
              "CUSTOMER_ONLY",
              "SITE_ONLY",
              "NO_PROPAGATION",
              "SERVICE_ORGANIZATION_ONLY",
              "SERVICE_AND_ORGANIZATION",
              "SERVICE_AND_ORGANIZATION_AND_DEVICE",
              "SERVICE_AND_DEVICE",
              "ORGANIZATION_AND_DEVICE",
              "ORGANIZATION_ONLY",
              "DEVICE_ONLY"
            ]
          },
          "defaultValue": {
            "type": "string",
            "description": "The default value of the property."
          },
          "selectedOrgUnitIds": {
            "type": "array",
            "description": "The entire list of organization unit IDs to which the custom property is applicable. The list includes the 'Home' organization unit and all its child organization units.",
            "items": {
              "type": "integer",
              "description": "The entire list of organization unit IDs to which the custom property is applicable. The list includes the 'Home' organization unit and all its child organization units.",
              "format": "int32"
            }
          },
          "enumeratedValueList": {
            "type": "array",
            "description": "The list of allowed values for the property, if the property type is ENUMERATED.",
            "items": {
              "type": "string",
              "description": "The list of allowed values for the property, if the property type is ENUMERATED."
            }
          }
        },
        "description": "The request body for default custom property (DEVICE/ORGANIZATION_UNIT).",
        "example": {
          "propagate": false,
          "propertyId": 186156786,
          "propertyName": "Prop Name 1",
          "orgUnitId": 209,
          "propagationType": "SITE_ONLY",
          "defaultValue": "http://www.example.com",
          "selectedOrgUnitIds": [209, 210]
        }
      },
      "OrgUnitCustomPropertyModification": {
        "type": "object",
        "properties": {
          "propertyId": {
            "type": "string",
            "description": "The property id.",
            "readOnly": true
          },
          "propertyName": {
            "type": "string",
            "description": "The property name.",
            "readOnly": true
          },
          "propertyType": {
            "type": "string",
            "description": "The property type.",
            "readOnly": true,
            "enum": [
              "HTML_LINK",
              "TEXT",
              "DATE",
              "ENUMERATED",
              "PASSWORD"
            ]
          },
          "value": {
            "type": "string",
            "description": "The property value."
          },
          "enumeratedValueList": {
            "type": "array",
            "description": "The possible value of the property.",
            "readOnly": true,
            "items": {
              "type": "string",
              "description": "The possible value of the property.",
              "readOnly": true
            }
          }
        },
        "description": "The custom property (DEVICE/ORGANIZATION_UNIT).",
        "example": {
          "propertyId": 1624300373,
          "propertyName": "ORG_01-0620",
          "propertyType": "TEXT",
          "value": "ORG_01-0620 VALUE"
        }
      },
      "OrganizationPropertyUpdated": {
        "type": "object",
        "properties": {
          "_warnings": {
            "type": "array",
            "description": "The list of warnings.",
            "items": {
              "type": "string",
              "description": "The list of warnings."
            }
          }
        },
        "description": "The organization property update result.",
        "example": {
          "_warnings": [
            "Property Type is ignored during update."
          ]
        }
      },
      "DeviceCustomPropertyModification": {
        "type": "object",
        "properties": {
          "propertyId": {
            "type": "string",
            "description": "The property id.",
            "readOnly": true
          },
          "propertyName": {
            "type": "string",
            "description": "The property name.",
            "readOnly": true
          },
          "propertyType": {
            "type": "string",
            "description": "The property type.",
            "readOnly": true,
            "enum": [
              "HTML_LINK",
              "TEXT",
              "DATE",
              "ENUMERATED",
              "PASSWORD"
            ]
          },
          "value": {
            "type": "string",
            "description": "The property value."
          },
          "enumeratedValueList": {
            "type": "array",
            "description": "The possible value of the property.",
            "readOnly": true,
            "items": {
              "type": "string",
              "description": "The possible value of the property.",
              "readOnly": true
            }
          }
        },
        "description": "The custom property (DEVICE/ORGANIZATION_UNIT).",
        "example": {
          "propertyId": 1624300373,
          "propertyName": "ORG_01-0620",
          "propertyType": "TEXT",
          "value": "ORG_01-0620 VALUE"
        }
      },
      "DevicePropertyUpdated": {
        "type": "object",
        "properties": {
          "_warnings": {
            "type": "array",
            "description": "The list of warnings.",
            "items": {
              "type": "string",
              "description": "The list of warnings."
            }
          }
        },
        "description": "The device property update result.",
        "example": {
          "_warnings": [
            "Property Type is ignored during update."
          ]
        }
      },
      "AssetLifecyclePutRequest": {
        "required": [
          "assetTag",
          "cost",
          "description",
          "expectedReplacementDate",
          "leaseExpiryDate",
          "location",
          "purchaseDate",
          "warrantyExpiryDate"
        ],
        "type": "object",
        "properties": {
          "warrantyExpiryDate": {
            "pattern": "(\\d{4}-\\d{2}-\\d{2}( \\d{2}:\\d{2}:\\d{2}(\\.\\d{1,9})?)?)?",
            "type": "string"
          },
          "leaseExpiryDate": {
            "pattern": "(\\d{4}-\\d{2}-\\d{2}( \\d{2}:\\d{2}:\\d{2}(\\.\\d{1,9})?)?)?",
            "type": "string"
          },
          "expectedReplacementDate": {
            "pattern": "(\\d{4}-\\d{2}-\\d{2}( \\d{2}:\\d{2}:\\d{2}(\\.\\d{1,9})?)?)?",
            "type": "string"
          },
          "purchaseDate": {
            "pattern": "(\\d{4}-\\d{2}-\\d{2}( \\d{2}:\\d{2}:\\d{2}(\\.\\d{1,9})?)?)?",
            "type": "string"
          },
          "cost": {
            "type": "number"
          },
          "location": {
            "type": "string"
          },
          "assetTag": {
            "type": "string"
          },
          "description": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "updateWarrantyError": {
            "type": "string",
            "description": "This field is Read Only",
            "readOnly": true
          },
          "allNull": {
            "type": "boolean"
          }
        },
        "description": "Asset Lifecycle details",
        "example": {
          "warrantyExpiryDate": "2022-12-31",
          "leaseExpiryDate": "2022-12-31",
          "expectedReplacementDate": "2022-12-31",
          "purchaseDate": "2022-12-31",
          "cost": 0,
          "location": "location",
          "assetTag": "assetTag",
          "description": "description",
          "updateWarrantyError": "updateWarrantyError"
        }
      },
      "Data": {
        "type": "object",
        "properties": {
          "isPsaCredentialsValid": {
            "type": "boolean",
            "description": "Contains the results of the PSA credentials validation."
          }
        }
      },
      "StandardPsaCredentialsValidateGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Data"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Links to related endpoints."
            },
            "description": "Links to related endpoints."
          }
        },
        "description": "Represents the response for validating PSA credentials.\nThe validation result is encapsulated under the \"_extra\" field.\n",
        "example": {
          "data": {
            "isPsaCredentialsValid": true
          },
          "_links": {

          }
        }
      },
      "PsaCredentialRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "description": "Representation of PSA credentials.",
        "example": {
          "username": "username@domain.com",
          "password": "myPassword!"
        }
      },
      "ServiceOrganizationCreation": {
        "required": [
          "contactFirstName",
          "contactLastName",
          "soName"
        ],
        "type": "object",
        "properties": {
          "contactFirstName": {
            "type": "string",
            "description": "First name of the contact for the organization unit."
          },
          "contactLastName": {
            "type": "string",
            "description": "Last name of the contact for the organization unit."
          },
          "externalId": {
            "type": "string",
            "description": "The external ID of the organization unit."
          },
          "phone": {
            "type": "string",
            "description": "Telephone of the contact for the organization unit."
          },
          "contactTitle": {
            "type": "string",
            "description": "Title of the contact for the organization unit."
          },
          "contactEmail": {
            "type": "string",
            "description": "Contact email for the organization unit."
          },
          "contactPhone": {
            "type": "string",
            "description": "Telephone of the contact for the organization unit."
          },
          "contactPhoneExt": {
            "type": "string",
            "description": "Telephone extension of the contact for the organization unit."
          },
          "contactDepartment": {
            "type": "string",
            "description": "Department of the contact for the organization unit."
          },
          "street1": {
            "type": "string",
            "description": "First line of street address for the organization unit."
          },
          "street2": {
            "type": "string",
            "description": "Second line of street address for the organization unit."
          },
          "city": {
            "type": "string",
            "description": "City where the organization unit is located."
          },
          "stateProv": {
            "type": "string",
            "description": "State or province where the organization unit is located."
          },
          "country": {
            "type": "string",
            "description": "Country where the organization unit is located. Must be two characters country code, see http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2."
          },
          "postalCode": {
            "type": "string",
            "description": "Postal code of the organization unit location."
          },
          "soName": {
            "type": "string",
            "description": "Name of the service organization."
          }
        },
        "description": "Data object for organization unit.",
        "example": {
          "soName": "New SO name",
          "contactFirstName": "first name",
          "contactLastName": "last name",
          "externalId": "extId",
          "phone": "phone",
          "contactTitle": "contact title",
          "contactEmail": "contact@email.com",
          "contactPhone": "(123)456-7890",
          "contactPhoneExt": null,
          "contactDepartment": "Support",
          "street1": "One Street",
          "street2": "",
          "city": "Ottawa",
          "stateProv": "Ontario",
          "country": "CA",
          "postalCode": "A1A 1A1"
        }
      },
      "ServiceOrganizationCreated": {
        "type": "object",
        "properties": {
          "soId": {
            "type": "integer",
            "description": "Id of the created service organization.",
            "format": "int32"
          }
        },
        "description": "Represents the response of creating a new service organization and contains its ID.\n",
        "example": {
          "data": {
            "soId": 123
          }
        }
      },
      "CustomerCreation": {
        "required": [
          "contactFirstName",
          "contactLastName",
          "customerName"
        ],
        "type": "object",
        "properties": {
          "contactFirstName": {
            "type": "string",
            "description": "First name of the contact for the organization unit."
          },
          "contactLastName": {
            "type": "string",
            "description": "Last name of the contact for the organization unit."
          },
          "externalId": {
            "type": "string",
            "description": "The external ID of the organization unit."
          },
          "phone": {
            "type": "string",
            "description": "Telephone of the contact for the organization unit."
          },
          "contactTitle": {
            "type": "string",
            "description": "Title of the contact for the organization unit."
          },
          "contactEmail": {
            "type": "string",
            "description": "Contact email for the organization unit."
          },
          "contactPhone": {
            "type": "string",
            "description": "Telephone of the contact for the organization unit."
          },
          "contactPhoneExt": {
            "type": "string",
            "description": "Telephone extension of the contact for the organization unit."
          },
          "contactDepartment": {
            "type": "string",
            "description": "Department of the contact for the organization unit."
          },
          "street1": {
            "type": "string",
            "description": "First line of street address for the organization unit."
          },
          "street2": {
            "type": "string",
            "description": "Second line of street address for the organization unit."
          },
          "city": {
            "type": "string",
            "description": "City where the organization unit is located."
          },
          "stateProv": {
            "type": "string",
            "description": "State or province where the organization unit is located."
          },
          "country": {
            "type": "string",
            "description": "Country where the organization unit is located. Must be two characters country code, see http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2."
          },
          "postalCode": {
            "type": "string",
            "description": "Postal code of the organization unit location."
          },
          "customerName": {
            "type": "string",
            "description": "Name of the customer."
          },
          "licenseType": {
            "type": "string",
            "description": "License type of the customer.",
            "default": "Professional"
          }
        },
        "description": "Data object for customer.",
        "example": {
          "customerName": "New customer name",
          "contactFirstName": "first name",
          "contactLastName": "last name",
          "licenseType": "Professional",
          "externalId": "extId",
          "phone": "phone",
          "contactTitle": "contact title",
          "contactEmail": "contact@email.com",
          "contactPhone": "(123)456-7890",
          "contactPhoneExt": null,
          "contactDepartment": "Support",
          "street1": "One Street",
          "street2": "",
          "city": "Ottawa",
          "stateProv": "Ontario",
          "country": "CA",
          "postalCode": "A1A 1A1"
        }
      },
      "VersionInfoResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "description": "The data containing version info extra details."
            },
            "description": "The data containing version info extra details."
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Links to related endpoints."
            },
            "description": "Links to related endpoints."
          }
        },
        "description": "Represents the response for version info extra. It provides details about each system and its value\nsuch as and others.\n",
        "example": {
          "data": {
            "_extra": {
              "Activation Mechanism": "ActServer",
              "Fusion: mTLS Provisioning Server Response Timeout (seconds)": "30",
              "Installation: Deployment Type": "N-central",
              "N-able Hosted Platform": "false",
              "Fusion: Unified Agent Maint Customer Handler Start Delay (milliseconds)": "900000",
              "Installation: Deployment Product Version": "2024.1.0.11",
              "Lightweight Integration: Max LWT Complete Attempts Initial": "3",
              "Installation: Servlet API Version": "2.0.nable",
              "UI: Branding Profile": "default/nable",
              "Fusion: Unified Agent Maint Customer Handler Repeat Rate (milliseconds)": "30000",
              "Installation: UI Product Version": "2024.1.0.11",
              "Lightweight Integration: Max LWT Deploy Attempts Initial": "3",
              "Lightweight Integration: LWT Complete Interval Initial (Minutes)": "5",
              "Max RemoteExecution Data Size (Byte)": "500",
              "Fusion: Unified Agent Maint Revoke Token Repeat Rate (milliseconds)": "3600000",
              "Google Tags Enabled": "false",
              "SSLEnabled": "true",
              "Fusion: Unified Agent mTLS Provisioning API URL": "",
              "Fusion: Unified Agent mTLS Provisioning Config URL": "",
              "Fusion: mTLS Provisioning Server Read Timeout (seconds)": "20",
              "LiveChat API Server: Host": "https://c.la2-c1cs-iad.salesforceliveagent.com/content/g/js/41.0/deployment.js",
              "Maint: Renew SSL Certificate Before Expiry (Hours)": "24",
              "PatchApprovalPerformanceImprovements": "true",
              "Fusion: Maint Delete Expired Token Frequency (Milliseconds)": "21600000",
              "Fusion: Unified Agent Configuration Type Signature Delay (seconds)": "10",
              "Fusion: Maint Retry Keybox (Milliseconds)": "900000",
              "License Key Expiry": "2026-09-30 00:00:00.000 -0400",
              "Lightweight Integration: LWT Complete Interval Retry (Minutes)": "60",
              "Maint: Renew EventDistributorUser Certificate Before Expiry (Hours)": "72",
              "Lightweight Integration: Max LWT Deploy Attempts Total": "10",
              "Fusion: mTLS Provisioning Server Connect Timeout (milliseconds)": "20000",
              "Prevent Sensitive Data In URL": "false",
              "MDM: N-Central UUID": "",
              "Lightweight Integration: Max LWT Complete Attempts Total": "10",
              "NVISION: Licensed": "true"
            }
          },
          "_links": {

          }
        }
      },
      "VersionInfoAuthenticatedRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "description": "Representation of credentials.",
        "example": {
          "username": "my.username@n-able.com",
          "password": "myPassword!"
        }
      },
      "DirectSupportTask": {
        "required": [
          "credential",
          "customerId",
          "deviceId",
          "itemId",
          "name",
          "taskType"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the task. This value must be unique."
          },
          "itemId": {
            "type": "integer",
            "description": "The ID of the remote execution item. The item ID can be found in the N-central UI (\"Configuration\" -\u003E \"Scheduled Tasks\" -\u003E \"Script/software Repository\") and it must have \"Enable API\" flag \"ON\" (see in the N-central UI).",
            "format": "int32"
          },
          "taskType": {
            "type": "string",
            "description": "The type of the task. Supported values: AutomationPolicy, Script or MacScript.",
            "enum": [
              "AutomationPolicy",
              "Script",
              "MacScript"
            ]
          },
          "customerId": {
            "type": "integer",
            "description": "The ID of the customer. The customer ID can be obtained using the \u003Ca href=\"#operations-Customers-listCustomers\"\u003E'GET /api/customers'\u003C/a\u003E endpoint.",
            "format": "int32"
          },
          "deviceId": {
            "type": "integer",
            "description": "The ID of the device. The device ID can be obtained using the \u003Ca href=\"#operations-Devices-getDeviceById\"\u003E'GET /api/devices'\u003C/a\u003E endpoint.",
            "format": "int32"
          },
          "credential": {
            "$ref": "#/components/schemas/ScheduledTaskCredential"
          },
          "parameters": {
            "type": "array",
            "description": "The credential setting for the task.\nFor more information about the fields of \u003Ca href=\"#model-ScheduledTaskParameter\"\u003EScheduledTaskParameter\u003C/a\u003E,\n    please review its schema below.\n",
            "items": {
              "$ref": "#/components/schemas/ScheduledTaskParameter"
            }
          }
        },
        "description": "'Direct support' scheduled task.",
        "example": {
          "name": "Test Task",
          "itemId": 1,
          "taskType": "Script",
          "customerId": 100,
          "deviceId": 987654321,
          "credential": {
            "type": "LocalSystem",
            "username": null,
            "password": null
          },
          "parameters": [
            {
              "name": "CommandLine",
              "value": "killprocess.vbs /process:33022"
            }
          ]
        }
      },
      "ScheduledTaskCredential": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The credential type. Supported values: LocalSystem, DeviceCredentials and CustomCredentials.",
            "enum": [
              "LocalSystem",
              "DeviceCredentials",
              "CustomCredentials"
            ]
          },
          "username": {
            "type": "string",
            "description": "The username (used with 'CustomCredentials' type)."
          },
          "password": {
            "type": "string",
            "description": "The password (used with 'CustomCredentials' type)."
          }
        },
        "description": "Credentials for a remote execution task.",
        "example": {
          "type": "CustomCredentials",
          "username": "admin",
          "password": "pass"
        }
      },
      "ScheduledTaskParameter": {
        "required": [
          "description",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The parameter name. The value must not be empty."
          },
          "value": {
            "type": "string",
            "description": "The parameter value."
          },
          "description": {
            "type": "string",
            "description": "The parameter name. The value must not be empty."
          },
          "type": {
            "type": "string",
            "description": "The parameter type. Supported values: string, integer, boolean, text, dword.",
            "enum": [
              "string",
              "integer",
              "boolean",
              "text",
              "dword"
            ]
          }
        },
        "description": "Input Parameters of the task to be executed, whether it is an Automation Policy, a script, a MAC script, etc.\nParameters for an automation policy are defined according to the script repository item associated with\na given scheduled task.\nFor a script or a MAC script, the whole command line can be specified using the parameter \"CommandLine\".\n",
        "example": "   {\n     \"name\": \"CommandLine\",\n     \"value\": \"killprocess.vbs /process:33022\",\n     \"description\": \"Command line to execute\",\n     \"type\": \"string\",\n   }\n"
      },
      "ScheduledTaskCreateResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TaskCreate"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Links to related endpoints."
            },
            "description": "Links to related endpoints."
          }
        },
        "description": "Response for a task-creation request",
        "example": {
          "data": {
            "taskId": 1985975
          },
          "_links": {
            "task": "/api/scheduled-tasks/{1985975}"
          }
        }
      },
      "TaskCreate": {
        "type": "object",
        "properties": {
          "taskId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "description": "Information about a newly created task",
        "example": {
          "taskId": 1985975
        }
      },
      "CreateUserRoleRequest": {
        "required": [
          "description",
          "permissionIds",
          "roleName"
        ],
        "type": "object",
        "properties": {
          "roleName": {
            "type": "string",
            "description": "The name of the role",
            "example": "Admin"
          },
          "description": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The description of the role",
            "example": "Admin role"
          },
          "permissionIds": {
            "type": "array",
            "description": "The list of permissions",
            "example": [1, 2, 3],
            "items": {
              "type": "string",
              "description": "The list of permissions",
              "example": "[1,2,3]"
            }
          },
          "userIds": {
            "type": "array",
            "description": "The list of user IDs",
            "example": [1, 2, 3],
            "items": {
              "type": "string",
              "description": "The list of user IDs",
              "example": "[1,2,3]"
            }
          }
        },
        "description": "Request Payload for adding a new user role.",
        "example": {
          "roleName": "Admin",
          "description": "Admin role",
          "permissionIds": [
            "1",
            "2",
            "3"
          ],
          "userIds": [
            "1",
            "2",
            "3"
          ]
        }
      },
      "CreateUserRoleResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Data"
          },
          "links": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Represents the response of creating a new role and contains the role ID for a newly created role.\n",
        "example": {
          "data": {
            "roleId": 123
          },
          "_links": []
        }
      },
      "DeviceAccessGroupCreateRequest": {
        "required": [
          "groupDescription",
          "groupName"
        ],
        "type": "object",
        "properties": {
          "groupName": {
            "type": "string",
            "description": "Name of the access group."
          },
          "groupDescription": {
            "type": "string",
            "description": "Description of the access group."
          },
          "deviceIds": {
            "type": "array",
            "description": "List of device IDs to attach to the access group.",
            "items": {
              "type": "string",
              "description": "List of device IDs to attach to the access group."
            }
          },
          "userIds": {
            "type": "array",
            "description": "List of user IDs to be associated with the access group.",
            "items": {
              "type": "string",
              "description": "List of user IDs to be associated with the access group."
            }
          }
        },
        "description": "Request for creating a device type access group.",
        "example": {
          "groupName": "Example Group Name",
          "groupDescription": "A sample access group for demonstration purposes",
          "deviceIds": [
            "1001",
            "1002"
          ],
          "userIds": [
            "5001",
            "5002"
          ]
        }
      },
      "OrgUnitTypeAccessGroupCreateRequest": {
        "required": [
          "groupDescription",
          "groupName"
        ],
        "type": "object",
        "properties": {
          "groupName": {
            "type": "string",
            "description": "Name of the access group."
          },
          "groupDescription": {
            "type": "string",
            "description": "Description of the access group."
          },
          "orgUnitIds": {
            "type": "array",
            "description": "List of orgUnit IDs to attach to the access group.",
            "items": {
              "type": "string",
              "description": "List of orgUnit IDs to attach to the access group."
            }
          },
          "userIds": {
            "type": "array",
            "description": "List of user IDs to be associated with the access group.",
            "items": {
              "type": "string",
              "description": "List of user IDs to be associated with the access group."
            }
          },
          "autoIncludeNewOrgUnits": {
            "type": "string",
            "description": "Flag indicating whether new org units should be automatically included. Default or invalid: false"
          }
        },
        "description": "Request for creating an org unit type access group.",
        "example": {
          "groupName": "Example Group Name",
          "groupDescription": "A sample access group for demonstration purposes",
          "orgUnitIds": [
            "1001",
            "1002"
          ],
          "userIds": [
            "5001",
            "5002"
          ],
          "autoIncludeNewOrgUnits": "true"
        }
      },
      "MaintenanceWindowResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          }
        },
        "description": "General Response for maintenance window action.",
        "example": {
          "success": true
        }
      },
      "Action": {
        "type": "object",
        "properties": {
          "Key": {
            "type": "string"
          },
          "Value": {
            "type": "string"
          }
        },
        "description": "Response for Maintenance Window Action.",
        "example": "             {\n                \"key\": \"Install\",\n                \"value\": \"871a0782-be12-a5c4-c57f-1bd6d9f7144e\",\n              }\n"
      },
      "ApplicableAction": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Action"
            }
          }
        },
        "description": "Request/Response for Maintenance Window ApplicableAction.",
        "example": "            {\n                \"type\": \"Patch\",\n                \"actions\": [\n                    {\n                        \"key\": \"Install\",\n                        \"value\": \"871a0782-be12-a5c4-c57f-1bd6d9f7144e\",\n                    }\n                ]\n            }\n"
      },
      "MaintenanceWindowRequest": {
        "required": [
          "applicableAction",
          "cron",
          "duration",
          "enabled",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "applicableAction": {
            "type": "array",
            "description": "Actions Applicable To Window",
            "items": {
              "$ref": "#/components/schemas/ApplicableAction"
            }
          },
          "cron": {
            "type": "string",
            "description": "Schedule represented as Cron"
          },
          "duration": {
            "type": "integer",
            "description": "Maintenance Window should last for",
            "format": "int32"
          },
          "enabled": {
            "type": "boolean",
            "description": "Maintenance Window should last for"
          },
          "name": {
            "type": "string",
            "description": "Name of Maintenance Window"
          },
          "type": {
            "type": "string",
            "description": "Type of Maintenance Window (only allowed type is currently 'action')"
          },
          "downtimeOnAction": {
            "type": "boolean",
            "description": "Place Device in Downtime During Reboot (Reboot Window)"
          },
          "maxDowntime": {
            "type": "integer",
            "description": "Force Device out of Downtime After (Reboot Window) - used when 'downtimeOnAction' is true",
            "format": "int32"
          },
          "rebootMethod": {
            "type": "string",
            "description": "Reboot Method (Reboot Window), must be one of: ['allowUserToPostpone', 'forceUserToReboot', 'forceRebootWithoutNotification', 'onlyAcceptedReboot']"
          },
          "rebootDelay": {
            "type": "integer",
            "description": "Minutes before continuing with reboot. (Reboot Window)",
            "format": "int32"
          },
          "userMessageEnabled": {
            "type": "boolean",
            "description": "Display Custom Message To User (Reboot Window)"
          },
          "userMessage": {
            "type": "string",
            "description": "Custom message to display to user when 'userMessageEnabled' is true (Reboot Window)"
          },
          "messageSenderEnabled": {
            "type": "boolean",
            "description": "Enable Custom Message Sender (Reboot Window)"
          },
          "messageSender": {
            "type": "string",
            "description": "Message from when 'messageSenderEnabled' is true (Reboot Window)"
          },
          "preserveStateEnabled": {
            "type": "boolean",
            "description": "Preserve State of Device During Reboot (/g flag) (Reboot Window)"
          }
        },
        "description": "Represents a single maintenance Window.",
        "example": {
          "applicableAction": [
            {
              "type": "Patch",
              "actions": [
                {
                  "Key": "detect",
                  "Value": null
                }
              ]
            }
          ],
          "name": "Test Maintenance Window",
          "type": "action",
          "cron": "0 0 0 ? 2 1,4 *",
          "duration": 60,
          "enabled": true,
          "maxDowntime": 0,
          "rebootMethod": "allowUserToPostpone",
          "rebootDelay": 0,
          "downtimeOnAction": false,
          "userMessageEnabled": false,
          "userMessage": null,
          "messageSenderEnabled": false,
          "messageSender": null,
          "preserveStateEnabled": false
        }
      },
      "MaintenanceWindowsRequest": {
        "type": "object",
        "properties": {
          "deviceIDs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "maintenanceWindows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MaintenanceWindowRequest"
            }
          }
        },
        "description": "Request for creating a set of maintenance Windows to a list of devices.",
        "example": {
          "deviceIDs": [123456789, 234567890, 345678901],
          "maintenanceWindows": [
            {
              "applicableAction": [
                {
                  "type": "Patch",
                  "actions": [
                    {
                      "Key": "detect",
                      "Value": null
                    }
                  ]
                }
              ],
              "name": "Test Maintenance Window",
              "type": "action",
              "cron": "0 0 0 ? 2 1,4 *",
              "duration": 60,
              "enabled": true,
              "maxDowntime": 0,
              "rebootMethod": "allowUserToPostpone",
              "rebootDelay": 0,
              "downtimeOnAction": false,
              "userMessageEnabled": false,
              "userMessage": null,
              "messageSenderEnabled": false,
              "messageSender": null,
              "preserveStateEnabled": false
            }
          ]
        }
      },
      "SiteCreation": {
        "required": [
          "contactFirstName",
          "contactLastName",
          "siteName"
        ],
        "type": "object",
        "properties": {
          "contactFirstName": {
            "type": "string",
            "description": "First name of the contact for the organization unit."
          },
          "contactLastName": {
            "type": "string",
            "description": "Last name of the contact for the organization unit."
          },
          "externalId": {
            "type": "string",
            "description": "The external ID of the organization unit."
          },
          "phone": {
            "type": "string",
            "description": "Telephone of the contact for the organization unit."
          },
          "contactTitle": {
            "type": "string",
            "description": "Title of the contact for the organization unit."
          },
          "contactEmail": {
            "type": "string",
            "description": "Contact email for the organization unit."
          },
          "contactPhone": {
            "type": "string",
            "description": "Telephone of the contact for the organization unit."
          },
          "contactPhoneExt": {
            "type": "string",
            "description": "Telephone extension of the contact for the organization unit."
          },
          "contactDepartment": {
            "type": "string",
            "description": "Department of the contact for the organization unit."
          },
          "street1": {
            "type": "string",
            "description": "First line of street address for the organization unit."
          },
          "street2": {
            "type": "string",
            "description": "Second line of street address for the organization unit."
          },
          "city": {
            "type": "string",
            "description": "City where the organization unit is located."
          },
          "stateProv": {
            "type": "string",
            "description": "State or province where the organization unit is located."
          },
          "country": {
            "type": "string",
            "description": "Country where the organization unit is located. Must be two characters country code, see http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2."
          },
          "postalCode": {
            "type": "string",
            "description": "Postal code of the organization unit location."
          },
          "siteName": {
            "type": "string",
            "description": "Name of the site."
          },
          "licenseType": {
            "type": "string",
            "description": "License type of the site.",
            "default": "Professional"
          }
        },
        "description": "Data object for site.",
        "example": {
          "siteName": "New site name",
          "contactFirstName": "first name",
          "contactLastName": "last name",
          "licenseType": "Professional",
          "externalId": "extId",
          "phone": "phone",
          "contactTitle": "contact title",
          "contactEmail": "contact@email.com",
          "contactPhone": "(123)456-7890",
          "contactPhoneExt": null,
          "contactDepartment": "Support",
          "street1": "One Street",
          "street2": "",
          "city": "Ottawa",
          "stateProv": "Ontario",
          "country": "CA",
          "postalCode": "A1A 1A1"
        }
      },
      "SiteCreated": {
        "type": "object",
        "properties": {
          "siteId": {
            "type": "integer",
            "description": "Id of the created site.",
            "format": "int32"
          }
        }
      },
      "CustomPsaTicketGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CustomPsaTicketInfo"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Links to related endpoints."
            },
            "description": "Links to related endpoints."
          }
        },
        "description": "Represents the response for fetching details of a specific Custom PSA ticket.\n",
        "example": {
          "data": {
            "ticketId": "1142285696",
            "ticketTitle": "Foo bar ticket #1",
            "ticketDetails": "For testing PSA ticketing",
            "ticketStatus": "CREATE_TICKET_CREATED_IN_NCENTRAL",
            "creationDate": "2024-02-21T06:28:10.624-05:00[America/New_York]"
          },
          "_links": {

          }
        }
      },
      "CustomPsaTicketInfo": {
        "type": "object",
        "properties": {
          "ticketId": {
            "type": "string",
            "description": "The ID of the Custom PSA ticket."
          },
          "ticketTitle": {
            "type": "string",
            "description": "The title of the Custom PSA ticket."
          },
          "ticketDetails": {
            "type": "string",
            "description": "The details of the Custom PSA ticket."
          },
          "ticketStatus": {
            "type": "string",
            "description": "The status of the Custom PSA ticket."
          },
          "creationDate": {
            "type": "string",
            "description": "The creation date of the Custom PSA ticket."
          }
        },
        "description": "Represents the response for fetching details of a specific Custom PSA ticket."
      },
      "AuthRefreshResponse": {
        "type": "object",
        "properties": {
          "tokens": {
            "$ref": "#/components/schemas/AuthTokens"
          },
          "refresh": {
            "type": "string"
          },
          "validate": {
            "type": "string"
          }
        },
        "description": "Response for the refresh of authentication tokens.",
        "example": {
          "tokens": {
            "access": {
              "token": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI1MjZjMTjI0M30.try6YwSXhu1qh1iyBPonWVfxLexlNavXkRqQaeY2uzo",
              "type": "Bearer",
              "expirySeconds": 3600
            },
            "refresh": {
              "token": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI1I2OTQ0M30.T_yn88Xg258liJa5AwLq011-TWDMWMKVVyR5AYOM3os",
              "type": "Body",
              "expirySeconds": 90000
            }
          },
          "refresh": "/api/auth/refresh",
          "validate": "/api/auth/validate"
        }
      },
      "AuthToken": {
        "required": [
          "token",
          "type"
        ],
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "The JWT token."
          },
          "type": {
            "type": "string",
            "description": "The token type: bearer or body."
          },
          "expirySeconds": {
            "type": "integer",
            "description": "The expiry in seconds.",
            "format": "int64"
          }
        },
        "description": "Authentication token (access or refresh).",
        "example": {
          "token": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI1MjZjMTjI0M30.try6YwSXhu1qh1iyBPonWVfxLexlNavXkRqQaeY2uzo",
          "type": "Bearer",
          "expirySeconds": 3600
        }
      },
      "AuthTokens": {
        "required": [
          "access",
          "refresh"
        ],
        "type": "object",
        "properties": {
          "access": {
            "$ref": "#/components/schemas/AuthToken"
          },
          "refresh": {
            "$ref": "#/components/schemas/AuthToken"
          }
        },
        "description": "Authentication tokens (access and refresh).",
        "example": {
          "access": {
            "token": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI1MjZjMTjI0M30.try6YwSXhu1qh1iyBPonWVfxLexlNavXkRqQaeY2uzo",
            "type": "Bearer",
            "expirySeconds": 3600
          },
          "refresh": {
            "token": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI1I2OTQ0M30.T_yn88Xg258liJa5AwLq011-TWDMWMKVVyR5AYOM3os",
            "type": "Body",
            "expirySeconds": 90000
          }
        }
      },
      "AuthenticateResponse": {
        "type": "object",
        "properties": {
          "tokens": {
            "$ref": "#/components/schemas/AuthTokens"
          },
          "refresh": {
            "type": "string"
          },
          "validate": {
            "type": "string"
          }
        },
        "description": "Response for obtaining the authentication tokens.",
        "example": {
          "tokens": {
            "access": {
              "token": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI1MjZjMTjI0M30.try6YwSXhu1qh1iyBPonWVfxLexlNavXkRqQaeY2uzo",
              "type": "Bearer",
              "expirySeconds": 3600
            },
            "refresh": {
              "token": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI1I2OTQ0M30.T_yn88Xg258liJa5AwLq011-TWDMWMKVVyR5AYOM3os",
              "type": "Body",
              "expirySeconds": 90000
            }
          },
          "refresh": "/api/auth/refresh",
          "validate": "/api/auth/validate"
        }
      },
      "AssetLifecyclePatchRequest": {
        "type": "object",
        "properties": {
          "warrantyExpiryDate": {
            "pattern": "(\\d{4}-\\d{2}-\\d{2}( \\d{2}:\\d{2}:\\d{2}(\\.\\d{1,9})?)?)?",
            "type": "string"
          },
          "leaseExpiryDate": {
            "pattern": "(\\d{4}-\\d{2}-\\d{2}( \\d{2}:\\d{2}:\\d{2}(\\.\\d{1,9})?)?)?",
            "type": "string"
          },
          "expectedReplacementDate": {
            "pattern": "(\\d{4}-\\d{2}-\\d{2}( \\d{2}:\\d{2}:\\d{2}(\\.\\d{1,9})?)?)?",
            "type": "string"
          },
          "purchaseDate": {
            "pattern": "(\\d{4}-\\d{2}-\\d{2}( \\d{2}:\\d{2}:\\d{2}(\\.\\d{1,9})?)?)?",
            "type": "string"
          },
          "cost": {
            "type": "number"
          },
          "location": {
            "type": "string"
          },
          "assetTag": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "updateWarrantyError": {
            "type": "string"
          }
        },
        "description": "Asset Lifecycle Patch Request details",
        "example": {
          "warrantyExpiryDate": "2022-12-31",
          "leaseExpiryDate": "2022-12-31",
          "expectedReplacementDate": "2022-12-31",
          "purchaseDate": "2022-12-31",
          "cost": 0,
          "location": "location",
          "assetTag": "assetTag",
          "description": "description",
          "updateWarrantyError": "updateWarrantyError"
        }
      },
      "LinksResponse": {
        "type": "object",
        "properties": {
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "ListResponseSite": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Site"
            }
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Site": {
        "required": [
          "contactFirstName",
          "contactLastName"
        ],
        "type": "object",
        "properties": {
          "siteId": {
            "type": "string",
            "description": "The ID of the organization unit."
          },
          "siteName": {
            "type": "string",
            "description": "The name of the organization unit."
          },
          "orgUnitType": {
            "type": "string",
            "description": "The type of the organization unit (SYSTEM, SO, CUSTOMER or SITE)."
          },
          "parentId": {
            "type": "string",
            "description": "The ID of the parent organization unit."
          },
          "externalId": {
            "type": "string",
            "description": "The external ID of the organization unit."
          },
          "externalId2": {
            "type": "string",
            "description": "The external ID 2 of the organization unit."
          },
          "contactFirstName": {
            "type": "string",
            "description": "First name of the contact for the organization unit."
          },
          "contactLastName": {
            "type": "string",
            "description": "Last name of the contact for the organization unit."
          },
          "phone": {
            "type": "string",
            "description": "Telephone of the contact for the organization unit."
          },
          "contactTitle": {
            "type": "string",
            "description": "Title of the contact for the organization unit."
          },
          "contactEmail": {
            "type": "string",
            "description": "Contact email for the organization unit."
          },
          "contactPhone": {
            "type": "string",
            "description": "Telephone of the contact for the organization unit."
          },
          "contactPhoneExt": {
            "type": "string",
            "description": "Telephone extension of the contact for the organization unit."
          },
          "contactDepartment": {
            "type": "string",
            "description": "Department of the contact for the organization unit."
          },
          "street1": {
            "type": "string",
            "description": "First line of street address for the organization unit."
          },
          "street2": {
            "type": "string",
            "description": "Second line of street address for the organization unit."
          },
          "city": {
            "type": "string",
            "description": "City where the organization unit is located."
          },
          "stateProv": {
            "type": "string",
            "description": "State or province where the organization unit is located."
          },
          "country": {
            "type": "string",
            "description": "Country where the organization unit is located. Must be two characters country code, see http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2."
          },
          "postalCode": {
            "type": "string",
            "description": "Postal code of the organization unit location."
          },
          "isSystem": {
            "type": "boolean"
          },
          "isServiceOrg": {
            "type": "boolean"
          }
        },
        "description": "Data object for service organiztion organization.",
        "example": {
          "siteId": "100",
          "siteName": "N-able",
          "orgUnitType": "SO",
          "parentId": "50",
          "externalId": "extId",
          "externalId2": "extId2",
          "phone": "phone",
          "contactTitle": "contact title",
          "contactFirstName": "contact first name",
          "contactLastName": "contact last name",
          "contactEmail": "contact@email.com",
          "contactPhone": "(123)456-7890",
          "contactPhoneExt": null,
          "contactDepartment": "Support",
          "street1": "One Street",
          "street2": "",
          "city": "Ottawa",
          "stateProv": "Ontario",
          "country": "CA",
          "county": null,
          "postalCode": "A1A 1A1"
        }
      },
      "RegistrationToken": {
        "type": "object",
        "properties": {
          "registrationToken": {
            "type": "string",
            "description": "The registration-token date.",
            "example": "2f64ee5e-7c37-dce7-ffd2-d32912609623"
          },
          "registrationTokenExpiryDate": {
            "type": "string",
            "description": "The registration-token expiry date.",
            "example": "2024-05-01T23:59:00-04:00[America/New_York]"
          }
        },
        "description": "Represents the response for a registration token (GET endpoint).",
        "example": {
          "registrationToken": "2f64ee5e-7c37-dce7-ffd2-d32912609623",
          "registrationTokenExpiryDate": "2024-05-01T23:59:00-04:00[America/New_York]"
        }
      },
      "RegistrationTokenGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RegistrationToken"
          }
        }
      },
      "ListResponseServiceOrganization": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceOrganization"
            }
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ServiceOrganization": {
        "required": [
          "contactFirstName",
          "contactLastName"
        ],
        "type": "object",
        "properties": {
          "soId": {
            "type": "string",
            "description": "The ID of the organization unit."
          },
          "soName": {
            "type": "string",
            "description": "The name of the organization unit."
          },
          "orgUnitType": {
            "type": "string",
            "description": "The type of the organization unit (SYSTEM, SO, CUSTOMER or SITE)."
          },
          "parentId": {
            "type": "string",
            "description": "The ID of the parent organization unit."
          },
          "externalId": {
            "type": "string",
            "description": "The external ID of the organization unit."
          },
          "externalId2": {
            "type": "string",
            "description": "The external ID 2 of the organization unit."
          },
          "contactFirstName": {
            "type": "string",
            "description": "First name of the contact for the organization unit."
          },
          "contactLastName": {
            "type": "string",
            "description": "Last name of the contact for the organization unit."
          },
          "phone": {
            "type": "string",
            "description": "Telephone of the contact for the organization unit."
          },
          "contactTitle": {
            "type": "string",
            "description": "Title of the contact for the organization unit."
          },
          "contactEmail": {
            "type": "string",
            "description": "Contact email for the organization unit."
          },
          "contactPhone": {
            "type": "string",
            "description": "Telephone of the contact for the organization unit."
          },
          "contactPhoneExt": {
            "type": "string",
            "description": "Telephone extension of the contact for the organization unit."
          },
          "contactDepartment": {
            "type": "string",
            "description": "Department of the contact for the organization unit."
          },
          "street1": {
            "type": "string",
            "description": "First line of street address for the organization unit."
          },
          "street2": {
            "type": "string",
            "description": "Second line of street address for the organization unit."
          },
          "city": {
            "type": "string",
            "description": "City where the organization unit is located."
          },
          "stateProv": {
            "type": "string",
            "description": "State or province where the organization unit is located."
          },
          "country": {
            "type": "string",
            "description": "Country where the organization unit is located. Must be two characters country code, see http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2."
          },
          "postalCode": {
            "type": "string",
            "description": "Postal code of the organization unit location."
          },
          "isSystem": {
            "type": "boolean"
          },
          "isServiceOrg": {
            "type": "boolean"
          }
        },
        "description": "Data object for service organization.",
        "example": {
          "soId": "100",
          "soName": "N-able",
          "orgUnitType": "SO",
          "parentId": "50",
          "externalId": "extId",
          "externalId2": "extId2",
          "phone": "phone",
          "contactTitle": "contact title",
          "contactFirstName": "contact first name",
          "contactLastName": "contact last name",
          "contactEmail": "contact@email.com",
          "contactPhone": "(123)456-7890",
          "contactPhoneExt": null,
          "contactDepartment": "Support",
          "street1": "One Street",
          "street2": "",
          "city": "Ottawa",
          "stateProv": "Ontario",
          "country": "CA",
          "county": null,
          "postalCode": "A1A 1A1"
        }
      },
      "Customer": {
        "required": [
          "contactFirstName",
          "contactLastName"
        ],
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string",
            "description": "The ID of the organization unit."
          },
          "customerName": {
            "type": "string",
            "description": "The name of the organization unit."
          },
          "orgUnitType": {
            "type": "string",
            "description": "The type of the organization unit (SYSTEM, SO, CUSTOMER or SITE)."
          },
          "parentId": {
            "type": "string",
            "description": "The ID of the parent organization unit."
          },
          "externalId": {
            "type": "string",
            "description": "The external ID of the organization unit."
          },
          "externalId2": {
            "type": "string",
            "description": "The external ID 2 of the organization unit."
          },
          "contactFirstName": {
            "type": "string",
            "description": "First name of the contact for the organization unit."
          },
          "contactLastName": {
            "type": "string",
            "description": "Last name of the contact for the organization unit."
          },
          "phone": {
            "type": "string",
            "description": "Telephone of the contact for the organization unit."
          },
          "contactTitle": {
            "type": "string",
            "description": "Title of the contact for the organization unit."
          },
          "contactEmail": {
            "type": "string",
            "description": "Contact email for the organization unit."
          },
          "contactPhone": {
            "type": "string",
            "description": "Telephone of the contact for the organization unit."
          },
          "contactPhoneExt": {
            "type": "string",
            "description": "Telephone extension of the contact for the organization unit."
          },
          "contactDepartment": {
            "type": "string",
            "description": "Department of the contact for the organization unit."
          },
          "street1": {
            "type": "string",
            "description": "First line of street address for the organization unit."
          },
          "street2": {
            "type": "string",
            "description": "Second line of street address for the organization unit."
          },
          "city": {
            "type": "string",
            "description": "City where the organization unit is located."
          },
          "stateProv": {
            "type": "string",
            "description": "State or province where the organization unit is located."
          },
          "country": {
            "type": "string",
            "description": "Country where the organization unit is located. Must be two characters country code, see http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2."
          },
          "postalCode": {
            "type": "string",
            "description": "Postal code of the organization unit location."
          },
          "county": {
            "type": "string",
            "description": "DEPRECATED: County where the organization unit is located."
          },
          "isSystem": {
            "type": "boolean"
          },
          "isServiceOrg": {
            "type": "boolean"
          }
        },
        "description": "Data object for service customer.",
        "example": {
          "customerId": "100",
          "customerName": "N-able",
          "orgUnitType": "SO",
          "parentId": "50",
          "externalId": "extId",
          "externalId2": "extId2",
          "phone": "phone",
          "contactTitle": "contact title",
          "contactFirstName": "contact first name",
          "contactLastName": "contact last name",
          "contactEmail": "contact@email.com",
          "contactPhone": "(123)456-7890",
          "contactPhoneExt": null,
          "contactDepartment": "Support",
          "street1": "One Street",
          "street2": "",
          "city": "Ottawa",
          "stateProv": "Ontario",
          "country": "CA",
          "county": null,
          "postalCode": "A1A 1A1"
        }
      },
      "ListResponseCustomer": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Customer"
            }
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AuthValidateResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "description": "Response for validating the authentication access token.",
        "example": {
          "message": "The token is valid."
        }
      },
      "ScheduledTaskInfoResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TaskInfo"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Links to related endpoints."
            },
            "description": "Links to related endpoints."
          }
        },
        "description": "Task information response.",
        "example": {
          "data": {
            "taskId": 905592865,
            "parentId": 120,
            "name": "Name",
            "itemId": 2,
            "type": "Script",
            "orgUnitId": 100,
            "soId": 50,
            "siteId": null,
            "applianceId": 1258095675,
            "isReactive": false,
            "isEnabled": true,
            "deviceIds": [
              "1234567890"
            ]
          },
          "_links": {
            "status": "/api/scheduled-tasks/905592865/status"
          }
        }
      },
      "TaskInfo": {
        "type": "object",
        "properties": {
          "taskId": {
            "type": "integer",
            "description": "Id of the task.",
            "format": "int32"
          },
          "parentId": {
            "type": "integer",
            "description": "The unique identifier of the parent task (if applicable), or null if there is no parent task.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "The name of the task (same with taskName)."
          },
          "taskName": {
            "type": "string",
            "description": "The name of the task (same with name)."
          },
          "itemId": {
            "type": "integer",
            "description": "The unique identifier for the item associated with the task.",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "description": "The type of the task."
          },
          "orgUnitId": {
            "type": "integer",
            "description": "The unique identifier of the organization associated with the task.",
            "format": "int32"
          },
          "soId": {
            "type": "integer",
            "description": "The unique identifier of the SO associated with the task.",
            "format": "int32"
          },
          "customerId": {
            "type": "integer",
            "description": "The unique identifier of the customer associated with the task.",
            "format": "int32"
          },
          "siteId": {
            "type": "integer",
            "description": "The unique identifier of the site associated with the task.",
            "format": "int32"
          },
          "applianceId": {
            "type": "integer",
            "description": "The unique identifier of the appliance related to the task.",
            "format": "int32"
          },
          "isReactive": {
            "type": "boolean",
            "description": "Indicates whether the task is reactive (true) or not (false)."
          },
          "isEnabled": {
            "type": "boolean",
            "description": "Indicates whether the task is enabled (true) or disabled (false)."
          },
          "deviceIds": {
            "type": "array",
            "description": "List of device IDs that this task is run on.",
            "items": {
              "type": "string",
              "description": "List of device IDs that this task is run on."
            }
          }
        },
        "description": "Task information response.",
        "example": {
          "taskId": 905592865,
          "parentId": 120,
          "name": "Name",
          "taskName": "Name",
          "itemId": 2,
          "type": "Script",
          "orgUnitId": 100,
          "soId": 50,
          "customerId": 100,
          "siteId": null,
          "applianceId": 1258095675,
          "isReactive": false,
          "isEnabled": true,
          "deviceIds": [
            "1234567890"
          ]
        }
      },
      "ScheduledTaskAggregatedStatusResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TaskAggregatedStatus"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Links to related endpoints."
            },
            "description": "Links to related endpoints."
          }
        },
        "description": "Aggregated status response.",
        "example": {
          "data": {
            "taskName": "Task Name",
            "statusCounts": {
              "Completed": 3,
              "In Pending": 2
            }
          },
          "_links": {
            "details": "/api/scheduled-tasks/{taskId}/status/details"
          }
        }
      },
      "TaskAggregatedStatus": {
        "type": "object",
        "properties": {
          "taskName": {
            "type": "string",
            "description": "Name of the task."
          },
          "statusCounts": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "description": "Map of status counts where keys are status names and values are status counts.",
              "format": "int32"
            },
            "description": "Map of status counts where keys are status names and values are status counts."
          }
        },
        "description": "Aggregated status response.",
        "example": {
          "taskName": "Task Name",
          "statusCounts": {
            "Completed": 3,
            "In Pending": 2
          }
        }
      },
      "DetailsResponse": {
        "type": "object",
        "properties": {
          "taskId": {
            "type": "integer",
            "description": "ID of the task.",
            "format": "int32"
          },
          "deviceId": {
            "type": "integer",
            "description": "ID of the device.",
            "format": "int32"
          },
          "deviceName": {
            "type": "string",
            "description": "Name of the device."
          },
          "taskName": {
            "type": "string",
            "description": "Name of the task."
          },
          "status": {
            "type": "string",
            "description": "Status of the task."
          },
          "output": {
            "type": "string",
            "description": "Output of the task."
          },
          "message": {
            "type": "string",
            "description": "Message of the task."
          },
          "outputFileName": {
            "type": "string",
            "description": "Output file name."
          }
        },
        "description": "Details response for a task.",
        "example": {
          "taskId": 9712342,
          "deviceId": 2071979267,
          "deviceName": "Device 1",
          "taskName": "Create log file",
          "status": "Success",
          "output": "Task did not produce any output.",
          "message": "Successful execution on remote device."
        }
      },
      "ListResponseDetailsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DetailsResponse"
            }
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ListResponseOrganizationUnit": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationUnit"
            }
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "OrganizationUnit": {
        "required": [
          "contactFirstName",
          "contactLastName"
        ],
        "type": "object",
        "properties": {
          "orgUnitId": {
            "type": "string",
            "description": "The ID of the organization unit."
          },
          "orgUnitName": {
            "type": "string",
            "description": "The name of the organization unit."
          },
          "orgUnitType": {
            "type": "string",
            "description": "The type of the organization unit (SYSTEM, SO, CUSTOMER or SITE)."
          },
          "parentId": {
            "type": "string",
            "description": "The ID of the parent organization unit."
          },
          "externalId": {
            "type": "string",
            "description": "The external ID of the organization unit."
          },
          "externalId2": {
            "type": "string",
            "description": "The external ID 2 of the organization unit."
          },
          "contactFirstName": {
            "type": "string",
            "description": "First name of the contact for the organization unit."
          },
          "contactLastName": {
            "type": "string",
            "description": "Last name of the contact for the organization unit."
          },
          "phone": {
            "type": "string",
            "description": "Telephone of the contact for the organization unit."
          },
          "contactTitle": {
            "type": "string",
            "description": "Title of the contact for the organization unit."
          },
          "contactEmail": {
            "type": "string",
            "description": "Contact email for the organization unit."
          },
          "contactPhone": {
            "type": "string",
            "description": "Telephone of the contact for the organization unit."
          },
          "contactPhoneExt": {
            "type": "string",
            "description": "Telephone extension of the contact for the organization unit."
          },
          "contactDepartment": {
            "type": "string",
            "description": "Department of the contact for the organization unit."
          },
          "street1": {
            "type": "string",
            "description": "First line of street address for the organization unit."
          },
          "street2": {
            "type": "string",
            "description": "Second line of street address for the organization unit."
          },
          "city": {
            "type": "string",
            "description": "City where the organization unit is located."
          },
          "stateProv": {
            "type": "string",
            "description": "State or province where the organization unit is located."
          },
          "country": {
            "type": "string",
            "description": "Country where the organization unit is located. Must be two characters country code, see http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2."
          },
          "postalCode": {
            "type": "string",
            "description": "Postal code of the organization unit location."
          }
        },
        "description": "Data object for organization unit.",
        "example": {
          "orgUnitId": "100",
          "orgUnitName": "N-able",
          "orgUnitType": "CUSTOMER",
          "parentId": "50",
          "externalId": "extId",
          "externalId2": "extId2",
          "phone": "phone",
          "contactTitle": "contact title",
          "contactFirstName": "contact first name",
          "contactLastName": "contact last name",
          "contactEmail": "admin@n-able.com",
          "contactPhone": "(123)456-7890",
          "contactPhoneExt": null,
          "contactDepartment": "Support",
          "street1": "One Street",
          "street2": "",
          "city": "Ottawa",
          "stateProv": "Ontario",
          "country": "CA",
          "county": null,
          "postalCode": "A1A 1A1"
        }
      },
      "Links": {
        "type": "object",
        "properties": {
          "firstPage": {
            "type": "string"
          },
          "previousPage": {
            "type": "string"
          },
          "nextPage": {
            "type": "string"
          },
          "lastPage": {
            "type": "string"
          }
        }
      },
      "QueryResponseUser": {
        "required": [
          "_links"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "itemCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "_warning": {
            "type": "string"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "The first name of the user.",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the user.",
            "example": "Doe"
          },
          "apiOnlyUser": {
            "type": "boolean",
            "description": "Indicates if the user is API only.",
            "example": false
          },
          "description": {
            "type": "string",
            "description": "A description of the user.",
            "example": "Test description"
          },
          "isEnabled": {
            "type": "boolean",
            "description": "Indicates if the user is enabled.",
            "example": true
          },
          "isLdap": {
            "type": "boolean",
            "description": "Indicates if the user is managed through LDAP.",
            "example": false
          },
          "isLocked": {
            "type": "boolean",
            "description": "Indicates if the user's account is locked.",
            "example": false
          },
          "loggedInUser": {
            "type": "boolean",
            "description": "Indicates if the user is currently logged in.",
            "example": false
          },
          "readOnly": {
            "type": "boolean",
            "description": "Indicates if the user has read-only access.",
            "example": false
          },
          "supportUser": {
            "type": "boolean",
            "description": "Indicates if the user is a support user.",
            "example": false
          },
          "userId": {
            "type": "integer",
            "description": "The unique identifier of the user.",
            "format": "int32",
            "example": 1234567890
          },
          "userName": {
            "type": "string",
            "description": "The email address or username of the user.",
            "example": "johndoe@example.com"
          },
          "accessGroupIds": {
            "type": "array",
            "description": "A list of access group ids associated with the user.",
            "items": {
              "type": "integer",
              "description": "A list of access group ids associated with the user.",
              "format": "int32"
            }
          },
          "currentSsoProvider": {
            "type": "string",
            "description": "The current Single Sign-On provider for the user, if any.",
            "example": "None"
          },
          "customerTree": {
            "type": "array",
            "description": "The hierarchy of customer units associated with the user.",
            "items": {
              "type": "string",
              "description": "The hierarchy of customer units associated with the user."
            }
          },
          "fullName": {
            "type": "string",
            "description": "The full name of the user.",
            "example": "John Doe"
          },
          "roleIds": {
            "type": "array",
            "description": "A list of role ids assigned to the user.",
            "items": {
              "type": "integer",
              "description": "A list of role ids assigned to the user.",
              "format": "int32"
            }
          },
          "twoFactorEnabled": {
            "type": "boolean",
            "description": "Indicates if two-factor authentication is enabled for the user.",
            "example": false
          }
        },
        "description": "Represents the response for a user inside user list endpoint. It provides details about the user.",
        "example": {
          "firstName": "John",
          "lastName": "Doe",
          "apiOnlyUser": false,
          "description": "Test description",
          "isEnabled": true,
          "isLdap": false,
          "isLocked": false,
          "loggedInUser": false,
          "readOnly": false,
          "supportUser": false,
          "userId": 1234567890,
          "userName": "johndoe@example.com",
          "accessGroupIds": [1, 2, 3],
          "currentSsoProvider": "None",
          "customerTree": [
            "System",
            "John's SO",
            "Customer 1"
          ],
          "fullName": "John Doe",
          "roleIds": [12, 13, 14],
          "twoFactorEnabled": false
        }
      },
      "QueryResponseUserRole": {
        "required": [
          "_links"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRole"
            }
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "itemCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "_warning": {
            "type": "string"
          }
        }
      },
      "UserRole": {
        "type": "object",
        "properties": {
          "roleId": {
            "type": "integer",
            "description": "The user role id.",
            "format": "int32"
          },
          "roleName": {
            "type": "string",
            "description": "The user role name."
          },
          "roleDescription": {
            "type": "string",
            "description": "The description of a user role."
          },
          "_extra": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "description": "The extra information."
            },
            "description": "The extra information."
          }
        },
        "description": "Represents the response for a user role. It provides details about the role id, role name and description,\n as well as extra information.\n",
        "example": {
          "roleId": 1001,
          "roleName": "Default Dashboard Role",
          "roleDescription": "Grants users read-only access to Dashboards, and the ability to view service details.",
          "_extra": {
            "cloneable": true,
            "readonly": true,
            "usernames": [
              "User 1 One",
              "User Server Room",
              "User 2 Two"
            ],
            "permissions": [
              "DASHBOARDS_VIEW",
              "SERVICE_VIEW"
            ]
          }
        }
      },
      "UserRoleDetails": {
        "type": "object",
        "properties": {
          "roleId": {
            "type": "integer",
            "description": "The user role id.",
            "format": "int32"
          },
          "orgUnitId": {
            "type": "integer",
            "description": "The organization unit id where the role is defined.",
            "format": "int32"
          },
          "roleName": {
            "type": "string",
            "description": "The user role name."
          },
          "roleDescription": {
            "type": "string",
            "description": "The description of a user role."
          },
          "userIds": {
            "type": "array",
            "description": "The user ids assigned to role.",
            "items": {
              "type": "integer",
              "description": "The user ids assigned to role.",
              "format": "int32"
            }
          },
          "_extra": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "description": "Extra information."
            },
            "description": "Extra information."
          }
        },
        "description": "Represents the response for a user role. It provides details about the role id, role name and description,\n as well as extra information.\n",
        "example": {
          "roleId": 1001,
          "orgUnitId": 1,
          "roleName": "Default Dashboard Role",
          "roleDescription": "Grants users read-only access to Dashboards, and the ability to view service details.",
          "userIds": [111333683, 444512252, 1210074793],
          "_extra": {
            "cloneable": true,
            "readonly": true,
            "permissions": [
              "DASHBOARDS_VIEW",
              "SERVICE_VIEW"
            ]
          }
        }
      },
      "UserRoleDetailsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UserRoleDetails"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Links to related endpoints."
            },
            "description": "Links to related endpoints."
          }
        }
      },
      "DefaultCustomProperty": {
        "type": "object",
        "properties": {
          "propertyId": {
            "type": "integer",
            "description": "The property id.",
            "format": "int32"
          },
          "propertyName": {
            "type": "string",
            "description": "The property name."
          },
          "orgUnitId": {
            "type": "integer",
            "description": "The ID of the 'Home' organization unit at which the custom property was created.",
            "format": "int32"
          },
          "level": {
            "type": "string",
            "description": "The property level (ORGANIZATION_UNIT/DEVICE).",
            "enum": [
              "DEVICE",
              "ORGANIZATION_UNIT",
              "ORGANIZATION_UNIT",
              "DEVICE"
            ]
          },
          "propertyType": {
            "type": "string",
            "description": "The property type.",
            "enum": [
              "HTML_LINK",
              "TEXT",
              "DATE",
              "ENUMERATED",
              "PASSWORD",
              "HTML_LINK",
              "TEXT",
              "DATE",
              "ENUMERATED",
              "PASSWORD"
            ]
          },
          "propagationType": {
            "type": "string",
            "description": "The way how the property value changes are propagated down the organization unit hierarchy.",
            "enum": [
              "NO_PROPAGATION",
              "SERVICE_ORGANIZATION_ONLY",
              "SERVICE_ORGANIZATION_AND_CUSTOMER_AND_SITE",
              "SERVICE_ORGANIZATION_AND_CUSTOMER",
              "SERVICE_ORGANIZATION_AND_SITE",
              "CUSTOMER_AND_SITE",
              "CUSTOMER_ONLY",
              "SITE_ONLY",
              "NO_PROPAGATION",
              "SERVICE_ORGANIZATION_ONLY",
              "SERVICE_AND_ORGANIZATION",
              "SERVICE_AND_ORGANIZATION_AND_DEVICE",
              "SERVICE_AND_DEVICE",
              "ORGANIZATION_AND_DEVICE",
              "ORGANIZATION_ONLY",
              "DEVICE_ONLY"
            ]
          },
          "defaultValue": {
            "type": "string",
            "description": "The default value of the property."
          },
          "selectedOrgUnitIds": {
            "type": "array",
            "description": "The entire list of organization unit IDs to which the custom property is applicable. The list includes the 'Home' organization unit and all its child organization units.",
            "items": {
              "type": "integer",
              "description": "The entire list of organization unit IDs to which the custom property is applicable. The list includes the 'Home' organization unit and all its child organization units.",
              "format": "int32"
            }
          },
          "enumeratedValueList": {
            "type": "array",
            "description": "The list of allowed values for the property, if the property type is ENUMERATED.",
            "items": {
              "type": "string",
              "description": "The list of allowed values for the property, if the property type is ENUMERATED."
            }
          }
        },
        "description": "The default custom property (DEVICE/ORGANIZATION_UNIT).",
        "example": {
          "propertyId": 1624300373,
          "propertyName": "ORG_01-0620",
          "orgUnitId": 11090,
          "level": "ORGANIZATION_UNIT",
          "propertyType": "TEXT",
          "value": "ORG_01-0620 VALUE",
          "selectedOrgUnitIds": [11089, 11090]
        }
      },
      "ListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Device": {
        "type": "object",
        "properties": {
          "deviceId": {
            "type": "integer",
            "format": "int32"
          },
          "uri": {
            "type": "string"
          },
          "remoteControlUri": {
            "type": "string"
          },
          "sourceUri": {
            "type": "string"
          },
          "longName": {
            "type": "string"
          },
          "deviceClass": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "isProbe": {
            "type": "boolean"
          },
          "osId": {
            "type": "string"
          },
          "supportedOs": {
            "type": "string"
          },
          "discoveredName": {
            "type": "string"
          },
          "deviceClassLabel": {
            "type": "string"
          },
          "supportedOsLabel": {
            "type": "string"
          },
          "lastLoggedInUser": {
            "type": "string"
          },
          "stillLoggedIn": {
            "type": "string"
          },
          "licenseMode": {
            "type": "string"
          },
          "orgUnitId": {
            "type": "integer",
            "format": "int32"
          },
          "soId": {
            "type": "integer",
            "format": "int32"
          },
          "soName": {
            "type": "string"
          },
          "customerId": {
            "type": "integer",
            "format": "int32"
          },
          "customerName": {
            "type": "string"
          },
          "siteId": {
            "type": "integer",
            "format": "int32"
          },
          "siteName": {
            "type": "string"
          },
          "lastApplianceCheckinTime": {
            "type": "string",
            "description": "Last check-in time of the agent. This field is optional and will only be included if the value is non-null.",
            "example": "2024-10-15T08:47:50.823Z"
          }
        },
        "description": "Response for list of devices.",
        "example": {
          "deviceId": 1299930810,
          "uri": "52.141.77.215",
          "remoteControlUri": "",
          "sourceUri": "",
          "longName": "WS_01-12091-001001",
          "deviceClass": "Workstations - Windows",
          "description": "Network device discovered using Asset Discovery - 1299930810",
          "isProbe": false,
          "osId": "winnt",
          "supportedOs": "Microsoft Windows 7 Ultimate x64 Edition",
          "discoveredName": "WS_01-12091-001001",
          "deviceClassLabel": "Workstations - Windows",
          "supportedOsLabel": "Microsoft Windows 7 Ultimate x64 Edition",
          "lastLoggedInUser": "-",
          "stillLoggedIn": "",
          "licenseMode": "Professional",
          "orgUnitId": 12091,
          "soId": 12091,
          "soName": "Service_Organization",
          "customerId": 12091,
          "customerName": "PERF_ALL_DEVICES_CUST_01",
          "siteId": 12091,
          "siteName": "PERF_ALL_DEVICES_SITE_0001",
          "lastApplianceCheckinTime": "Field not present OR 2024-10-15T08:47:50.823Z"
        }
      },
      "QueryResponseDevice": {
        "required": [
          "_links"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Device"
            }
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "itemCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "_warning": {
            "type": "string"
          }
        }
      },
      "ListResponseOrganizationCustomProperty": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationCustomProperty"
            }
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "OrganizationCustomProperty": {
        "type": "object",
        "properties": {
          "propertyId": {
            "type": "integer",
            "description": "The property id.",
            "format": "int32",
            "readOnly": true
          },
          "propertyName": {
            "type": "string",
            "description": "The property name.",
            "readOnly": true
          },
          "propertyType": {
            "type": "string",
            "description": "The property type.",
            "readOnly": true,
            "enum": [
              "HTML_LINK",
              "TEXT",
              "DATE",
              "ENUMERATED",
              "PASSWORD",
              "HTML_LINK",
              "TEXT",
              "DATE",
              "ENUMERATED",
              "PASSWORD"
            ]
          },
          "value": {
            "type": "string",
            "description": "The property value."
          },
          "enumeratedValueList": {
            "type": "array",
            "description": "The possible values of the property.",
            "readOnly": true,
            "items": {
              "type": "string",
              "description": "The possible values of the property.",
              "readOnly": true
            }
          }
        },
        "description": "The custom property (DEVICE/ORGANIZATION_UNIT).",
        "example": {
          "propertyId": 1624300373,
          "propertyName": "ORG_01-0620",
          "propertyType": "TEXT",
          "value": "ORG_01-0620 VALUE"
        }
      },
      "DefaultDeviceCustomProperty": {
        "type": "object",
        "properties": {
          "propertyId": {
            "type": "integer",
            "format": "int32"
          },
          "customerId": {
            "type": "integer",
            "format": "int32"
          },
          "propertyName": {
            "type": "string"
          },
          "propertyLevel": {
            "type": "string"
          },
          "propertyType": {
            "type": "string",
            "enum": [
              "HTML_LINK",
              "TEXT",
              "DATE",
              "ENUMERATED",
              "PASSWORD"
            ]
          },
          "value": {
            "type": "string"
          },
          "enumeratedValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeviceCustomPropertyEnumeratedValue"
            }
          },
          "deviceClasses": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "supportedOs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Response for default custom property.",
        "example": "    {\n        \"propertyId\": 1815170007,\n        \"customerId\": 100,\n        \"propertyName\": \"customer1-NCC-4407-dateProperty1\",\n        \"propertyLevel\": \"DEVICE\",\n        \"propertyType\": \"DATE\",\n        \"defaultValue\": \"1707886800000\",\n        \"deviceClasses\": [\n            \"Laptop - Windows\",\n         ],\n        \"supportedOs\": [\n            \"Windows 10\",\n            \"Windows 7\",\n        ]\n    }\n"
      },
      "DeviceCustomPropertyEnumeratedValue": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "integer",
            "format": "int32"
          },
          "customerName": {
            "type": "string"
          },
          "customerType": {
            "type": "integer",
            "format": "int32"
          },
          "propertyId": {
            "type": "integer",
            "format": "int32"
          },
          "propertyValue": {
            "type": "string"
          }
        }
      },
      "DeviceCustomPropertyResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DefaultDeviceCustomProperty"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Links to related endpoints."
            },
            "description": "Links to related endpoints."
          }
        },
        "description": "Response for device custom property information.",
        "example": "    {\n        data: {\n            \"propertyId\": 1815170007,\n            \"customerId\": 100,\n            \"propertyName\": \"customer1-NCC-4407-dateProperty1\",\n            \"propertyLevel\": \"DEVICE\",\n            \"propertyType\": \"DATE\",\n            \"defaultValue\": \"1707886800000\",\n            \"deviceClasses\": [\n                \"Laptop - Windows\",\n             ],\n            \"supportedOs\": [\n                \"Windows 10\",\n                \"Windows 7\"\n            ]\n        }\n    }\n"
      },
      "ActiveIssue": {
        "type": "object",
        "properties": {
          "orgUnitId": {
            "type": "integer",
            "description": "The organization unit id.",
            "format": "int32",
            "example": 100
          },
          "deviceId": {
            "type": "integer",
            "description": "The device id.",
            "format": "int32",
            "example": 576589254
          },
          "notificationState": {
            "type": "integer",
            "description": "The notification state.",
            "format": "int32",
            "example": 1
          },
          "serviceId": {
            "type": "integer",
            "description": "The service id.",
            "format": "int32",
            "example": 496
          },
          "serviceName": {
            "type": "string",
            "description": "The service name.",
            "example": "Windows UAC Status"
          },
          "serviceType": {
            "type": "string",
            "description": "The service type.",
            "example": "AMP"
          },
          "taskId": {
            "type": "integer",
            "description": "The task id.",
            "format": "int32",
            "example": 2096172314
          },
          "serviceItemId": {
            "type": "integer",
            "description": "The service item id.",
            "format": "int32",
            "example": 36893
          },
          "_extra": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "description": "The _extra information.",
              "example": "    {\n    \"soCustomerID\": 50,\n    \"deviceName\": \"NCC-9992\",\n    ...\n    }\n"
            },
            "description": "The _extra information.",
            "example": "    {\n    \"soCustomerID\": 50,\n    \"deviceName\": \"NCC-9992\",\n    ...\n    }\n"
          }
        },
        "description": "Represents a response containing an active issue.",
        "example": {
          "orgUnitId": 102,
          "deviceId": 576589254,
          "notificationState": 5,
          "serviceId": 496,
          "serviceName": "Windows UAC Status",
          "serviceType": "AMP",
          "taskId": 2096172314,
          "serviceItemId": 36893,
          "_extra": {
            "numberOfAcknowledgedNotification": null,
            "avdUpdateServerEnabled": false,
            "licenseMode": "Professional",
            "psaIntegrationDisabled": false,
            "avdProtectionEnabled": true,
            "remoteControllable": true,
            "reactiveSupported": true,
            "partOfNotification": false,
            "remoteControlState": "disconnected",
            "acknowledgedBy": "",
            "avdVersion": "",
            "deviceName": "NCC-9996",
            "ticketCreationInProgress": null,
            "transitionTime": "2024-04-02T16:15:33.432Z",
            "integrationStatuses": [],
            "lwtEdrStatus": "",
            "patchManagementEnabled": false,
            "backupManagerProfile": "",
            "mspBackupProfile": "",
            "securityManagerProfile": "",
            "notificationAcknowledgmentInProgress": false,
            "taskIdent": "",
            "microsoftPatchManagementEnabled": false,
            "deviceClassValue": null,
            "backupManagerVersion": "",
            "securityManagerVersion": "",
            "remoteControlConnected": null,
            "monitoringDisabled": false,
            "numberOfActiveNotification": 0,
            "psaIntegrationExists": false,
            "lwtEdrEnabled": false,
            "mspBackupVersion": "",
            "thirdPartyPatchManagementEnabled": false,
            "probe": false,
            "reactiveEnabled": true,
            "netPathEnabled": false,
            "deviceClassLabel": null,
            "mspBackupEnabled": false,
            "port": "",
            "diskEncryptionEnabled": false,
            "customerTree": [
              "System",
              "Service_Organization",
              "Customer 2"
            ],
            "securityManagerEnabled": false,
            "psaTicketDetails": "",
            "soCustomerID": 50,
            "maintenanceWindowEnabled": false,
            "backupManagerEnabled": false,
            "patchManagementProfile": ""
          }
        }
      },
      "QueryResponseActiveIssue": {
        "required": [
          "_links"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActiveIssue"
            }
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "itemCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "_warning": {
            "type": "string"
          }
        }
      },
      "QueryResponse": {
        "required": [
          "_links"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "itemCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "_warning": {
            "type": "string"
          }
        }
      },
      "Health": {
        "type": "object",
        "properties": {
          "currentTime": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "Response for the server health.",
        "example": {
          "currentTime": "2023-09-27T15:43:16.793Z"
        }
      },
      "DeviceResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Device"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Links to related endpoints."
            },
            "description": "Links to related endpoints."
          }
        }
      },
      "DeviceServiceMonitoringStatus": {
        "type": "object",
        "properties": {
          "taskId": {
            "type": "integer",
            "format": "int32"
          },
          "serviceId": {
            "type": "integer",
            "format": "int32"
          },
          "timeToStale": {
            "type": "integer",
            "format": "int32"
          },
          "taskNote": {
            "type": "string"
          },
          "taskIdent": {
            "type": "string"
          },
          "stateStatus": {
            "type": "string"
          },
          "lastUpdate": {
            "type": "string"
          },
          "lastDataId": {
            "type": "integer",
            "format": "int32"
          },
          "createdOn": {
            "type": "string"
          },
          "moduleName": {
            "type": "string"
          },
          "serviceItemId": {
            "type": "integer",
            "format": "int32"
          },
          "lastScanTime": {
            "type": "string"
          },
          "isManagedTask": {
            "type": "boolean"
          },
          "transitionTime": {
            "type": "string"
          },
          "applianceId": {
            "type": "integer",
            "format": "int32"
          },
          "applianceName": {
            "type": "string"
          }
        },
        "description": "Response for Device Service Monitoring Status information.",
        "example": [
          {
            "taskId": 27446324,
            "serviceId": 496,
            "timeToStale": 195,
            "taskNote": "Added by service template [ Workstations - Windows ]",
            "taskIdent": "",
            "stateStatus": "Disconnected",
            "lastUpdate": null,
            "lastDataId": null,
            "createdOn": null,
            "moduleName": "Windows UAC Status",
            "serviceItemId": 31109,
            "lastScanTime": "2024-02-28 15:25:05.939 -0500",
            "isManagedTask": true,
            "transitionTime": "2024-02-28 15:40:42.407"
          },
          {
            "taskId": 27446329,
            "serviceId": 486,
            "timeToStale": 105,
            "taskNote": "Added by service template [ Workstations - Windows ]",
            "taskIdent": "",
            "stateStatus": "Connected",
            "lastUpdate": null,
            "lastDataId": null,
            "createdOn": null,
            "moduleName": "Windows UAC Status",
            "serviceItemId": 31119,
            "lastScanTime": "2024-02-28 15:25:05.939 -0500",
            "isManagedTask": true,
            "transitionTime": "2024-02-28 15:40:42.407"
          }
        ]
      },
      "ListResponseDeviceServiceMonitoringStatus": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeviceServiceMonitoringStatus"
            }
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ListResponseTaskStatusResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskStatusResponse"
            }
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TaskStatusResponse": {
        "type": "object",
        "properties": {
          "taskId": {
            "type": "integer",
            "format": "int32"
          },
          "taskName": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        }
      },
      "ListResponseMaintenanceWindowGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MaintenanceWindowGetResponse"
            }
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "MaintenanceWindowGetResponse": {
        "type": "object",
        "properties": {
          "scheduleID": {
            "type": "integer",
            "format": "int32"
          },
          "userName": {
            "type": "string"
          },
          "lastUpdated": {
            "type": "string"
          },
          "applicableAction": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicableAction"
            }
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "cron": {
            "type": "string"
          },
          "duration": {
            "type": "integer",
            "format": "int32"
          },
          "enabled": {
            "type": "boolean"
          },
          "maxDowntime": {
            "type": "integer",
            "format": "int32"
          },
          "rebootMethod": {
            "type": "string"
          },
          "rebootDelay": {
            "type": "integer",
            "format": "int32"
          },
          "downtimeOnAction": {
            "type": "boolean"
          },
          "userMessageEnabled": {
            "type": "boolean"
          },
          "userMessage": {
            "type": "string"
          },
          "messageSenderEnabled": {
            "type": "boolean"
          },
          "messageSender": {
            "type": "string"
          },
          "preserveStateEnabled": {
            "type": "boolean"
          },
          "ruleID": {
            "type": "integer",
            "format": "int32"
          },
          "ruleName": {
            "type": "string"
          }
        },
        "description": "Response for list of Maintenance Windows.",
        "example": {
          "scheduleID": 123456789,
          "userName": "admin",
          "lastUpdated": "2021-09-01T00:00:00Z",
          "applicableAction": [
            {
              "type": "Patch",
              "actions": [
                {
                  "Key": "reboot",
                  "Value": null
                }
              ]
            }
          ],
          "name": "Test Maintenance Window",
          "type": "action",
          "cron": "0 0 0 ? 2 1,4 *",
          "duration": 60,
          "enabled": "true",
          "maxDowntime": "0",
          "rebootMethod": "",
          "rebootDelay": 0,
          "downTimeOnAction": false,
          "userMessageEnabled": false,
          "userMessage": null,
          "messageSenderEnabled": false,
          "messageSender": null,
          "preserveStateEnabled": false,
          "ruleID": 123456789,
          "ruleName": "Test Rule"
        }
      },
      "DeviceCustomProperty": {
        "type": "object",
        "properties": {
          "propertyId": {
            "type": "integer",
            "description": "The property id.",
            "format": "int32",
            "readOnly": true
          },
          "propertyName": {
            "type": "string",
            "description": "The property name.",
            "readOnly": true
          },
          "propertyType": {
            "type": "string",
            "description": "The property type.",
            "readOnly": true,
            "enum": [
              "HTML_LINK",
              "TEXT",
              "DATE",
              "ENUMERATED",
              "PASSWORD",
              "HTML_LINK",
              "TEXT",
              "DATE",
              "ENUMERATED",
              "PASSWORD"
            ]
          },
          "value": {
            "type": "string",
            "description": "The property value."
          },
          "enumeratedValueList": {
            "type": "array",
            "description": "The possible value of the property.",
            "readOnly": true,
            "items": {
              "type": "string",
              "description": "The possible value of the property.",
              "readOnly": true
            }
          }
        },
        "description": "The custom property (DEVICE/ORGANIZATION_UNIT).",
        "example": {
          "propertyId": 1624300373,
          "propertyName": "ORG_01-0620",
          "propertyType": "TEXT",
          "value": "ORG_01-0620 VALUE"
        }
      },
      "ListResponseDeviceCustomProperty": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeviceCustomProperty"
            }
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "DeviceAssetInfoResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "description": "Asset Information about the device."
              },
              "description": "Asset Information about the device."
            },
            "description": "Asset Information about the device."
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Links to related endpoints."
            },
            "description": "Links to related endpoints."
          }
        },
        "description": "Represents a device asset info response.\nIt contains the asset information about the device in the form of following categories :\n1. os\n2. application\n3. computersystem\n4. networkadapter\n5. device\n6. processor\n\nThe above categories are classified as \"default\" categories and the fields under these categories are considered\n  as \"default\" fields.\n\nThe default fields are considered definitive and are expected to be present at all times.\nIf a default field is missing,\n  it indicates that information about that specific field for the device is unavailable.\n\nThe \"_extra\" part of the response contains all available asset categories and fields.\n\nThe extra categories and fields provide supplementary information about the device asset.\nThese details are optional and may or may not be available in the future.\nAdditionally, certain fields from the \"_extra\" categories or fields might transition to become default categories\nor fields in the future.\n",
        "example": {
          "os": {
            "reportedos": "Microsoft Windows 10 Enterprise",
            "osarchitecture": "64-bit",
            "version": "10.0.19045"
          },
          "application": {
            "list": [
              {
                "_index": 0,
                "displayname": "Microsoft Visual C++ 2022 X64 Additional Runtime - 14.36.32532"
              }
            ]
          },
          "computersystem": {
            "serialnumber": "None",
            "netbiosname": "NCC-0625",
            "model": "VMware7,1",
            "totalphysicalmemory": "2147483648",
            "manufacturer": "VMware, Inc."
          },
          "networkadapter": {
            "list": [
              {
                "ipaddress": "10.120.207.82",
                "_index": 0,
                "dnsserver": "10.120.0.10, 10.220.0.10, 10.100.0.10",
                "description": "vmxnet3 Ethernet Adapter",
                "dhcpserver": null,
                "macaddress": "00:50:56:87:23:5f",
                "gateway": "10.120.207.1"
              }
            ]
          },
          "device": {
            "longname": "NCC-0625",
            "deleted": "false",
            "lastlogin": "2024-01-11 12:07:47.908 -0500",
            "deviceclass": "Workstations - Windows",
            "deviceid": "1065910111",
            "uri": "10.120.207.82"
          },
          "processor": {
            "name": "Intel(R) Xeon(R) Gold 6252 CPU @ 2.10GHz",
            "numberofcores": "1",
            "numberofcpus": "1"
          },
          "_extra": {
            "osfeatures": {
              "list": [
                {
                  "_index": 0,
                  "pvalue": "5.1.19041.1",
                  "pkey": "PowerShellVersion"
                },
                {
                  "_index": 1,
                  "pvalue": "Microsoft.PowerShell.Diagnostics",
                  "pkey": "PowerShell-SnapIn-0"
                }
              ]
            },
            "motherboard": {
              "product": "440BX Desktop Reference Platform",
              "serialnumber": "None",
              "biosversion": "VMW71.00V.21100432.B64.2301110304",
              "version": "None",
              "manufacturer": "Intel Corporation"
            }
          }
        }
      },
      "AssetLifecycleDetails": {
        "type": "object",
        "properties": {
          "warrantyExpiryDate": {
            "type": "string"
          },
          "leaseExpiryDate": {
            "type": "string"
          },
          "expectedReplacementDate": {
            "type": "string"
          },
          "purchaseDate": {
            "type": "string"
          },
          "cost": {
            "type": "number"
          },
          "location": {
            "type": "string"
          },
          "assetTag": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "updateWarrantyError": {
            "type": "string"
          }
        },
        "description": "Asset Lifecycle details",
        "example": {
          "warrantyExpiryDate": "2022-12-31",
          "leaseExpiryDate": "2022-12-31",
          "expectedReplacementDate": "2022-12-31",
          "purchaseDate": "2022-12-31",
          "cost": 0,
          "location": "location",
          "assetTag": "assetTag",
          "description": "description",
          "updateWarrantyError": "updateWarrantyError"
        }
      },
      "Filter": {
        "type": "object",
        "properties": {
          "filterId": {
            "type": "string"
          },
          "filterName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "description": "Response for list of device filters.",
        "example": {
          "filterId": 75,
          "filterName": "Laptops - Windows",
          "description": "Laptop devices running Windows."
        }
      },
      "ListResponseFilter": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            }
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ApplianceTaskInformation": {
        "type": "object",
        "properties": {
          "scanTime": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "enum": [
              "NO_STATE",
              "NO_DATA",
              "STALE",
              "NORMAL",
              "WARNING",
              "FAILED",
              "MISCONFIGURED",
              "DISCONNECTED",
              "DISABLED"
            ]
          },
          "errorMessage": {
            "type": "string"
          },
          "serviceDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplianceTaskStatusDetail"
            }
          }
        },
        "description": "The appliance task information",
        "example": {
          "scanTime": "2024-05-23 11:28:09.55",
          "state": "NORMAL",
          "errorMessage": "",
          "serviceDetails": [
            {
              "scanDetailId": 3262200,
              "detailName": "agent_chkinintvl",
              "description": "Agent check-in interval (sec)",
              "detailValue": "32",
              "state": "NORMAL",
              "monitoringType": "Normal",
              "thresholds": [
                {
                  "state": "NORMAL",
                  "lowValue": 0,
                  "highValue": 300
                },
                {
                  "state": "WARNING",
                  "lowValue": 300,
                  "highValue": 600
                },
                {
                  "state": "FAILED",
                  "lowValue": 600,
                  "highValue": 4294967295
                }
              ]
            }
          ]
        }
      },
      "ApplianceTaskStatusDetail": {
        "type": "object",
        "properties": {
          "scanDetailId": {
            "type": "integer",
            "format": "int32"
          },
          "detailName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "detailValue": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "enum": [
              "NO_STATE",
              "NO_DATA",
              "STALE",
              "NORMAL",
              "WARNING",
              "FAILED",
              "MISCONFIGURED",
              "DISCONNECTED",
              "DISABLED"
            ]
          },
          "monitoringType": {
            "type": "string"
          },
          "thresholds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplianceTaskThresholdBasic"
            }
          }
        }
      },
      "ApplianceTaskThresholdBasic": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "enum": [
              "NO_STATE",
              "NO_DATA",
              "STALE",
              "NORMAL",
              "WARNING",
              "FAILED",
              "MISCONFIGURED",
              "DISCONNECTED",
              "DISABLED"
            ]
          },
          "lowValue": {
            "type": "integer"
          },
          "highValue": {
            "type": "integer"
          }
        }
      },
      "AccessGroupDetails": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "integer",
            "description": "The id of the access group.",
            "format": "int32"
          },
          "orgUnitId": {
            "type": "integer",
            "description": "The id of the organizational unit where the access group is created.",
            "format": "int32"
          },
          "groupName": {
            "type": "string",
            "description": "The name of the access group."
          },
          "groupDescription": {
            "type": "string",
            "description": "The description of the access group."
          },
          "orgUnitIds": {
            "type": "array",
            "description": "List of organizational unit ids where this access group is applied. It is populated when the group type is by organization unit.",
            "items": {
              "type": "integer",
              "description": "List of organizational unit ids where this access group is applied. It is populated when the group type is by organization unit.",
              "format": "int32"
            }
          },
          "deviceIds": {
            "type": "array",
            "description": "List of device ids associated with the access group. It is populated when the group type is by device.",
            "items": {
              "type": "integer",
              "description": "List of device ids associated with the access group. It is populated when the group type is by device.",
              "format": "int32"
            }
          },
          "userIds": {
            "type": "array",
            "description": "List of user ids associated with the access group.",
            "items": {
              "type": "integer",
              "description": "List of user ids associated with the access group.",
              "format": "int32"
            }
          },
          "autoIncludeNewOrgUnits": {
            "type": "boolean",
            "description": "Indicates whether new organization units will be automatically associated to the access group."
          },
          "_extra": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "description": "Contains all the details about the access group under the '_extra' field."
            },
            "description": "Contains all the details about the access group under the '_extra' field."
          }
        },
        "description": "Represents the response for fetching details of a specific access group.\nContains information about the access group, including its name, type, associated devices and users,\ndescription. Properties such as whether it's read-only or cloneable, are encapsulated under the \"_extra\" field.\n",
        "example": {
          "groupId": 1549311915,
          "orgUnitId": 1,
          "groupName": "group name",
          "groupDescription": "description",
          "orgUnitIds": [1, 50, 102, 100, 101, 103],
          "deviceIds": [],
          "userIds": [],
          "autoIncludeNewOrgUnits": false,
          "_extra": {
            "accessgroupapplication": null,
            "grouptype": "ORG_UNIT",
            "readonly": "false",
            "customerid": "1",
            "customers": "[1, 50, 102, 100, 101, 103]",
            "cloneable": null,
            "users": "[]"
          }
        }
      },
      "AccessGroupGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AccessGroupDetails"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Links to related endpoints."
            },
            "description": "Links to related endpoints."
          }
        }
      },
      "MaintenanceWindowsDeleteRequest": {
        "required": [
          "scheduleIds"
        ],
        "type": "object",
        "properties": {
          "scheduleIds": {
            "type": "array",
            "description": "Schedule Ids for windows which are to be deleted",
            "items": {
              "type": "integer",
              "description": "Schedule Ids for windows which are to be deleted",
              "format": "int32"
            }
          }
        },
        "description": "Represents a request to delete Maintenance Windows.",
        "example": {
          "scheduleIds": [123456789, 987654321, 250124567]
        }
      }
    },
    "securitySchemes": {
      "API-Access Token": {
        "type": "http",
        "description": "Access token for API. You can get the token by authenticating. See \"POST - /api/auth/authenticate\".",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "N-central User-API Token (JWT)": {
        "type": "http",
        "description": "N-central User-API Token (JWT). You can get this token from the N-central UI.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}