/*
N-central API-Service

<h3>API Access</h3> <p>In order to use the API-Service endpoints, ensure the following prerequisites are met:</p> <ol>     <li>User is created in N-central with appropriate permissions and configuration         (roles, access groups, MFA disabled, 2FA disabled).</li>     <li>API access is set up in N-central by having a JWT         (Json Web Token, referred to as \"N-central User-API Token\") generated,         acting as the permanent secret solely used for fetching access and refresh tokens.</li> </ol> <p>To access the API-Service endpoints, the JWT must first be exchanged with access and refresh tokens:</p> <ul>     <li>         <p><b>Using Swagger UI:</b></p>         <ol>             <li>Click on the <b>\"Authorize\"</b> button and enter the JWT into the value field                 under <b>\"N-central User-API Token (JWT)\"</b>, then navigate to                 the <code>/api/auth/authenticate</code> endpoint, click <b>\"Try it out\"</b>                 and then <b>\"Execute\"</b>.                 <br/>The new “Access Token” and “Refresh Token” fields will be available in the “Server Response”                 section below. Note that the expiry is 3600s ( 1h ). Copy the value of the access token.</li>             <li>Click on the <b>lock icon</b> to the right of any endpoint                 (or the <b>\"Authorize\"</b> button at the top), enter the access token in the                 <b>\"API-Access Token\"</b> field and click <b>\"Authorize\"</b>.</li>             <li>To call an API-Service endpoint, navigate to it, click <b>\"Try it out\"</b> button and             then <b>\"Execute\"</b>. If the steps above were successful, the access token is included in requests             automatically.</li>         </ol>     </li>     <li>         <p><b>Using a different HTTP client:</b></p>         <ol>             <li>Call the <code>/api/auth/authenticate</code> endpoint.                 The JWT token must be specified under the <code>Authorization</code> header,                 in the form <code>Bearer &lt;YOUR_JWT&gt;\"</code>.                 <br/>The access and refresh tokens are present in the response.</li>             <li>When calling API-Service endpoints, make sure to specify the <b>access token</b> in             the <code>Authorization</code> header as <code>Bearer &lt;ACCESS_TOKEN&gt;</code>.</li>         </ol>     </li> </ul> <h3>API Pagination & Sorting</h3> <p>Certain API-Service query endpoints support pagination and sorting through the use of query parameters.</p> <p><b>Pagination query parameters:</b></p> <ul>     <li>pageSize: number between 1 and 1000 specifying how many items to return for each page (if available).         If unspecified, the default is 50.</li>     <li>pageNumber: number specifying what page of data to retrieve, starting from 1 as the first page.         If unspecified, the default is 1.</li> </ul> <p>A paginated response contains several related fields, such as pageSize, pageNumber, itemCount, totalItems,     totalPages, _links (first, last, previous and next pages) and _warning (containing any warning messages,     if present).</p> <p><b>Sorting query parameters:</b></p> <ul>     <li>sortBy: the name of the field to sort the results by. If unspecified, no sorting is applied.</li>     <li>sortOrder: the case insensitive sorting direction supporting ASC/ASCENDING/NATURAL and         DESC/DESCENDING/REVERSE. If unspecified, the default is ASC.</li> </ul> <h3>API Rate Limiting</h3> <p>The API-Service endpoints are rate limited to ensure the stability, availability and performance of     the overall system.</p> <p>Upon reaching such a rate limit, the endpoints return HTTP Status 429 - Too Many Requests.</p> <p>The system will accept further requests once existing in-flight requests are completed.</p> 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ncentral

import (
	"encoding/json"
)

// checks if the UserRoleDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserRoleDetails{}

// UserRoleDetails Represents the response for a user role. It provides details about the role id, role name and description,  as well as extra information. 
type UserRoleDetails struct {
	// The user role id.
	RoleId *int32 `json:"roleId,omitempty"`
	// The organization unit id where the role is defined.
	OrgUnitId *int32 `json:"orgUnitId,omitempty"`
	// The user role name.
	RoleName *string `json:"roleName,omitempty"`
	// The description of a user role.
	RoleDescription *string `json:"roleDescription,omitempty"`
	// The user ids assigned to role.
	UserIds []int32 `json:"userIds,omitempty"`
	// Extra information.
	Extra map[string]map[string]interface{} `json:"_extra,omitempty"`
}

// NewUserRoleDetails instantiates a new UserRoleDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserRoleDetails() *UserRoleDetails {
	this := UserRoleDetails{}
	return &this
}

// NewUserRoleDetailsWithDefaults instantiates a new UserRoleDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserRoleDetailsWithDefaults() *UserRoleDetails {
	this := UserRoleDetails{}
	return &this
}

// GetRoleId returns the RoleId field value if set, zero value otherwise.
func (o *UserRoleDetails) GetRoleId() int32 {
	if o == nil || IsNil(o.RoleId) {
		var ret int32
		return ret
	}
	return *o.RoleId
}

// GetRoleIdOk returns a tuple with the RoleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRoleDetails) GetRoleIdOk() (*int32, bool) {
	if o == nil || IsNil(o.RoleId) {
		return nil, false
	}
	return o.RoleId, true
}

// HasRoleId returns a boolean if a field has been set.
func (o *UserRoleDetails) HasRoleId() bool {
	if o != nil && !IsNil(o.RoleId) {
		return true
	}

	return false
}

// SetRoleId gets a reference to the given int32 and assigns it to the RoleId field.
func (o *UserRoleDetails) SetRoleId(v int32) {
	o.RoleId = &v
}

// GetOrgUnitId returns the OrgUnitId field value if set, zero value otherwise.
func (o *UserRoleDetails) GetOrgUnitId() int32 {
	if o == nil || IsNil(o.OrgUnitId) {
		var ret int32
		return ret
	}
	return *o.OrgUnitId
}

// GetOrgUnitIdOk returns a tuple with the OrgUnitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRoleDetails) GetOrgUnitIdOk() (*int32, bool) {
	if o == nil || IsNil(o.OrgUnitId) {
		return nil, false
	}
	return o.OrgUnitId, true
}

// HasOrgUnitId returns a boolean if a field has been set.
func (o *UserRoleDetails) HasOrgUnitId() bool {
	if o != nil && !IsNil(o.OrgUnitId) {
		return true
	}

	return false
}

// SetOrgUnitId gets a reference to the given int32 and assigns it to the OrgUnitId field.
func (o *UserRoleDetails) SetOrgUnitId(v int32) {
	o.OrgUnitId = &v
}

// GetRoleName returns the RoleName field value if set, zero value otherwise.
func (o *UserRoleDetails) GetRoleName() string {
	if o == nil || IsNil(o.RoleName) {
		var ret string
		return ret
	}
	return *o.RoleName
}

// GetRoleNameOk returns a tuple with the RoleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRoleDetails) GetRoleNameOk() (*string, bool) {
	if o == nil || IsNil(o.RoleName) {
		return nil, false
	}
	return o.RoleName, true
}

// HasRoleName returns a boolean if a field has been set.
func (o *UserRoleDetails) HasRoleName() bool {
	if o != nil && !IsNil(o.RoleName) {
		return true
	}

	return false
}

// SetRoleName gets a reference to the given string and assigns it to the RoleName field.
func (o *UserRoleDetails) SetRoleName(v string) {
	o.RoleName = &v
}

// GetRoleDescription returns the RoleDescription field value if set, zero value otherwise.
func (o *UserRoleDetails) GetRoleDescription() string {
	if o == nil || IsNil(o.RoleDescription) {
		var ret string
		return ret
	}
	return *o.RoleDescription
}

// GetRoleDescriptionOk returns a tuple with the RoleDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRoleDetails) GetRoleDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.RoleDescription) {
		return nil, false
	}
	return o.RoleDescription, true
}

// HasRoleDescription returns a boolean if a field has been set.
func (o *UserRoleDetails) HasRoleDescription() bool {
	if o != nil && !IsNil(o.RoleDescription) {
		return true
	}

	return false
}

// SetRoleDescription gets a reference to the given string and assigns it to the RoleDescription field.
func (o *UserRoleDetails) SetRoleDescription(v string) {
	o.RoleDescription = &v
}

// GetUserIds returns the UserIds field value if set, zero value otherwise.
func (o *UserRoleDetails) GetUserIds() []int32 {
	if o == nil || IsNil(o.UserIds) {
		var ret []int32
		return ret
	}
	return o.UserIds
}

// GetUserIdsOk returns a tuple with the UserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRoleDetails) GetUserIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.UserIds) {
		return nil, false
	}
	return o.UserIds, true
}

// HasUserIds returns a boolean if a field has been set.
func (o *UserRoleDetails) HasUserIds() bool {
	if o != nil && !IsNil(o.UserIds) {
		return true
	}

	return false
}

// SetUserIds gets a reference to the given []int32 and assigns it to the UserIds field.
func (o *UserRoleDetails) SetUserIds(v []int32) {
	o.UserIds = v
}

// GetExtra returns the Extra field value if set, zero value otherwise.
func (o *UserRoleDetails) GetExtra() map[string]map[string]interface{} {
	if o == nil || IsNil(o.Extra) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Extra
}

// GetExtraOk returns a tuple with the Extra field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRoleDetails) GetExtraOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Extra) {
		return map[string]map[string]interface{}{}, false
	}
	return o.Extra, true
}

// HasExtra returns a boolean if a field has been set.
func (o *UserRoleDetails) HasExtra() bool {
	if o != nil && !IsNil(o.Extra) {
		return true
	}

	return false
}

// SetExtra gets a reference to the given map[string]map[string]interface{} and assigns it to the Extra field.
func (o *UserRoleDetails) SetExtra(v map[string]map[string]interface{}) {
	o.Extra = v
}

func (o UserRoleDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserRoleDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RoleId) {
		toSerialize["roleId"] = o.RoleId
	}
	if !IsNil(o.OrgUnitId) {
		toSerialize["orgUnitId"] = o.OrgUnitId
	}
	if !IsNil(o.RoleName) {
		toSerialize["roleName"] = o.RoleName
	}
	if !IsNil(o.RoleDescription) {
		toSerialize["roleDescription"] = o.RoleDescription
	}
	if !IsNil(o.UserIds) {
		toSerialize["userIds"] = o.UserIds
	}
	if !IsNil(o.Extra) {
		toSerialize["_extra"] = o.Extra
	}
	return toSerialize, nil
}

type NullableUserRoleDetails struct {
	value *UserRoleDetails
	isSet bool
}

func (v NullableUserRoleDetails) Get() *UserRoleDetails {
	return v.value
}

func (v *NullableUserRoleDetails) Set(val *UserRoleDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableUserRoleDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableUserRoleDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserRoleDetails(val *UserRoleDetails) *NullableUserRoleDetails {
	return &NullableUserRoleDetails{value: val, isSet: true}
}

func (v NullableUserRoleDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserRoleDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


