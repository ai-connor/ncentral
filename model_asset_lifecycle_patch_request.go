/*
N-central API-Service

<h3>API Access</h3> <p>In order to use the API-Service endpoints, ensure the following prerequisites are met:</p> <ol>     <li>User is created in N-central with appropriate permissions and configuration         (roles, access groups, MFA disabled, 2FA disabled).</li>     <li>API access is set up in N-central by having a JWT         (Json Web Token, referred to as \"N-central User-API Token\") generated,         acting as the permanent secret solely used for fetching access and refresh tokens.</li> </ol> <p>To access the API-Service endpoints, the JWT must first be exchanged with access and refresh tokens:</p> <ul>     <li>         <p><b>Using Swagger UI:</b></p>         <ol>             <li>Click on the <b>\"Authorize\"</b> button and enter the JWT into the value field                 under <b>\"N-central User-API Token (JWT)\"</b>, then navigate to                 the <code>/api/auth/authenticate</code> endpoint, click <b>\"Try it out\"</b>                 and then <b>\"Execute\"</b>.                 <br/>The new “Access Token” and “Refresh Token” fields will be available in the “Server Response”                 section below. Note that the expiry is 3600s ( 1h ). Copy the value of the access token.</li>             <li>Click on the <b>lock icon</b> to the right of any endpoint                 (or the <b>\"Authorize\"</b> button at the top), enter the access token in the                 <b>\"API-Access Token\"</b> field and click <b>\"Authorize\"</b>.</li>             <li>To call an API-Service endpoint, navigate to it, click <b>\"Try it out\"</b> button and             then <b>\"Execute\"</b>. If the steps above were successful, the access token is included in requests             automatically.</li>         </ol>     </li>     <li>         <p><b>Using a different HTTP client:</b></p>         <ol>             <li>Call the <code>/api/auth/authenticate</code> endpoint.                 The JWT token must be specified under the <code>Authorization</code> header,                 in the form <code>Bearer &lt;YOUR_JWT&gt;\"</code>.                 <br/>The access and refresh tokens are present in the response.</li>             <li>When calling API-Service endpoints, make sure to specify the <b>access token</b> in             the <code>Authorization</code> header as <code>Bearer &lt;ACCESS_TOKEN&gt;</code>.</li>         </ol>     </li> </ul> <h3>API Pagination & Sorting</h3> <p>Certain API-Service query endpoints support pagination and sorting through the use of query parameters.</p> <p><b>Pagination query parameters:</b></p> <ul>     <li>pageSize: number between 1 and 1000 specifying how many items to return for each page (if available).         If unspecified, the default is 50.</li>     <li>pageNumber: number specifying what page of data to retrieve, starting from 1 as the first page.         If unspecified, the default is 1.</li> </ul> <p>A paginated response contains several related fields, such as pageSize, pageNumber, itemCount, totalItems,     totalPages, _links (first, last, previous and next pages) and _warning (containing any warning messages,     if present).</p> <p><b>Sorting query parameters:</b></p> <ul>     <li>sortBy: the name of the field to sort the results by. If unspecified, no sorting is applied.</li>     <li>sortOrder: the case insensitive sorting direction supporting ASC/ASCENDING/NATURAL and         DESC/DESCENDING/REVERSE. If unspecified, the default is ASC.</li> </ul> <h3>API Rate Limiting</h3> <p>The API-Service endpoints are rate limited to ensure the stability, availability and performance of     the overall system.</p> <p>Upon reaching such a rate limit, the endpoints return HTTP Status 429 - Too Many Requests.</p> <p>The system will accept further requests once existing in-flight requests are completed.</p> 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ncentral

import (
	"encoding/json"
)

// checks if the AssetLifecyclePatchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssetLifecyclePatchRequest{}

// AssetLifecyclePatchRequest Asset Lifecycle Patch Request details
type AssetLifecyclePatchRequest struct {
	WarrantyExpiryDate *string `json:"warrantyExpiryDate,omitempty" validate:"regexp=(\\\\d{4}-\\\\d{2}-\\\\d{2}( \\\\d{2}:\\\\d{2}:\\\\d{2}(\\\\.\\\\d{1,9})?)?)?"`
	LeaseExpiryDate *string `json:"leaseExpiryDate,omitempty" validate:"regexp=(\\\\d{4}-\\\\d{2}-\\\\d{2}( \\\\d{2}:\\\\d{2}:\\\\d{2}(\\\\.\\\\d{1,9})?)?)?"`
	ExpectedReplacementDate *string `json:"expectedReplacementDate,omitempty" validate:"regexp=(\\\\d{4}-\\\\d{2}-\\\\d{2}( \\\\d{2}:\\\\d{2}:\\\\d{2}(\\\\.\\\\d{1,9})?)?)?"`
	PurchaseDate *string `json:"purchaseDate,omitempty" validate:"regexp=(\\\\d{4}-\\\\d{2}-\\\\d{2}( \\\\d{2}:\\\\d{2}:\\\\d{2}(\\\\.\\\\d{1,9})?)?)?"`
	Cost *float32 `json:"cost,omitempty"`
	Location *string `json:"location,omitempty"`
	AssetTag *string `json:"assetTag,omitempty"`
	Description *string `json:"description,omitempty"`
	UpdateWarrantyError *string `json:"updateWarrantyError,omitempty"`
}

// NewAssetLifecyclePatchRequest instantiates a new AssetLifecyclePatchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssetLifecyclePatchRequest() *AssetLifecyclePatchRequest {
	this := AssetLifecyclePatchRequest{}
	return &this
}

// NewAssetLifecyclePatchRequestWithDefaults instantiates a new AssetLifecyclePatchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssetLifecyclePatchRequestWithDefaults() *AssetLifecyclePatchRequest {
	this := AssetLifecyclePatchRequest{}
	return &this
}

// GetWarrantyExpiryDate returns the WarrantyExpiryDate field value if set, zero value otherwise.
func (o *AssetLifecyclePatchRequest) GetWarrantyExpiryDate() string {
	if o == nil || IsNil(o.WarrantyExpiryDate) {
		var ret string
		return ret
	}
	return *o.WarrantyExpiryDate
}

// GetWarrantyExpiryDateOk returns a tuple with the WarrantyExpiryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetLifecyclePatchRequest) GetWarrantyExpiryDateOk() (*string, bool) {
	if o == nil || IsNil(o.WarrantyExpiryDate) {
		return nil, false
	}
	return o.WarrantyExpiryDate, true
}

// HasWarrantyExpiryDate returns a boolean if a field has been set.
func (o *AssetLifecyclePatchRequest) HasWarrantyExpiryDate() bool {
	if o != nil && !IsNil(o.WarrantyExpiryDate) {
		return true
	}

	return false
}

// SetWarrantyExpiryDate gets a reference to the given string and assigns it to the WarrantyExpiryDate field.
func (o *AssetLifecyclePatchRequest) SetWarrantyExpiryDate(v string) {
	o.WarrantyExpiryDate = &v
}

// GetLeaseExpiryDate returns the LeaseExpiryDate field value if set, zero value otherwise.
func (o *AssetLifecyclePatchRequest) GetLeaseExpiryDate() string {
	if o == nil || IsNil(o.LeaseExpiryDate) {
		var ret string
		return ret
	}
	return *o.LeaseExpiryDate
}

// GetLeaseExpiryDateOk returns a tuple with the LeaseExpiryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetLifecyclePatchRequest) GetLeaseExpiryDateOk() (*string, bool) {
	if o == nil || IsNil(o.LeaseExpiryDate) {
		return nil, false
	}
	return o.LeaseExpiryDate, true
}

// HasLeaseExpiryDate returns a boolean if a field has been set.
func (o *AssetLifecyclePatchRequest) HasLeaseExpiryDate() bool {
	if o != nil && !IsNil(o.LeaseExpiryDate) {
		return true
	}

	return false
}

// SetLeaseExpiryDate gets a reference to the given string and assigns it to the LeaseExpiryDate field.
func (o *AssetLifecyclePatchRequest) SetLeaseExpiryDate(v string) {
	o.LeaseExpiryDate = &v
}

// GetExpectedReplacementDate returns the ExpectedReplacementDate field value if set, zero value otherwise.
func (o *AssetLifecyclePatchRequest) GetExpectedReplacementDate() string {
	if o == nil || IsNil(o.ExpectedReplacementDate) {
		var ret string
		return ret
	}
	return *o.ExpectedReplacementDate
}

// GetExpectedReplacementDateOk returns a tuple with the ExpectedReplacementDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetLifecyclePatchRequest) GetExpectedReplacementDateOk() (*string, bool) {
	if o == nil || IsNil(o.ExpectedReplacementDate) {
		return nil, false
	}
	return o.ExpectedReplacementDate, true
}

// HasExpectedReplacementDate returns a boolean if a field has been set.
func (o *AssetLifecyclePatchRequest) HasExpectedReplacementDate() bool {
	if o != nil && !IsNil(o.ExpectedReplacementDate) {
		return true
	}

	return false
}

// SetExpectedReplacementDate gets a reference to the given string and assigns it to the ExpectedReplacementDate field.
func (o *AssetLifecyclePatchRequest) SetExpectedReplacementDate(v string) {
	o.ExpectedReplacementDate = &v
}

// GetPurchaseDate returns the PurchaseDate field value if set, zero value otherwise.
func (o *AssetLifecyclePatchRequest) GetPurchaseDate() string {
	if o == nil || IsNil(o.PurchaseDate) {
		var ret string
		return ret
	}
	return *o.PurchaseDate
}

// GetPurchaseDateOk returns a tuple with the PurchaseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetLifecyclePatchRequest) GetPurchaseDateOk() (*string, bool) {
	if o == nil || IsNil(o.PurchaseDate) {
		return nil, false
	}
	return o.PurchaseDate, true
}

// HasPurchaseDate returns a boolean if a field has been set.
func (o *AssetLifecyclePatchRequest) HasPurchaseDate() bool {
	if o != nil && !IsNil(o.PurchaseDate) {
		return true
	}

	return false
}

// SetPurchaseDate gets a reference to the given string and assigns it to the PurchaseDate field.
func (o *AssetLifecyclePatchRequest) SetPurchaseDate(v string) {
	o.PurchaseDate = &v
}

// GetCost returns the Cost field value if set, zero value otherwise.
func (o *AssetLifecyclePatchRequest) GetCost() float32 {
	if o == nil || IsNil(o.Cost) {
		var ret float32
		return ret
	}
	return *o.Cost
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetLifecyclePatchRequest) GetCostOk() (*float32, bool) {
	if o == nil || IsNil(o.Cost) {
		return nil, false
	}
	return o.Cost, true
}

// HasCost returns a boolean if a field has been set.
func (o *AssetLifecyclePatchRequest) HasCost() bool {
	if o != nil && !IsNil(o.Cost) {
		return true
	}

	return false
}

// SetCost gets a reference to the given float32 and assigns it to the Cost field.
func (o *AssetLifecyclePatchRequest) SetCost(v float32) {
	o.Cost = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *AssetLifecyclePatchRequest) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetLifecyclePatchRequest) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *AssetLifecyclePatchRequest) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *AssetLifecyclePatchRequest) SetLocation(v string) {
	o.Location = &v
}

// GetAssetTag returns the AssetTag field value if set, zero value otherwise.
func (o *AssetLifecyclePatchRequest) GetAssetTag() string {
	if o == nil || IsNil(o.AssetTag) {
		var ret string
		return ret
	}
	return *o.AssetTag
}

// GetAssetTagOk returns a tuple with the AssetTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetLifecyclePatchRequest) GetAssetTagOk() (*string, bool) {
	if o == nil || IsNil(o.AssetTag) {
		return nil, false
	}
	return o.AssetTag, true
}

// HasAssetTag returns a boolean if a field has been set.
func (o *AssetLifecyclePatchRequest) HasAssetTag() bool {
	if o != nil && !IsNil(o.AssetTag) {
		return true
	}

	return false
}

// SetAssetTag gets a reference to the given string and assigns it to the AssetTag field.
func (o *AssetLifecyclePatchRequest) SetAssetTag(v string) {
	o.AssetTag = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AssetLifecyclePatchRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetLifecyclePatchRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AssetLifecyclePatchRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AssetLifecyclePatchRequest) SetDescription(v string) {
	o.Description = &v
}

// GetUpdateWarrantyError returns the UpdateWarrantyError field value if set, zero value otherwise.
func (o *AssetLifecyclePatchRequest) GetUpdateWarrantyError() string {
	if o == nil || IsNil(o.UpdateWarrantyError) {
		var ret string
		return ret
	}
	return *o.UpdateWarrantyError
}

// GetUpdateWarrantyErrorOk returns a tuple with the UpdateWarrantyError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetLifecyclePatchRequest) GetUpdateWarrantyErrorOk() (*string, bool) {
	if o == nil || IsNil(o.UpdateWarrantyError) {
		return nil, false
	}
	return o.UpdateWarrantyError, true
}

// HasUpdateWarrantyError returns a boolean if a field has been set.
func (o *AssetLifecyclePatchRequest) HasUpdateWarrantyError() bool {
	if o != nil && !IsNil(o.UpdateWarrantyError) {
		return true
	}

	return false
}

// SetUpdateWarrantyError gets a reference to the given string and assigns it to the UpdateWarrantyError field.
func (o *AssetLifecyclePatchRequest) SetUpdateWarrantyError(v string) {
	o.UpdateWarrantyError = &v
}

func (o AssetLifecyclePatchRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssetLifecyclePatchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.WarrantyExpiryDate) {
		toSerialize["warrantyExpiryDate"] = o.WarrantyExpiryDate
	}
	if !IsNil(o.LeaseExpiryDate) {
		toSerialize["leaseExpiryDate"] = o.LeaseExpiryDate
	}
	if !IsNil(o.ExpectedReplacementDate) {
		toSerialize["expectedReplacementDate"] = o.ExpectedReplacementDate
	}
	if !IsNil(o.PurchaseDate) {
		toSerialize["purchaseDate"] = o.PurchaseDate
	}
	if !IsNil(o.Cost) {
		toSerialize["cost"] = o.Cost
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.AssetTag) {
		toSerialize["assetTag"] = o.AssetTag
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.UpdateWarrantyError) {
		toSerialize["updateWarrantyError"] = o.UpdateWarrantyError
	}
	return toSerialize, nil
}

type NullableAssetLifecyclePatchRequest struct {
	value *AssetLifecyclePatchRequest
	isSet bool
}

func (v NullableAssetLifecyclePatchRequest) Get() *AssetLifecyclePatchRequest {
	return v.value
}

func (v *NullableAssetLifecyclePatchRequest) Set(val *AssetLifecyclePatchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetLifecyclePatchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetLifecyclePatchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetLifecyclePatchRequest(val *AssetLifecyclePatchRequest) *NullableAssetLifecyclePatchRequest {
	return &NullableAssetLifecyclePatchRequest{value: val, isSet: true}
}

func (v NullableAssetLifecyclePatchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetLifecyclePatchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


