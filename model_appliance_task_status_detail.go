/*
N-central API-Service

<h3>API Access</h3> <p>In order to use the API-Service endpoints, ensure the following prerequisites are met:</p> <ol>     <li>User is created in N-central with appropriate permissions and configuration         (roles, access groups, MFA disabled, 2FA disabled).</li>     <li>API access is set up in N-central by having a JWT         (Json Web Token, referred to as \"N-central User-API Token\") generated,         acting as the permanent secret solely used for fetching access and refresh tokens.</li> </ol> <p>To access the API-Service endpoints, the JWT must first be exchanged with access and refresh tokens:</p> <ul>     <li>         <p><b>Using Swagger UI:</b></p>         <ol>             <li>Click on the <b>\"Authorize\"</b> button and enter the JWT into the value field                 under <b>\"N-central User-API Token (JWT)\"</b>, then navigate to                 the <code>/api/auth/authenticate</code> endpoint, click <b>\"Try it out\"</b>                 and then <b>\"Execute\"</b>.                 <br/>The new “Access Token” and “Refresh Token” fields will be available in the “Server Response”                 section below. Note that the expiry is 3600s ( 1h ). Copy the value of the access token.</li>             <li>Click on the <b>lock icon</b> to the right of any endpoint                 (or the <b>\"Authorize\"</b> button at the top), enter the access token in the                 <b>\"API-Access Token\"</b> field and click <b>\"Authorize\"</b>.</li>             <li>To call an API-Service endpoint, navigate to it, click <b>\"Try it out\"</b> button and             then <b>\"Execute\"</b>. If the steps above were successful, the access token is included in requests             automatically.</li>         </ol>     </li>     <li>         <p><b>Using a different HTTP client:</b></p>         <ol>             <li>Call the <code>/api/auth/authenticate</code> endpoint.                 The JWT token must be specified under the <code>Authorization</code> header,                 in the form <code>Bearer &lt;YOUR_JWT&gt;\"</code>.                 <br/>The access and refresh tokens are present in the response.</li>             <li>When calling API-Service endpoints, make sure to specify the <b>access token</b> in             the <code>Authorization</code> header as <code>Bearer &lt;ACCESS_TOKEN&gt;</code>.</li>         </ol>     </li> </ul> <h3>API Pagination & Sorting</h3> <p>Certain API-Service query endpoints support pagination and sorting through the use of query parameters.</p> <p><b>Pagination query parameters:</b></p> <ul>     <li>pageSize: number between 1 and 1000 specifying how many items to return for each page (if available).         If unspecified, the default is 50.</li>     <li>pageNumber: number specifying what page of data to retrieve, starting from 1 as the first page.         If unspecified, the default is 1.</li> </ul> <p>A paginated response contains several related fields, such as pageSize, pageNumber, itemCount, totalItems,     totalPages, _links (first, last, previous and next pages) and _warning (containing any warning messages,     if present).</p> <p><b>Sorting query parameters:</b></p> <ul>     <li>sortBy: the name of the field to sort the results by. If unspecified, no sorting is applied.</li>     <li>sortOrder: the case insensitive sorting direction supporting ASC/ASCENDING/NATURAL and         DESC/DESCENDING/REVERSE. If unspecified, the default is ASC.</li> </ul> <h3>API Rate Limiting</h3> <p>The API-Service endpoints are rate limited to ensure the stability, availability and performance of     the overall system.</p> <p>Upon reaching such a rate limit, the endpoints return HTTP Status 429 - Too Many Requests.</p> <p>The system will accept further requests once existing in-flight requests are completed.</p> 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ncentral

import (
	"encoding/json"
)

// checks if the ApplianceTaskStatusDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplianceTaskStatusDetail{}

// ApplianceTaskStatusDetail struct for ApplianceTaskStatusDetail
type ApplianceTaskStatusDetail struct {
	ScanDetailId *int32 `json:"scanDetailId,omitempty"`
	DetailName *string `json:"detailName,omitempty"`
	Description *string `json:"description,omitempty"`
	DetailValue *string `json:"detailValue,omitempty"`
	State *string `json:"state,omitempty"`
	MonitoringType *string `json:"monitoringType,omitempty"`
	Thresholds []ApplianceTaskThresholdBasic `json:"thresholds,omitempty"`
}

// NewApplianceTaskStatusDetail instantiates a new ApplianceTaskStatusDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplianceTaskStatusDetail() *ApplianceTaskStatusDetail {
	this := ApplianceTaskStatusDetail{}
	return &this
}

// NewApplianceTaskStatusDetailWithDefaults instantiates a new ApplianceTaskStatusDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplianceTaskStatusDetailWithDefaults() *ApplianceTaskStatusDetail {
	this := ApplianceTaskStatusDetail{}
	return &this
}

// GetScanDetailId returns the ScanDetailId field value if set, zero value otherwise.
func (o *ApplianceTaskStatusDetail) GetScanDetailId() int32 {
	if o == nil || IsNil(o.ScanDetailId) {
		var ret int32
		return ret
	}
	return *o.ScanDetailId
}

// GetScanDetailIdOk returns a tuple with the ScanDetailId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceTaskStatusDetail) GetScanDetailIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ScanDetailId) {
		return nil, false
	}
	return o.ScanDetailId, true
}

// HasScanDetailId returns a boolean if a field has been set.
func (o *ApplianceTaskStatusDetail) HasScanDetailId() bool {
	if o != nil && !IsNil(o.ScanDetailId) {
		return true
	}

	return false
}

// SetScanDetailId gets a reference to the given int32 and assigns it to the ScanDetailId field.
func (o *ApplianceTaskStatusDetail) SetScanDetailId(v int32) {
	o.ScanDetailId = &v
}

// GetDetailName returns the DetailName field value if set, zero value otherwise.
func (o *ApplianceTaskStatusDetail) GetDetailName() string {
	if o == nil || IsNil(o.DetailName) {
		var ret string
		return ret
	}
	return *o.DetailName
}

// GetDetailNameOk returns a tuple with the DetailName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceTaskStatusDetail) GetDetailNameOk() (*string, bool) {
	if o == nil || IsNil(o.DetailName) {
		return nil, false
	}
	return o.DetailName, true
}

// HasDetailName returns a boolean if a field has been set.
func (o *ApplianceTaskStatusDetail) HasDetailName() bool {
	if o != nil && !IsNil(o.DetailName) {
		return true
	}

	return false
}

// SetDetailName gets a reference to the given string and assigns it to the DetailName field.
func (o *ApplianceTaskStatusDetail) SetDetailName(v string) {
	o.DetailName = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ApplianceTaskStatusDetail) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceTaskStatusDetail) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ApplianceTaskStatusDetail) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ApplianceTaskStatusDetail) SetDescription(v string) {
	o.Description = &v
}

// GetDetailValue returns the DetailValue field value if set, zero value otherwise.
func (o *ApplianceTaskStatusDetail) GetDetailValue() string {
	if o == nil || IsNil(o.DetailValue) {
		var ret string
		return ret
	}
	return *o.DetailValue
}

// GetDetailValueOk returns a tuple with the DetailValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceTaskStatusDetail) GetDetailValueOk() (*string, bool) {
	if o == nil || IsNil(o.DetailValue) {
		return nil, false
	}
	return o.DetailValue, true
}

// HasDetailValue returns a boolean if a field has been set.
func (o *ApplianceTaskStatusDetail) HasDetailValue() bool {
	if o != nil && !IsNil(o.DetailValue) {
		return true
	}

	return false
}

// SetDetailValue gets a reference to the given string and assigns it to the DetailValue field.
func (o *ApplianceTaskStatusDetail) SetDetailValue(v string) {
	o.DetailValue = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *ApplianceTaskStatusDetail) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceTaskStatusDetail) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *ApplianceTaskStatusDetail) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *ApplianceTaskStatusDetail) SetState(v string) {
	o.State = &v
}

// GetMonitoringType returns the MonitoringType field value if set, zero value otherwise.
func (o *ApplianceTaskStatusDetail) GetMonitoringType() string {
	if o == nil || IsNil(o.MonitoringType) {
		var ret string
		return ret
	}
	return *o.MonitoringType
}

// GetMonitoringTypeOk returns a tuple with the MonitoringType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceTaskStatusDetail) GetMonitoringTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MonitoringType) {
		return nil, false
	}
	return o.MonitoringType, true
}

// HasMonitoringType returns a boolean if a field has been set.
func (o *ApplianceTaskStatusDetail) HasMonitoringType() bool {
	if o != nil && !IsNil(o.MonitoringType) {
		return true
	}

	return false
}

// SetMonitoringType gets a reference to the given string and assigns it to the MonitoringType field.
func (o *ApplianceTaskStatusDetail) SetMonitoringType(v string) {
	o.MonitoringType = &v
}

// GetThresholds returns the Thresholds field value if set, zero value otherwise.
func (o *ApplianceTaskStatusDetail) GetThresholds() []ApplianceTaskThresholdBasic {
	if o == nil || IsNil(o.Thresholds) {
		var ret []ApplianceTaskThresholdBasic
		return ret
	}
	return o.Thresholds
}

// GetThresholdsOk returns a tuple with the Thresholds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceTaskStatusDetail) GetThresholdsOk() ([]ApplianceTaskThresholdBasic, bool) {
	if o == nil || IsNil(o.Thresholds) {
		return nil, false
	}
	return o.Thresholds, true
}

// HasThresholds returns a boolean if a field has been set.
func (o *ApplianceTaskStatusDetail) HasThresholds() bool {
	if o != nil && !IsNil(o.Thresholds) {
		return true
	}

	return false
}

// SetThresholds gets a reference to the given []ApplianceTaskThresholdBasic and assigns it to the Thresholds field.
func (o *ApplianceTaskStatusDetail) SetThresholds(v []ApplianceTaskThresholdBasic) {
	o.Thresholds = v
}

func (o ApplianceTaskStatusDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplianceTaskStatusDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ScanDetailId) {
		toSerialize["scanDetailId"] = o.ScanDetailId
	}
	if !IsNil(o.DetailName) {
		toSerialize["detailName"] = o.DetailName
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DetailValue) {
		toSerialize["detailValue"] = o.DetailValue
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.MonitoringType) {
		toSerialize["monitoringType"] = o.MonitoringType
	}
	if !IsNil(o.Thresholds) {
		toSerialize["thresholds"] = o.Thresholds
	}
	return toSerialize, nil
}

type NullableApplianceTaskStatusDetail struct {
	value *ApplianceTaskStatusDetail
	isSet bool
}

func (v NullableApplianceTaskStatusDetail) Get() *ApplianceTaskStatusDetail {
	return v.value
}

func (v *NullableApplianceTaskStatusDetail) Set(val *ApplianceTaskStatusDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableApplianceTaskStatusDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableApplianceTaskStatusDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplianceTaskStatusDetail(val *ApplianceTaskStatusDetail) *NullableApplianceTaskStatusDetail {
	return &NullableApplianceTaskStatusDetail{value: val, isSet: true}
}

func (v NullableApplianceTaskStatusDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplianceTaskStatusDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


