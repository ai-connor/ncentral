/*
N-central API-Service

<h3>API Access</h3> <p>In order to use the API-Service endpoints, ensure the following prerequisites are met:</p> <ol>     <li>User is created in N-central with appropriate permissions and configuration         (roles, access groups, MFA disabled, 2FA disabled).</li>     <li>API access is set up in N-central by having a JWT         (Json Web Token, referred to as \"N-central User-API Token\") generated,         acting as the permanent secret solely used for fetching access and refresh tokens.</li> </ol> <p>To access the API-Service endpoints, the JWT must first be exchanged with access and refresh tokens:</p> <ul>     <li>         <p><b>Using Swagger UI:</b></p>         <ol>             <li>Click on the <b>\"Authorize\"</b> button and enter the JWT into the value field                 under <b>\"N-central User-API Token (JWT)\"</b>, then navigate to                 the <code>/api/auth/authenticate</code> endpoint, click <b>\"Try it out\"</b>                 and then <b>\"Execute\"</b>.                 <br/>The new “Access Token” and “Refresh Token” fields will be available in the “Server Response”                 section below. Note that the expiry is 3600s ( 1h ). Copy the value of the access token.</li>             <li>Click on the <b>lock icon</b> to the right of any endpoint                 (or the <b>\"Authorize\"</b> button at the top), enter the access token in the                 <b>\"API-Access Token\"</b> field and click <b>\"Authorize\"</b>.</li>             <li>To call an API-Service endpoint, navigate to it, click <b>\"Try it out\"</b> button and             then <b>\"Execute\"</b>. If the steps above were successful, the access token is included in requests             automatically.</li>         </ol>     </li>     <li>         <p><b>Using a different HTTP client:</b></p>         <ol>             <li>Call the <code>/api/auth/authenticate</code> endpoint.                 The JWT token must be specified under the <code>Authorization</code> header,                 in the form <code>Bearer &lt;YOUR_JWT&gt;\"</code>.                 <br/>The access and refresh tokens are present in the response.</li>             <li>When calling API-Service endpoints, make sure to specify the <b>access token</b> in             the <code>Authorization</code> header as <code>Bearer &lt;ACCESS_TOKEN&gt;</code>.</li>         </ol>     </li> </ul> <h3>API Pagination & Sorting</h3> <p>Certain API-Service query endpoints support pagination and sorting through the use of query parameters.</p> <p><b>Pagination query parameters:</b></p> <ul>     <li>pageSize: number between 1 and 1000 specifying how many items to return for each page (if available).         If unspecified, the default is 50.</li>     <li>pageNumber: number specifying what page of data to retrieve, starting from 1 as the first page.         If unspecified, the default is 1.</li> </ul> <p>A paginated response contains several related fields, such as pageSize, pageNumber, itemCount, totalItems,     totalPages, _links (first, last, previous and next pages) and _warning (containing any warning messages,     if present).</p> <p><b>Sorting query parameters:</b></p> <ul>     <li>sortBy: the name of the field to sort the results by. If unspecified, no sorting is applied.</li>     <li>sortOrder: the case insensitive sorting direction supporting ASC/ASCENDING/NATURAL and         DESC/DESCENDING/REVERSE. If unspecified, the default is ASC.</li> </ul> <h3>API Rate Limiting</h3> <p>The API-Service endpoints are rate limited to ensure the stability, availability and performance of     the overall system.</p> <p>Upon reaching such a rate limit, the endpoints return HTTP Status 429 - Too Many Requests.</p> <p>The system will accept further requests once existing in-flight requests are completed.</p> 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ncentral

import (
	"encoding/json"
)

// checks if the User type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &User{}

// User Represents the response for a user inside user list endpoint. It provides details about the user.
type User struct {
	// The first name of the user.
	FirstName *string `json:"firstName,omitempty"`
	// The last name of the user.
	LastName *string `json:"lastName,omitempty"`
	// Indicates if the user is API only.
	ApiOnlyUser *bool `json:"apiOnlyUser,omitempty"`
	// A description of the user.
	Description *string `json:"description,omitempty"`
	// Indicates if the user is enabled.
	IsEnabled *bool `json:"isEnabled,omitempty"`
	// Indicates if the user is managed through LDAP.
	IsLdap *bool `json:"isLdap,omitempty"`
	// Indicates if the user's account is locked.
	IsLocked *bool `json:"isLocked,omitempty"`
	// Indicates if the user is currently logged in.
	LoggedInUser *bool `json:"loggedInUser,omitempty"`
	// Indicates if the user has read-only access.
	ReadOnly *bool `json:"readOnly,omitempty"`
	// Indicates if the user is a support user.
	SupportUser *bool `json:"supportUser,omitempty"`
	// The unique identifier of the user.
	UserId *int32 `json:"userId,omitempty"`
	// The email address or username of the user.
	UserName *string `json:"userName,omitempty"`
	// A list of access group ids associated with the user.
	AccessGroupIds []int32 `json:"accessGroupIds,omitempty"`
	// The current Single Sign-On provider for the user, if any.
	CurrentSsoProvider *string `json:"currentSsoProvider,omitempty"`
	// The hierarchy of customer units associated with the user.
	CustomerTree []string `json:"customerTree,omitempty"`
	// The full name of the user.
	FullName *string `json:"fullName,omitempty"`
	// A list of role ids assigned to the user.
	RoleIds []int32 `json:"roleIds,omitempty"`
	// Indicates if two-factor authentication is enabled for the user.
	TwoFactorEnabled *bool `json:"twoFactorEnabled,omitempty"`
}

// NewUser instantiates a new User object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUser() *User {
	this := User{}
	return &this
}

// NewUserWithDefaults instantiates a new User object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserWithDefaults() *User {
	this := User{}
	return &this
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *User) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *User) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *User) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *User) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *User) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *User) SetLastName(v string) {
	o.LastName = &v
}

// GetApiOnlyUser returns the ApiOnlyUser field value if set, zero value otherwise.
func (o *User) GetApiOnlyUser() bool {
	if o == nil || IsNil(o.ApiOnlyUser) {
		var ret bool
		return ret
	}
	return *o.ApiOnlyUser
}

// GetApiOnlyUserOk returns a tuple with the ApiOnlyUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetApiOnlyUserOk() (*bool, bool) {
	if o == nil || IsNil(o.ApiOnlyUser) {
		return nil, false
	}
	return o.ApiOnlyUser, true
}

// HasApiOnlyUser returns a boolean if a field has been set.
func (o *User) HasApiOnlyUser() bool {
	if o != nil && !IsNil(o.ApiOnlyUser) {
		return true
	}

	return false
}

// SetApiOnlyUser gets a reference to the given bool and assigns it to the ApiOnlyUser field.
func (o *User) SetApiOnlyUser(v bool) {
	o.ApiOnlyUser = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *User) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *User) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *User) SetDescription(v string) {
	o.Description = &v
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *User) GetIsEnabled() bool {
	if o == nil || IsNil(o.IsEnabled) {
		var ret bool
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetIsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEnabled) {
		return nil, false
	}
	return o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *User) HasIsEnabled() bool {
	if o != nil && !IsNil(o.IsEnabled) {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given bool and assigns it to the IsEnabled field.
func (o *User) SetIsEnabled(v bool) {
	o.IsEnabled = &v
}

// GetIsLdap returns the IsLdap field value if set, zero value otherwise.
func (o *User) GetIsLdap() bool {
	if o == nil || IsNil(o.IsLdap) {
		var ret bool
		return ret
	}
	return *o.IsLdap
}

// GetIsLdapOk returns a tuple with the IsLdap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetIsLdapOk() (*bool, bool) {
	if o == nil || IsNil(o.IsLdap) {
		return nil, false
	}
	return o.IsLdap, true
}

// HasIsLdap returns a boolean if a field has been set.
func (o *User) HasIsLdap() bool {
	if o != nil && !IsNil(o.IsLdap) {
		return true
	}

	return false
}

// SetIsLdap gets a reference to the given bool and assigns it to the IsLdap field.
func (o *User) SetIsLdap(v bool) {
	o.IsLdap = &v
}

// GetIsLocked returns the IsLocked field value if set, zero value otherwise.
func (o *User) GetIsLocked() bool {
	if o == nil || IsNil(o.IsLocked) {
		var ret bool
		return ret
	}
	return *o.IsLocked
}

// GetIsLockedOk returns a tuple with the IsLocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetIsLockedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsLocked) {
		return nil, false
	}
	return o.IsLocked, true
}

// HasIsLocked returns a boolean if a field has been set.
func (o *User) HasIsLocked() bool {
	if o != nil && !IsNil(o.IsLocked) {
		return true
	}

	return false
}

// SetIsLocked gets a reference to the given bool and assigns it to the IsLocked field.
func (o *User) SetIsLocked(v bool) {
	o.IsLocked = &v
}

// GetLoggedInUser returns the LoggedInUser field value if set, zero value otherwise.
func (o *User) GetLoggedInUser() bool {
	if o == nil || IsNil(o.LoggedInUser) {
		var ret bool
		return ret
	}
	return *o.LoggedInUser
}

// GetLoggedInUserOk returns a tuple with the LoggedInUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetLoggedInUserOk() (*bool, bool) {
	if o == nil || IsNil(o.LoggedInUser) {
		return nil, false
	}
	return o.LoggedInUser, true
}

// HasLoggedInUser returns a boolean if a field has been set.
func (o *User) HasLoggedInUser() bool {
	if o != nil && !IsNil(o.LoggedInUser) {
		return true
	}

	return false
}

// SetLoggedInUser gets a reference to the given bool and assigns it to the LoggedInUser field.
func (o *User) SetLoggedInUser(v bool) {
	o.LoggedInUser = &v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *User) GetReadOnly() bool {
	if o == nil || IsNil(o.ReadOnly) {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetReadOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ReadOnly) {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *User) HasReadOnly() bool {
	if o != nil && !IsNil(o.ReadOnly) {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *User) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

// GetSupportUser returns the SupportUser field value if set, zero value otherwise.
func (o *User) GetSupportUser() bool {
	if o == nil || IsNil(o.SupportUser) {
		var ret bool
		return ret
	}
	return *o.SupportUser
}

// GetSupportUserOk returns a tuple with the SupportUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetSupportUserOk() (*bool, bool) {
	if o == nil || IsNil(o.SupportUser) {
		return nil, false
	}
	return o.SupportUser, true
}

// HasSupportUser returns a boolean if a field has been set.
func (o *User) HasSupportUser() bool {
	if o != nil && !IsNil(o.SupportUser) {
		return true
	}

	return false
}

// SetSupportUser gets a reference to the given bool and assigns it to the SupportUser field.
func (o *User) SetSupportUser(v bool) {
	o.SupportUser = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *User) GetUserId() int32 {
	if o == nil || IsNil(o.UserId) {
		var ret int32
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *User) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int32 and assigns it to the UserId field.
func (o *User) SetUserId(v int32) {
	o.UserId = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *User) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *User) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *User) SetUserName(v string) {
	o.UserName = &v
}

// GetAccessGroupIds returns the AccessGroupIds field value if set, zero value otherwise.
func (o *User) GetAccessGroupIds() []int32 {
	if o == nil || IsNil(o.AccessGroupIds) {
		var ret []int32
		return ret
	}
	return o.AccessGroupIds
}

// GetAccessGroupIdsOk returns a tuple with the AccessGroupIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetAccessGroupIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.AccessGroupIds) {
		return nil, false
	}
	return o.AccessGroupIds, true
}

// HasAccessGroupIds returns a boolean if a field has been set.
func (o *User) HasAccessGroupIds() bool {
	if o != nil && !IsNil(o.AccessGroupIds) {
		return true
	}

	return false
}

// SetAccessGroupIds gets a reference to the given []int32 and assigns it to the AccessGroupIds field.
func (o *User) SetAccessGroupIds(v []int32) {
	o.AccessGroupIds = v
}

// GetCurrentSsoProvider returns the CurrentSsoProvider field value if set, zero value otherwise.
func (o *User) GetCurrentSsoProvider() string {
	if o == nil || IsNil(o.CurrentSsoProvider) {
		var ret string
		return ret
	}
	return *o.CurrentSsoProvider
}

// GetCurrentSsoProviderOk returns a tuple with the CurrentSsoProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetCurrentSsoProviderOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentSsoProvider) {
		return nil, false
	}
	return o.CurrentSsoProvider, true
}

// HasCurrentSsoProvider returns a boolean if a field has been set.
func (o *User) HasCurrentSsoProvider() bool {
	if o != nil && !IsNil(o.CurrentSsoProvider) {
		return true
	}

	return false
}

// SetCurrentSsoProvider gets a reference to the given string and assigns it to the CurrentSsoProvider field.
func (o *User) SetCurrentSsoProvider(v string) {
	o.CurrentSsoProvider = &v
}

// GetCustomerTree returns the CustomerTree field value if set, zero value otherwise.
func (o *User) GetCustomerTree() []string {
	if o == nil || IsNil(o.CustomerTree) {
		var ret []string
		return ret
	}
	return o.CustomerTree
}

// GetCustomerTreeOk returns a tuple with the CustomerTree field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetCustomerTreeOk() ([]string, bool) {
	if o == nil || IsNil(o.CustomerTree) {
		return nil, false
	}
	return o.CustomerTree, true
}

// HasCustomerTree returns a boolean if a field has been set.
func (o *User) HasCustomerTree() bool {
	if o != nil && !IsNil(o.CustomerTree) {
		return true
	}

	return false
}

// SetCustomerTree gets a reference to the given []string and assigns it to the CustomerTree field.
func (o *User) SetCustomerTree(v []string) {
	o.CustomerTree = v
}

// GetFullName returns the FullName field value if set, zero value otherwise.
func (o *User) GetFullName() string {
	if o == nil || IsNil(o.FullName) {
		var ret string
		return ret
	}
	return *o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetFullNameOk() (*string, bool) {
	if o == nil || IsNil(o.FullName) {
		return nil, false
	}
	return o.FullName, true
}

// HasFullName returns a boolean if a field has been set.
func (o *User) HasFullName() bool {
	if o != nil && !IsNil(o.FullName) {
		return true
	}

	return false
}

// SetFullName gets a reference to the given string and assigns it to the FullName field.
func (o *User) SetFullName(v string) {
	o.FullName = &v
}

// GetRoleIds returns the RoleIds field value if set, zero value otherwise.
func (o *User) GetRoleIds() []int32 {
	if o == nil || IsNil(o.RoleIds) {
		var ret []int32
		return ret
	}
	return o.RoleIds
}

// GetRoleIdsOk returns a tuple with the RoleIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetRoleIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.RoleIds) {
		return nil, false
	}
	return o.RoleIds, true
}

// HasRoleIds returns a boolean if a field has been set.
func (o *User) HasRoleIds() bool {
	if o != nil && !IsNil(o.RoleIds) {
		return true
	}

	return false
}

// SetRoleIds gets a reference to the given []int32 and assigns it to the RoleIds field.
func (o *User) SetRoleIds(v []int32) {
	o.RoleIds = v
}

// GetTwoFactorEnabled returns the TwoFactorEnabled field value if set, zero value otherwise.
func (o *User) GetTwoFactorEnabled() bool {
	if o == nil || IsNil(o.TwoFactorEnabled) {
		var ret bool
		return ret
	}
	return *o.TwoFactorEnabled
}

// GetTwoFactorEnabledOk returns a tuple with the TwoFactorEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetTwoFactorEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.TwoFactorEnabled) {
		return nil, false
	}
	return o.TwoFactorEnabled, true
}

// HasTwoFactorEnabled returns a boolean if a field has been set.
func (o *User) HasTwoFactorEnabled() bool {
	if o != nil && !IsNil(o.TwoFactorEnabled) {
		return true
	}

	return false
}

// SetTwoFactorEnabled gets a reference to the given bool and assigns it to the TwoFactorEnabled field.
func (o *User) SetTwoFactorEnabled(v bool) {
	o.TwoFactorEnabled = &v
}

func (o User) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o User) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FirstName) {
		toSerialize["firstName"] = o.FirstName
	}
	if !IsNil(o.LastName) {
		toSerialize["lastName"] = o.LastName
	}
	if !IsNil(o.ApiOnlyUser) {
		toSerialize["apiOnlyUser"] = o.ApiOnlyUser
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.IsEnabled) {
		toSerialize["isEnabled"] = o.IsEnabled
	}
	if !IsNil(o.IsLdap) {
		toSerialize["isLdap"] = o.IsLdap
	}
	if !IsNil(o.IsLocked) {
		toSerialize["isLocked"] = o.IsLocked
	}
	if !IsNil(o.LoggedInUser) {
		toSerialize["loggedInUser"] = o.LoggedInUser
	}
	if !IsNil(o.ReadOnly) {
		toSerialize["readOnly"] = o.ReadOnly
	}
	if !IsNil(o.SupportUser) {
		toSerialize["supportUser"] = o.SupportUser
	}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	if !IsNil(o.UserName) {
		toSerialize["userName"] = o.UserName
	}
	if !IsNil(o.AccessGroupIds) {
		toSerialize["accessGroupIds"] = o.AccessGroupIds
	}
	if !IsNil(o.CurrentSsoProvider) {
		toSerialize["currentSsoProvider"] = o.CurrentSsoProvider
	}
	if !IsNil(o.CustomerTree) {
		toSerialize["customerTree"] = o.CustomerTree
	}
	if !IsNil(o.FullName) {
		toSerialize["fullName"] = o.FullName
	}
	if !IsNil(o.RoleIds) {
		toSerialize["roleIds"] = o.RoleIds
	}
	if !IsNil(o.TwoFactorEnabled) {
		toSerialize["twoFactorEnabled"] = o.TwoFactorEnabled
	}
	return toSerialize, nil
}

type NullableUser struct {
	value *User
	isSet bool
}

func (v NullableUser) Get() *User {
	return v.value
}

func (v *NullableUser) Set(val *User) {
	v.value = val
	v.isSet = true
}

func (v NullableUser) IsSet() bool {
	return v.isSet
}

func (v *NullableUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUser(val *User) *NullableUser {
	return &NullableUser{value: val, isSet: true}
}

func (v NullableUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


